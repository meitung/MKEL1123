
testingThingspeak.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007380  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000214  08007550  08007550  00017550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007764  08007764  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08007764  08007764  00017764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800776c  0800776c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800776c  0800776c  0001776c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007770  08007770  00017770  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007774  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004260  20000074  080077e8  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200042d4  080077e8  000242d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016297  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000337d  00000000  00000000  0003633b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013a8  00000000  00000000  000396b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001250  00000000  00000000  0003aa60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025874  00000000  00000000  0003bcb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000176c6  00000000  00000000  00061524  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e6638  00000000  00000000  00078bea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015f222  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055ac  00000000  00000000  0015f274  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007538 	.word	0x08007538

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	08007538 	.word	0x08007538

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <bufclr>:
#include "stdio.h"
#include "string.h"


void bufclr (char *buf)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b084      	sub	sp, #16
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
	int len = strlen (buf);
 80005cc:	6878      	ldr	r0, [r7, #4]
 80005ce:	f7ff fe1f 	bl	8000210 <strlen>
 80005d2:	4603      	mov	r3, r0
 80005d4:	60bb      	str	r3, [r7, #8]
	for (int i=0; i<len; i++) buf[i] = '\0';
 80005d6:	2300      	movs	r3, #0
 80005d8:	60fb      	str	r3, [r7, #12]
 80005da:	e007      	b.n	80005ec <bufclr+0x28>
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	687a      	ldr	r2, [r7, #4]
 80005e0:	4413      	add	r3, r2
 80005e2:	2200      	movs	r2, #0
 80005e4:	701a      	strb	r2, [r3, #0]
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	3301      	adds	r3, #1
 80005ea:	60fb      	str	r3, [r7, #12]
 80005ec:	68fa      	ldr	r2, [r7, #12]
 80005ee:	68bb      	ldr	r3, [r7, #8]
 80005f0:	429a      	cmp	r2, r3
 80005f2:	dbf3      	blt.n	80005dc <bufclr+0x18>
}
 80005f4:	bf00      	nop
 80005f6:	bf00      	nop
 80005f8:	3710      	adds	r7, #16
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
	...

08000600 <ESP_Init>:


void ESP_Init (char *SSID, char *PASSWD)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b096      	sub	sp, #88	; 0x58
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
 8000608:	6039      	str	r1, [r7, #0]
	char data[80];

	Ringbuf_init();
 800060a:	f000 f933 	bl	8000874 <Ringbuf_init>

	Uart_sendstring("AT+RST\r\n");
 800060e:	4823      	ldr	r0, [pc, #140]	; (800069c <ESP_Init+0x9c>)
 8000610:	f000 f9fc 	bl	8000a0c <Uart_sendstring>
	HAL_Delay(1000);
 8000614:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000618:	f001 fb60 	bl	8001cdc <HAL_Delay>

	Uart_flush();
 800061c:	f000 f972 	bl	8000904 <Uart_flush>

	/********* AT **********/
	Uart_sendstring("AT\r\n");
 8000620:	481f      	ldr	r0, [pc, #124]	; (80006a0 <ESP_Init+0xa0>)
 8000622:	f000 f9f3 	bl	8000a0c <Uart_sendstring>
	while(!(Wait_for("OK\r\n")));
 8000626:	bf00      	nop
 8000628:	481e      	ldr	r0, [pc, #120]	; (80006a4 <ESP_Init+0xa4>)
 800062a:	f000 fa1f 	bl	8000a6c <Wait_for>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d0f9      	beq.n	8000628 <ESP_Init+0x28>

	Uart_flush();
 8000634:	f000 f966 	bl	8000904 <Uart_flush>


	/********* AT+CWMODE=1 **********/
	Uart_sendstring("AT+CWMODE=1\r\n");
 8000638:	481b      	ldr	r0, [pc, #108]	; (80006a8 <ESP_Init+0xa8>)
 800063a:	f000 f9e7 	bl	8000a0c <Uart_sendstring>
	while (!(Wait_for("OK\r\n")));
 800063e:	bf00      	nop
 8000640:	4818      	ldr	r0, [pc, #96]	; (80006a4 <ESP_Init+0xa4>)
 8000642:	f000 fa13 	bl	8000a6c <Wait_for>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d0f9      	beq.n	8000640 <ESP_Init+0x40>

	Uart_flush();
 800064c:	f000 f95a 	bl	8000904 <Uart_flush>


	/********* AT+CWJAP="SSID","PASSWD" **********/
	sprintf (data, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSID, PASSWD);
 8000650:	f107 0008 	add.w	r0, r7, #8
 8000654:	683b      	ldr	r3, [r7, #0]
 8000656:	687a      	ldr	r2, [r7, #4]
 8000658:	4914      	ldr	r1, [pc, #80]	; (80006ac <ESP_Init+0xac>)
 800065a:	f006 faff 	bl	8006c5c <siprintf>
	Uart_sendstring(data);
 800065e:	f107 0308 	add.w	r3, r7, #8
 8000662:	4618      	mov	r0, r3
 8000664:	f000 f9d2 	bl	8000a0c <Uart_sendstring>
	while (!(Wait_for("GOT IP\r\n")));
 8000668:	bf00      	nop
 800066a:	4811      	ldr	r0, [pc, #68]	; (80006b0 <ESP_Init+0xb0>)
 800066c:	f000 f9fe 	bl	8000a6c <Wait_for>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d0f9      	beq.n	800066a <ESP_Init+0x6a>

	Uart_flush();
 8000676:	f000 f945 	bl	8000904 <Uart_flush>

	/********* AT+CIPMUX=0 **********/
	Uart_sendstring("AT+CIPMUX=0\r\n");
 800067a:	480e      	ldr	r0, [pc, #56]	; (80006b4 <ESP_Init+0xb4>)
 800067c:	f000 f9c6 	bl	8000a0c <Uart_sendstring>
	while (!(Wait_for("OK\r\n")));
 8000680:	bf00      	nop
 8000682:	4808      	ldr	r0, [pc, #32]	; (80006a4 <ESP_Init+0xa4>)
 8000684:	f000 f9f2 	bl	8000a6c <Wait_for>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d0f9      	beq.n	8000682 <ESP_Init+0x82>

	Uart_flush();
 800068e:	f000 f939 	bl	8000904 <Uart_flush>

}
 8000692:	bf00      	nop
 8000694:	3758      	adds	r7, #88	; 0x58
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	08007550 	.word	0x08007550
 80006a0:	0800755c 	.word	0x0800755c
 80006a4:	08007564 	.word	0x08007564
 80006a8:	0800756c 	.word	0x0800756c
 80006ac:	0800757c 	.word	0x0800757c
 80006b0:	08007594 	.word	0x08007594
 80006b4:	080075a0 	.word	0x080075a0

080006b8 <ESP_Send_Multi>:
	Ringbuf_init();

}

void ESP_Send_Multi (char *APIkey, int numberoffileds, uint16_t value[])
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	f5ad 7d3e 	sub.w	sp, sp, #760	; 0x2f8
 80006be:	af00      	add	r7, sp, #0
 80006c0:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 80006c4:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 80006c8:	6018      	str	r0, [r3, #0]
 80006ca:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 80006ce:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 80006d2:	6019      	str	r1, [r3, #0]
 80006d4:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 80006d8:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 80006dc:	601a      	str	r2, [r3, #0]
	char local_buf[500] = {0};
 80006de:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 80006e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
 80006ea:	3304      	adds	r3, #4
 80006ec:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
 80006f0:	2100      	movs	r1, #0
 80006f2:	4618      	mov	r0, r3
 80006f4:	f006 faaa 	bl	8006c4c <memset>
	char local_buf2[30] = {0};
 80006f8:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 80006fc:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8000700:	2200      	movs	r2, #0
 8000702:	601a      	str	r2, [r3, #0]
 8000704:	3304      	adds	r3, #4
 8000706:	2200      	movs	r2, #0
 8000708:	601a      	str	r2, [r3, #0]
 800070a:	605a      	str	r2, [r3, #4]
 800070c:	609a      	str	r2, [r3, #8]
 800070e:	60da      	str	r2, [r3, #12]
 8000710:	611a      	str	r2, [r3, #16]
 8000712:	615a      	str	r2, [r3, #20]
 8000714:	831a      	strh	r2, [r3, #24]
	char field_buf[200] = {0};
 8000716:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 800071a:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 800071e:	2200      	movs	r2, #0
 8000720:	601a      	str	r2, [r3, #0]
 8000722:	3304      	adds	r3, #4
 8000724:	22c4      	movs	r2, #196	; 0xc4
 8000726:	2100      	movs	r1, #0
 8000728:	4618      	mov	r0, r3
 800072a:	f006 fa8f 	bl	8006c4c <memset>


	Uart_sendstring("AT+CIPSTART=\"TCP\",\"184.106.153.149\",80\r\n");
 800072e:	4848      	ldr	r0, [pc, #288]	; (8000850 <ESP_Send_Multi+0x198>)
 8000730:	f000 f96c 	bl	8000a0c <Uart_sendstring>
	while (!(Wait_for("OK\r\n")));
 8000734:	bf00      	nop
 8000736:	4847      	ldr	r0, [pc, #284]	; (8000854 <ESP_Send_Multi+0x19c>)
 8000738:	f000 f998 	bl	8000a6c <Wait_for>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d0f9      	beq.n	8000736 <ESP_Send_Multi+0x7e>

	sprintf (local_buf, "GET /update?api_key=%s", APIkey);
 8000742:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 8000746:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 800074a:	f107 00fc 	add.w	r0, r7, #252	; 0xfc
 800074e:	681a      	ldr	r2, [r3, #0]
 8000750:	4941      	ldr	r1, [pc, #260]	; (8000858 <ESP_Send_Multi+0x1a0>)
 8000752:	f006 fa83 	bl	8006c5c <siprintf>
	for (int i=0; i<numberoffileds; i++)
 8000756:	2300      	movs	r3, #0
 8000758:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
 800075c:	e01f      	b.n	800079e <ESP_Send_Multi+0xe6>
	{
		sprintf(field_buf, "&field%d=%u",i+1, value[i]);
 800075e:	f8d7 32f4 	ldr.w	r3, [r7, #756]	; 0x2f4
 8000762:	1c59      	adds	r1, r3, #1
 8000764:	f8d7 32f4 	ldr.w	r3, [r7, #756]	; 0x2f4
 8000768:	005b      	lsls	r3, r3, #1
 800076a:	f507 723e 	add.w	r2, r7, #760	; 0x2f8
 800076e:	f5a2 723d 	sub.w	r2, r2, #756	; 0x2f4
 8000772:	6812      	ldr	r2, [r2, #0]
 8000774:	4413      	add	r3, r2
 8000776:	881b      	ldrh	r3, [r3, #0]
 8000778:	f107 0014 	add.w	r0, r7, #20
 800077c:	460a      	mov	r2, r1
 800077e:	4937      	ldr	r1, [pc, #220]	; (800085c <ESP_Send_Multi+0x1a4>)
 8000780:	f006 fa6c 	bl	8006c5c <siprintf>
		strcat (local_buf, field_buf);
 8000784:	f107 0214 	add.w	r2, r7, #20
 8000788:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800078c:	4611      	mov	r1, r2
 800078e:	4618      	mov	r0, r3
 8000790:	f006 fa84 	bl	8006c9c <strcat>
	for (int i=0; i<numberoffileds; i++)
 8000794:	f8d7 32f4 	ldr.w	r3, [r7, #756]	; 0x2f4
 8000798:	3301      	adds	r3, #1
 800079a:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
 800079e:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 80007a2:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 80007a6:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	429a      	cmp	r2, r3
 80007ae:	dbd6      	blt.n	800075e <ESP_Send_Multi+0xa6>
	}

	strcat(local_buf, "\r\n");
 80007b0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80007b4:	4618      	mov	r0, r3
 80007b6:	f7ff fd2b 	bl	8000210 <strlen>
 80007ba:	4603      	mov	r3, r0
 80007bc:	461a      	mov	r2, r3
 80007be:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80007c2:	4413      	add	r3, r2
 80007c4:	4a26      	ldr	r2, [pc, #152]	; (8000860 <ESP_Send_Multi+0x1a8>)
 80007c6:	8811      	ldrh	r1, [r2, #0]
 80007c8:	7892      	ldrb	r2, [r2, #2]
 80007ca:	8019      	strh	r1, [r3, #0]
 80007cc:	709a      	strb	r2, [r3, #2]
	int len = strlen (local_buf);
 80007ce:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80007d2:	4618      	mov	r0, r3
 80007d4:	f7ff fd1c 	bl	8000210 <strlen>
 80007d8:	4603      	mov	r3, r0
 80007da:	f8c7 32f0 	str.w	r3, [r7, #752]	; 0x2f0

	sprintf (local_buf2, "AT+CIPSEND=%d\r\n", len);
 80007de:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80007e2:	f8d7 22f0 	ldr.w	r2, [r7, #752]	; 0x2f0
 80007e6:	491f      	ldr	r1, [pc, #124]	; (8000864 <ESP_Send_Multi+0x1ac>)
 80007e8:	4618      	mov	r0, r3
 80007ea:	f006 fa37 	bl	8006c5c <siprintf>
	Uart_sendstring(local_buf2);
 80007ee:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80007f2:	4618      	mov	r0, r3
 80007f4:	f000 f90a 	bl	8000a0c <Uart_sendstring>
	while (!(Wait_for(">")));
 80007f8:	bf00      	nop
 80007fa:	481b      	ldr	r0, [pc, #108]	; (8000868 <ESP_Send_Multi+0x1b0>)
 80007fc:	f000 f936 	bl	8000a6c <Wait_for>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d0f9      	beq.n	80007fa <ESP_Send_Multi+0x142>

	Uart_sendstring (local_buf);
 8000806:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800080a:	4618      	mov	r0, r3
 800080c:	f000 f8fe 	bl	8000a0c <Uart_sendstring>
	while (!(Wait_for("SEND OK\r\n")));
 8000810:	bf00      	nop
 8000812:	4816      	ldr	r0, [pc, #88]	; (800086c <ESP_Send_Multi+0x1b4>)
 8000814:	f000 f92a 	bl	8000a6c <Wait_for>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d0f9      	beq.n	8000812 <ESP_Send_Multi+0x15a>

	while (!(Wait_for("CLOSED")));
 800081e:	bf00      	nop
 8000820:	4813      	ldr	r0, [pc, #76]	; (8000870 <ESP_Send_Multi+0x1b8>)
 8000822:	f000 f923 	bl	8000a6c <Wait_for>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d0f9      	beq.n	8000820 <ESP_Send_Multi+0x168>

	bufclr(local_buf);
 800082c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8000830:	4618      	mov	r0, r3
 8000832:	f7ff fec7 	bl	80005c4 <bufclr>
	bufclr(local_buf2);
 8000836:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800083a:	4618      	mov	r0, r3
 800083c:	f7ff fec2 	bl	80005c4 <bufclr>

	Ringbuf_init();
 8000840:	f000 f818 	bl	8000874 <Ringbuf_init>

}
 8000844:	bf00      	nop
 8000846:	f507 773e 	add.w	r7, r7, #760	; 0x2f8
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	080075b0 	.word	0x080075b0
 8000854:	08007564 	.word	0x08007564
 8000858:	08007628 	.word	0x08007628
 800085c:	08007640 	.word	0x08007640
 8000860:	0800764c 	.word	0x0800764c
 8000864:	08007600 	.word	0x08007600
 8000868:	08007610 	.word	0x08007610
 800086c:	08007614 	.word	0x08007614
 8000870:	08007620 	.word	0x08007620

08000874 <Ringbuf_init>:

void store_char(unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  _rx_buffer = &rx_buffer;
 8000878:	4b0d      	ldr	r3, [pc, #52]	; (80008b0 <Ringbuf_init+0x3c>)
 800087a:	4a0e      	ldr	r2, [pc, #56]	; (80008b4 <Ringbuf_init+0x40>)
 800087c:	601a      	str	r2, [r3, #0]
  _tx_buffer = &tx_buffer;
 800087e:	4b0e      	ldr	r3, [pc, #56]	; (80008b8 <Ringbuf_init+0x44>)
 8000880:	4a0e      	ldr	r2, [pc, #56]	; (80008bc <Ringbuf_init+0x48>)
 8000882:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(uart, UART_IT_ERR);
 8000884:	4b0e      	ldr	r3, [pc, #56]	; (80008c0 <Ringbuf_init+0x4c>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	695a      	ldr	r2, [r3, #20]
 800088a:	4b0d      	ldr	r3, [pc, #52]	; (80008c0 <Ringbuf_init+0x4c>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	f042 0201 	orr.w	r2, r2, #1
 8000892:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
 8000894:	4b0a      	ldr	r3, [pc, #40]	; (80008c0 <Ringbuf_init+0x4c>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	68da      	ldr	r2, [r3, #12]
 800089a:	4b09      	ldr	r3, [pc, #36]	; (80008c0 <Ringbuf_init+0x4c>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	f042 0220 	orr.w	r2, r2, #32
 80008a2:	60da      	str	r2, [r3, #12]
}
 80008a4:	bf00      	nop
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr
 80008ae:	bf00      	nop
 80008b0:	20000120 	.word	0x20000120
 80008b4:	20000090 	.word	0x20000090
 80008b8:	20000124 	.word	0x20000124
 80008bc:	200000d8 	.word	0x200000d8
 80008c0:	2000049c 	.word	0x2000049c

080008c4 <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b085      	sub	sp, #20
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	4603      	mov	r3, r0
 80008cc:	6039      	str	r1, [r7, #0]
 80008ce:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 80008d0:	683b      	ldr	r3, [r7, #0]
 80008d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d4:	3301      	adds	r3, #1
 80008d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80008da:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	429a      	cmp	r2, r3
 80008e4:	d007      	beq.n	80008f6 <store_char+0x32>
    buffer->buffer[buffer->head] = c;
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ea:	683a      	ldr	r2, [r7, #0]
 80008ec:	79f9      	ldrb	r1, [r7, #7]
 80008ee:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 80008f0:	68fa      	ldr	r2, [r7, #12]
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	641a      	str	r2, [r3, #64]	; 0x40
  }
}
 80008f6:	bf00      	nop
 80008f8:	3714      	adds	r7, #20
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr
	...

08000904 <Uart_flush>:

void Uart_flush (void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0

	  _rx_buffer->head = _rx_buffer->tail;
 8000908:	4b05      	ldr	r3, [pc, #20]	; (8000920 <Uart_flush+0x1c>)
 800090a:	681a      	ldr	r2, [r3, #0]
 800090c:	4b04      	ldr	r3, [pc, #16]	; (8000920 <Uart_flush+0x1c>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000912:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000914:	bf00      	nop
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	20000120 	.word	0x20000120

08000924 <Uart_read>:
	if (so_far == stringlength) return 1;
	else return -1;
}

int Uart_read(void)
{
 8000924:	b480      	push	{r7}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0
  // if the head isn't ahead of the tail, we don't have any characters
  if(_rx_buffer->head == _rx_buffer->tail)
 800092a:	4b11      	ldr	r3, [pc, #68]	; (8000970 <Uart_read+0x4c>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000930:	4b0f      	ldr	r3, [pc, #60]	; (8000970 <Uart_read+0x4c>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000936:	429a      	cmp	r2, r3
 8000938:	d102      	bne.n	8000940 <Uart_read+0x1c>
  {
    return -1;
 800093a:	f04f 33ff 	mov.w	r3, #4294967295
 800093e:	e010      	b.n	8000962 <Uart_read+0x3e>
  }
  else
  {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 8000940:	4b0b      	ldr	r3, [pc, #44]	; (8000970 <Uart_read+0x4c>)
 8000942:	681a      	ldr	r2, [r3, #0]
 8000944:	4b0a      	ldr	r3, [pc, #40]	; (8000970 <Uart_read+0x4c>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800094a:	5cd3      	ldrb	r3, [r2, r3]
 800094c:	71fb      	strb	r3, [r7, #7]
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 800094e:	4b08      	ldr	r3, [pc, #32]	; (8000970 <Uart_read+0x4c>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000954:	1c5a      	adds	r2, r3, #1
 8000956:	4b06      	ldr	r3, [pc, #24]	; (8000970 <Uart_read+0x4c>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800095e:	645a      	str	r2, [r3, #68]	; 0x44
    return c;
 8000960:	79fb      	ldrb	r3, [r7, #7]
  }
}
 8000962:	4618      	mov	r0, r3
 8000964:	370c      	adds	r7, #12
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	20000120 	.word	0x20000120

08000974 <Uart_write>:

void Uart_write(int c)
{
 8000974:	b480      	push	{r7}
 8000976:	b085      	sub	sp, #20
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
	if (c>=0)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	2b00      	cmp	r3, #0
 8000980:	db21      	blt.n	80009c6 <Uart_write+0x52>
	{
		int i = (_tx_buffer->head + 1) % UART_BUFFER_SIZE;
 8000982:	4b14      	ldr	r3, [pc, #80]	; (80009d4 <Uart_write+0x60>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000988:	3301      	adds	r3, #1
 800098a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800098e:	60fb      	str	r3, [r7, #12]

		// If the output buffer is full, there's nothing for it other than to
		// wait for the interrupt handler to empty it a bit
		// ???: return 0 here instead?
		while (i == _tx_buffer->tail);
 8000990:	bf00      	nop
 8000992:	4b10      	ldr	r3, [pc, #64]	; (80009d4 <Uart_write+0x60>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	429a      	cmp	r2, r3
 800099c:	d0f9      	beq.n	8000992 <Uart_write+0x1e>

		_tx_buffer->buffer[_tx_buffer->head] = (uint8_t)c;
 800099e:	4b0d      	ldr	r3, [pc, #52]	; (80009d4 <Uart_write+0x60>)
 80009a0:	681a      	ldr	r2, [r3, #0]
 80009a2:	4b0c      	ldr	r3, [pc, #48]	; (80009d4 <Uart_write+0x60>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a8:	6879      	ldr	r1, [r7, #4]
 80009aa:	b2c9      	uxtb	r1, r1
 80009ac:	54d1      	strb	r1, [r2, r3]
		_tx_buffer->head = i;
 80009ae:	4b09      	ldr	r3, [pc, #36]	; (80009d4 <Uart_write+0x60>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	68fa      	ldr	r2, [r7, #12]
 80009b4:	641a      	str	r2, [r3, #64]	; 0x40

		__HAL_UART_ENABLE_IT(uart, UART_IT_TXE); // Enable UART transmission interrupt
 80009b6:	4b08      	ldr	r3, [pc, #32]	; (80009d8 <Uart_write+0x64>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	68da      	ldr	r2, [r3, #12]
 80009bc:	4b06      	ldr	r3, [pc, #24]	; (80009d8 <Uart_write+0x64>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80009c4:	60da      	str	r2, [r3, #12]
	}
}
 80009c6:	bf00      	nop
 80009c8:	3714      	adds	r7, #20
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop
 80009d4:	20000124 	.word	0x20000124
 80009d8:	2000049c 	.word	0x2000049c

080009dc <IsDataAvailable>:

int IsDataAvailable(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % UART_BUFFER_SIZE;
 80009e0:	4b09      	ldr	r3, [pc, #36]	; (8000a08 <IsDataAvailable+0x2c>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e6:	b29a      	uxth	r2, r3
 80009e8:	4b07      	ldr	r3, [pc, #28]	; (8000a08 <IsDataAvailable+0x2c>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ee:	b29b      	uxth	r3, r3
 80009f0:	1ad3      	subs	r3, r2, r3
 80009f2:	b29b      	uxth	r3, r3
 80009f4:	3340      	adds	r3, #64	; 0x40
 80009f6:	b29b      	uxth	r3, r3
 80009f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 80009fc:	4618      	mov	r0, r3
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	20000120 	.word	0x20000120

08000a0c <Uart_sendstring>:

void Uart_sendstring (const char *s)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
	while(*s) Uart_write(*s++);
 8000a14:	e006      	b.n	8000a24 <Uart_sendstring+0x18>
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	1c5a      	adds	r2, r3, #1
 8000a1a:	607a      	str	r2, [r7, #4]
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f7ff ffa8 	bl	8000974 <Uart_write>
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d1f4      	bne.n	8000a16 <Uart_sendstring+0xa>
}
 8000a2c:	bf00      	nop
 8000a2e:	bf00      	nop
 8000a30:	3708      	adds	r7, #8
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
	...

08000a38 <Uart_peek>:

  while(*s) Uart_write(*s++);
}

int Uart_peek()
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  if(_rx_buffer->head == _rx_buffer->tail)
 8000a3c:	4b0a      	ldr	r3, [pc, #40]	; (8000a68 <Uart_peek+0x30>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a42:	4b09      	ldr	r3, [pc, #36]	; (8000a68 <Uart_peek+0x30>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a48:	429a      	cmp	r2, r3
 8000a4a:	d102      	bne.n	8000a52 <Uart_peek+0x1a>
  {
    return -1;
 8000a4c:	f04f 33ff 	mov.w	r3, #4294967295
 8000a50:	e005      	b.n	8000a5e <Uart_peek+0x26>
  }
  else
  {
    return _rx_buffer->buffer[_rx_buffer->tail];
 8000a52:	4b05      	ldr	r3, [pc, #20]	; (8000a68 <Uart_peek+0x30>)
 8000a54:	681a      	ldr	r2, [r3, #0]
 8000a56:	4b04      	ldr	r3, [pc, #16]	; (8000a68 <Uart_peek+0x30>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a5c:	5cd3      	ldrb	r3, [r2, r3]
  }
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr
 8000a68:	20000120 	.word	0x20000120

08000a6c <Wait_for>:
	return 1;
}


int Wait_for (char *string)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b084      	sub	sp, #16
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
	int so_far =0;
 8000a74:	2300      	movs	r3, #0
 8000a76:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 8000a78:	6878      	ldr	r0, [r7, #4]
 8000a7a:	f7ff fbc9 	bl	8000210 <strlen>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	60bb      	str	r3, [r7, #8]

again:
	while (!IsDataAvailable());
 8000a82:	bf00      	nop
 8000a84:	f7ff ffaa 	bl	80009dc <IsDataAvailable>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d0fa      	beq.n	8000a84 <Wait_for+0x18>
	if (Uart_peek() != string[so_far])
 8000a8e:	f7ff ffd3 	bl	8000a38 <Uart_peek>
 8000a92:	4601      	mov	r1, r0
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	687a      	ldr	r2, [r7, #4]
 8000a98:	4413      	add	r3, r2
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	4299      	cmp	r1, r3
 8000a9e:	d01a      	beq.n	8000ad6 <Wait_for+0x6a>
	{
		 _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE ;
 8000aa0:	4b1b      	ldr	r3, [pc, #108]	; (8000b10 <Wait_for+0xa4>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aa6:	1c5a      	adds	r2, r3, #1
 8000aa8:	4b19      	ldr	r3, [pc, #100]	; (8000b10 <Wait_for+0xa4>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000ab0:	645a      	str	r2, [r3, #68]	; 0x44
		goto again;
 8000ab2:	e7e6      	b.n	8000a82 <Wait_for+0x16>

	}
	while (Uart_peek() == string [so_far])
	{
		so_far++;
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	3301      	adds	r3, #1
 8000ab8:	60fb      	str	r3, [r7, #12]
		Uart_read();
 8000aba:	f7ff ff33 	bl	8000924 <Uart_read>
		if (so_far == len) return 1;
 8000abe:	68fa      	ldr	r2, [r7, #12]
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	429a      	cmp	r2, r3
 8000ac4:	d101      	bne.n	8000aca <Wait_for+0x5e>
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	e01d      	b.n	8000b06 <Wait_for+0x9a>
		while (!IsDataAvailable());
 8000aca:	bf00      	nop
 8000acc:	f7ff ff86 	bl	80009dc <IsDataAvailable>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d0fa      	beq.n	8000acc <Wait_for+0x60>
	while (Uart_peek() == string [so_far])
 8000ad6:	f7ff ffaf 	bl	8000a38 <Uart_peek>
 8000ada:	4601      	mov	r1, r0
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	687a      	ldr	r2, [r7, #4]
 8000ae0:	4413      	add	r3, r2
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	4299      	cmp	r1, r3
 8000ae6:	d0e5      	beq.n	8000ab4 <Wait_for+0x48>
	}

	if (so_far != len)
 8000ae8:	68fa      	ldr	r2, [r7, #12]
 8000aea:	68bb      	ldr	r3, [r7, #8]
 8000aec:	429a      	cmp	r2, r3
 8000aee:	d002      	beq.n	8000af6 <Wait_for+0x8a>
	{
		so_far = 0;
 8000af0:	2300      	movs	r3, #0
 8000af2:	60fb      	str	r3, [r7, #12]
		goto again;
 8000af4:	e7c5      	b.n	8000a82 <Wait_for+0x16>
	}

	if (so_far == len) return 1;
 8000af6:	68fa      	ldr	r2, [r7, #12]
 8000af8:	68bb      	ldr	r3, [r7, #8]
 8000afa:	429a      	cmp	r2, r3
 8000afc:	d101      	bne.n	8000b02 <Wait_for+0x96>
 8000afe:	2301      	movs	r3, #1
 8000b00:	e001      	b.n	8000b06 <Wait_for+0x9a>
	else return -1;
 8000b02:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	3710      	adds	r7, #16
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	20000120 	.word	0x20000120

08000b14 <Uart_isr>:




void Uart_isr (UART_HandleTypeDef *huart)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b086      	sub	sp, #24
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	68db      	ldr	r3, [r3, #12]
 8000b2a:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	f003 0320 	and.w	r3, r3, #32
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d013      	beq.n	8000b5e <Uart_isr+0x4a>
 8000b36:	693b      	ldr	r3, [r7, #16]
 8000b38:	f003 0320 	and.w	r3, r3, #32
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d00e      	beq.n	8000b5e <Uart_isr+0x4a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	685b      	ldr	r3, [r3, #4]
 8000b4c:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 8000b4e:	4b1c      	ldr	r3, [pc, #112]	; (8000bc0 <Uart_isr+0xac>)
 8000b50:	681a      	ldr	r2, [r3, #0]
 8000b52:	7bfb      	ldrb	r3, [r7, #15]
 8000b54:	4611      	mov	r1, r2
 8000b56:	4618      	mov	r0, r3
 8000b58:	f7ff feb4 	bl	80008c4 <store_char>
        return;
 8000b5c:	e02c      	b.n	8000bb8 <Uart_isr+0xa4>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8000b5e:	697b      	ldr	r3, [r7, #20]
 8000b60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d027      	beq.n	8000bb8 <Uart_isr+0xa4>
 8000b68:	693b      	ldr	r3, [r7, #16]
 8000b6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d022      	beq.n	8000bb8 <Uart_isr+0xa4>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 8000b72:	4b14      	ldr	r3, [pc, #80]	; (8000bc4 <Uart_isr+0xb0>)
 8000b74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b76:	4b13      	ldr	r3, [pc, #76]	; (8000bc4 <Uart_isr+0xb0>)
 8000b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b7a:	429a      	cmp	r2, r3
 8000b7c:	d108      	bne.n	8000b90 <Uart_isr+0x7c>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	68da      	ldr	r2, [r3, #12]
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000b8c:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 8000b8e:	e012      	b.n	8000bb6 <Uart_isr+0xa2>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 8000b90:	4b0c      	ldr	r3, [pc, #48]	; (8000bc4 <Uart_isr+0xb0>)
 8000b92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b94:	4a0b      	ldr	r2, [pc, #44]	; (8000bc4 <Uart_isr+0xb0>)
 8000b96:	5cd3      	ldrb	r3, [r2, r3]
 8000b98:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 8000b9a:	4b0a      	ldr	r3, [pc, #40]	; (8000bc4 <Uart_isr+0xb0>)
 8000b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b9e:	3301      	adds	r3, #1
 8000ba0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000ba4:	4a07      	ldr	r2, [pc, #28]	; (8000bc4 <Uart_isr+0xb0>)
 8000ba6:	6453      	str	r3, [r2, #68]	; 0x44
    	      huart->Instance->SR;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	7bba      	ldrb	r2, [r7, #14]
 8000bb4:	605a      	str	r2, [r3, #4]
    	return;
 8000bb6:	bf00      	nop
    }
}
 8000bb8:	3718      	adds	r7, #24
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	20000120 	.word	0x20000120
 8000bc4:	200000d8 	.word	0x200000d8

08000bc8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b085      	sub	sp, #20
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	60f8      	str	r0, [r7, #12]
 8000bd0:	60b9      	str	r1, [r7, #8]
 8000bd2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	4a07      	ldr	r2, [pc, #28]	; (8000bf4 <vApplicationGetIdleTaskMemory+0x2c>)
 8000bd8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000bda:	68bb      	ldr	r3, [r7, #8]
 8000bdc:	4a06      	ldr	r2, [pc, #24]	; (8000bf8 <vApplicationGetIdleTaskMemory+0x30>)
 8000bde:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	2280      	movs	r2, #128	; 0x80
 8000be4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000be6:	bf00      	nop
 8000be8:	3714      	adds	r7, #20
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	20000128 	.word	0x20000128
 8000bf8:	2000017c 	.word	0x2000017c

08000bfc <microDelay>:
float tCelsius = 0;
float tFahrenheit = 0;
float RH = 0;

void microDelay (uint16_t delay)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	4603      	mov	r3, r0
 8000c04:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(&htim1, 0);
 8000c06:	4b09      	ldr	r3, [pc, #36]	; (8000c2c <microDelay+0x30>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	625a      	str	r2, [r3, #36]	; 0x24
  while (__HAL_TIM_GET_COUNTER(&htim1) < delay);
 8000c0e:	bf00      	nop
 8000c10:	4b06      	ldr	r3, [pc, #24]	; (8000c2c <microDelay+0x30>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000c16:	88fb      	ldrh	r3, [r7, #6]
 8000c18:	429a      	cmp	r2, r3
 8000c1a:	d3f9      	bcc.n	8000c10 <microDelay+0x14>
}
 8000c1c:	bf00      	nop
 8000c1e:	bf00      	nop
 8000c20:	370c      	adds	r7, #12
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	2000037c 	.word	0x2000037c

08000c30 <DHT22_Start>:

uint8_t DHT22_Start (void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b086      	sub	sp, #24
 8000c34:	af00      	add	r7, sp, #0
  uint8_t Response = 0;
 8000c36:	2300      	movs	r3, #0
 8000c38:	75fb      	strb	r3, [r7, #23]
  GPIO_InitTypeDef GPIO_InitStructPrivate = {0};
 8000c3a:	463b      	mov	r3, r7
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	601a      	str	r2, [r3, #0]
 8000c40:	605a      	str	r2, [r3, #4]
 8000c42:	609a      	str	r2, [r3, #8]
 8000c44:	60da      	str	r2, [r3, #12]
 8000c46:	611a      	str	r2, [r3, #16]
  GPIO_InitStructPrivate.Pin = DHT22_PIN;
 8000c48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c4c:	603b      	str	r3, [r7, #0]
  GPIO_InitStructPrivate.Mode = GPIO_MODE_OUTPUT_PP;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	607b      	str	r3, [r7, #4]
  GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 8000c52:	2300      	movs	r3, #0
 8000c54:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(DHT22_PORT, &GPIO_InitStructPrivate); // set the pin as output
 8000c5a:	463b      	mov	r3, r7
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	482d      	ldr	r0, [pc, #180]	; (8000d14 <DHT22_Start+0xe4>)
 8000c60:	f001 fde4 	bl	800282c <HAL_GPIO_Init>
  HAL_GPIO_WritePin (DHT22_PORT, DHT22_PIN, 0);   // pull the pin low
 8000c64:	2200      	movs	r2, #0
 8000c66:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c6a:	482a      	ldr	r0, [pc, #168]	; (8000d14 <DHT22_Start+0xe4>)
 8000c6c:	f001 ff8a 	bl	8002b84 <HAL_GPIO_WritePin>
  microDelay (1300);   // wait for 1300us
 8000c70:	f240 5014 	movw	r0, #1300	; 0x514
 8000c74:	f7ff ffc2 	bl	8000bfc <microDelay>
  HAL_GPIO_WritePin (DHT22_PORT, DHT22_PIN, 1);   // pull the pin high
 8000c78:	2201      	movs	r2, #1
 8000c7a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c7e:	4825      	ldr	r0, [pc, #148]	; (8000d14 <DHT22_Start+0xe4>)
 8000c80:	f001 ff80 	bl	8002b84 <HAL_GPIO_WritePin>
  microDelay (30);   // wait for 30us
 8000c84:	201e      	movs	r0, #30
 8000c86:	f7ff ffb9 	bl	8000bfc <microDelay>
  GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	607b      	str	r3, [r7, #4]
  GPIO_InitStructPrivate.Pull = GPIO_PULLUP;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(DHT22_PORT, &GPIO_InitStructPrivate); // set the pin as input
 8000c92:	463b      	mov	r3, r7
 8000c94:	4619      	mov	r1, r3
 8000c96:	481f      	ldr	r0, [pc, #124]	; (8000d14 <DHT22_Start+0xe4>)
 8000c98:	f001 fdc8 	bl	800282c <HAL_GPIO_Init>
  microDelay (40);
 8000c9c:	2028      	movs	r0, #40	; 0x28
 8000c9e:	f7ff ffad 	bl	8000bfc <microDelay>
  if (!(HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)))
 8000ca2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ca6:	481b      	ldr	r0, [pc, #108]	; (8000d14 <DHT22_Start+0xe4>)
 8000ca8:	f001 ff54 	bl	8002b54 <HAL_GPIO_ReadPin>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d10c      	bne.n	8000ccc <DHT22_Start+0x9c>
  {
    microDelay (80);
 8000cb2:	2050      	movs	r0, #80	; 0x50
 8000cb4:	f7ff ffa2 	bl	8000bfc <microDelay>
    if ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN))) Response = 1;
 8000cb8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cbc:	4815      	ldr	r0, [pc, #84]	; (8000d14 <DHT22_Start+0xe4>)
 8000cbe:	f001 ff49 	bl	8002b54 <HAL_GPIO_ReadPin>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <DHT22_Start+0x9c>
 8000cc8:	2301      	movs	r3, #1
 8000cca:	75fb      	strb	r3, [r7, #23]
  }
  pMillis = HAL_GetTick();
 8000ccc:	f000 fffa 	bl	8001cc4 <HAL_GetTick>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	4a11      	ldr	r2, [pc, #68]	; (8000d18 <DHT22_Start+0xe8>)
 8000cd4:	6013      	str	r3, [r2, #0]
  cMillis = HAL_GetTick();
 8000cd6:	f000 fff5 	bl	8001cc4 <HAL_GetTick>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	4a0f      	ldr	r2, [pc, #60]	; (8000d1c <DHT22_Start+0xec>)
 8000cde:	6013      	str	r3, [r2, #0]
  while ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)) && pMillis + 2 > cMillis)
 8000ce0:	e004      	b.n	8000cec <DHT22_Start+0xbc>
  {
    cMillis = HAL_GetTick();
 8000ce2:	f000 ffef 	bl	8001cc4 <HAL_GetTick>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	4a0c      	ldr	r2, [pc, #48]	; (8000d1c <DHT22_Start+0xec>)
 8000cea:	6013      	str	r3, [r2, #0]
  while ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)) && pMillis + 2 > cMillis)
 8000cec:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cf0:	4808      	ldr	r0, [pc, #32]	; (8000d14 <DHT22_Start+0xe4>)
 8000cf2:	f001 ff2f 	bl	8002b54 <HAL_GPIO_ReadPin>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d006      	beq.n	8000d0a <DHT22_Start+0xda>
 8000cfc:	4b06      	ldr	r3, [pc, #24]	; (8000d18 <DHT22_Start+0xe8>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	1c9a      	adds	r2, r3, #2
 8000d02:	4b06      	ldr	r3, [pc, #24]	; (8000d1c <DHT22_Start+0xec>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	429a      	cmp	r2, r3
 8000d08:	d8eb      	bhi.n	8000ce2 <DHT22_Start+0xb2>
  }
  return Response;
 8000d0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	3718      	adds	r7, #24
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	40020400 	.word	0x40020400
 8000d18:	200004f8 	.word	0x200004f8
 8000d1c:	200004fc 	.word	0x200004fc

08000d20 <DHT22_Read>:

uint8_t DHT22_Read (void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
  uint8_t a,b;
  for (a=0;a<8;a++)
 8000d26:	2300      	movs	r3, #0
 8000d28:	71fb      	strb	r3, [r7, #7]
 8000d2a:	e066      	b.n	8000dfa <DHT22_Read+0xda>
  {
    pMillis = HAL_GetTick();
 8000d2c:	f000 ffca 	bl	8001cc4 <HAL_GetTick>
 8000d30:	4603      	mov	r3, r0
 8000d32:	4a36      	ldr	r2, [pc, #216]	; (8000e0c <DHT22_Read+0xec>)
 8000d34:	6013      	str	r3, [r2, #0]
    cMillis = HAL_GetTick();
 8000d36:	f000 ffc5 	bl	8001cc4 <HAL_GetTick>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	4a34      	ldr	r2, [pc, #208]	; (8000e10 <DHT22_Read+0xf0>)
 8000d3e:	6013      	str	r3, [r2, #0]
    while (!(HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)) && pMillis + 2 > cMillis)
 8000d40:	e004      	b.n	8000d4c <DHT22_Read+0x2c>
    {  // wait for the pin to go high
      cMillis = HAL_GetTick();
 8000d42:	f000 ffbf 	bl	8001cc4 <HAL_GetTick>
 8000d46:	4603      	mov	r3, r0
 8000d48:	4a31      	ldr	r2, [pc, #196]	; (8000e10 <DHT22_Read+0xf0>)
 8000d4a:	6013      	str	r3, [r2, #0]
    while (!(HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)) && pMillis + 2 > cMillis)
 8000d4c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d50:	4830      	ldr	r0, [pc, #192]	; (8000e14 <DHT22_Read+0xf4>)
 8000d52:	f001 feff 	bl	8002b54 <HAL_GPIO_ReadPin>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d106      	bne.n	8000d6a <DHT22_Read+0x4a>
 8000d5c:	4b2b      	ldr	r3, [pc, #172]	; (8000e0c <DHT22_Read+0xec>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	1c9a      	adds	r2, r3, #2
 8000d62:	4b2b      	ldr	r3, [pc, #172]	; (8000e10 <DHT22_Read+0xf0>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	429a      	cmp	r2, r3
 8000d68:	d8eb      	bhi.n	8000d42 <DHT22_Read+0x22>
    }
    microDelay (40);   // wait for 40 us
 8000d6a:	2028      	movs	r0, #40	; 0x28
 8000d6c:	f7ff ff46 	bl	8000bfc <microDelay>
    if (!(HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)))   // if the pin is low
 8000d70:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d74:	4827      	ldr	r0, [pc, #156]	; (8000e14 <DHT22_Read+0xf4>)
 8000d76:	f001 feed 	bl	8002b54 <HAL_GPIO_ReadPin>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d10e      	bne.n	8000d9e <DHT22_Read+0x7e>
      b&= ~(1<<(7-a));
 8000d80:	79fb      	ldrb	r3, [r7, #7]
 8000d82:	f1c3 0307 	rsb	r3, r3, #7
 8000d86:	2201      	movs	r2, #1
 8000d88:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8c:	b25b      	sxtb	r3, r3
 8000d8e:	43db      	mvns	r3, r3
 8000d90:	b25a      	sxtb	r2, r3
 8000d92:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000d96:	4013      	ands	r3, r2
 8000d98:	b25b      	sxtb	r3, r3
 8000d9a:	71bb      	strb	r3, [r7, #6]
 8000d9c:	e00b      	b.n	8000db6 <DHT22_Read+0x96>
    else
      b|= (1<<(7-a));
 8000d9e:	79fb      	ldrb	r3, [r7, #7]
 8000da0:	f1c3 0307 	rsb	r3, r3, #7
 8000da4:	2201      	movs	r2, #1
 8000da6:	fa02 f303 	lsl.w	r3, r2, r3
 8000daa:	b25a      	sxtb	r2, r3
 8000dac:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000db0:	4313      	orrs	r3, r2
 8000db2:	b25b      	sxtb	r3, r3
 8000db4:	71bb      	strb	r3, [r7, #6]
    pMillis = HAL_GetTick();
 8000db6:	f000 ff85 	bl	8001cc4 <HAL_GetTick>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	4a13      	ldr	r2, [pc, #76]	; (8000e0c <DHT22_Read+0xec>)
 8000dbe:	6013      	str	r3, [r2, #0]
    cMillis = HAL_GetTick();
 8000dc0:	f000 ff80 	bl	8001cc4 <HAL_GetTick>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	4a12      	ldr	r2, [pc, #72]	; (8000e10 <DHT22_Read+0xf0>)
 8000dc8:	6013      	str	r3, [r2, #0]
    while ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)) && pMillis + 2 > cMillis)
 8000dca:	e004      	b.n	8000dd6 <DHT22_Read+0xb6>
    {  // wait for the pin to go low
      cMillis = HAL_GetTick();
 8000dcc:	f000 ff7a 	bl	8001cc4 <HAL_GetTick>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	4a0f      	ldr	r2, [pc, #60]	; (8000e10 <DHT22_Read+0xf0>)
 8000dd4:	6013      	str	r3, [r2, #0]
    while ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)) && pMillis + 2 > cMillis)
 8000dd6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dda:	480e      	ldr	r0, [pc, #56]	; (8000e14 <DHT22_Read+0xf4>)
 8000ddc:	f001 feba 	bl	8002b54 <HAL_GPIO_ReadPin>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d006      	beq.n	8000df4 <DHT22_Read+0xd4>
 8000de6:	4b09      	ldr	r3, [pc, #36]	; (8000e0c <DHT22_Read+0xec>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	1c9a      	adds	r2, r3, #2
 8000dec:	4b08      	ldr	r3, [pc, #32]	; (8000e10 <DHT22_Read+0xf0>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	429a      	cmp	r2, r3
 8000df2:	d8eb      	bhi.n	8000dcc <DHT22_Read+0xac>
  for (a=0;a<8;a++)
 8000df4:	79fb      	ldrb	r3, [r7, #7]
 8000df6:	3301      	adds	r3, #1
 8000df8:	71fb      	strb	r3, [r7, #7]
 8000dfa:	79fb      	ldrb	r3, [r7, #7]
 8000dfc:	2b07      	cmp	r3, #7
 8000dfe:	d995      	bls.n	8000d2c <DHT22_Read+0xc>
    }
  }
  return b;
 8000e00:	79bb      	ldrb	r3, [r7, #6]
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3708      	adds	r7, #8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	200004f8 	.word	0x200004f8
 8000e10:	200004fc 	.word	0x200004fc
 8000e14:	40020400 	.word	0x40020400

08000e18 <ADC_Get_Value>:
//#define wifi_uart &huart1
uint16_t ADC_Get_Value(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
	uint16_t val = 0;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	80fb      	strh	r3, [r7, #6]
	HAL_ADC_Start(&hadc1);
 8000e22:	480a      	ldr	r0, [pc, #40]	; (8000e4c <ADC_Get_Value+0x34>)
 8000e24:	f000 ffc2 	bl	8001dac <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 100);
 8000e28:	2164      	movs	r1, #100	; 0x64
 8000e2a:	4808      	ldr	r0, [pc, #32]	; (8000e4c <ADC_Get_Value+0x34>)
 8000e2c:	f001 f8c3 	bl	8001fb6 <HAL_ADC_PollForConversion>
	val = HAL_ADC_GetValue(&hadc1);
 8000e30:	4806      	ldr	r0, [pc, #24]	; (8000e4c <ADC_Get_Value+0x34>)
 8000e32:	f001 f94b 	bl	80020cc <HAL_ADC_GetValue>
 8000e36:	4603      	mov	r3, r0
 8000e38:	80fb      	strh	r3, [r7, #6]
	HAL_ADC_Stop(&hadc1);
 8000e3a:	4804      	ldr	r0, [pc, #16]	; (8000e4c <ADC_Get_Value+0x34>)
 8000e3c:	f001 f888 	bl	8001f50 <HAL_ADC_Stop>
	return val;
 8000e40:	88fb      	ldrh	r3, [r7, #6]

}
 8000e42:	4618      	mov	r0, r3
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	200003c4 	.word	0x200003c4

08000e50 <waterLevelSensor>:

uint16_t waterLevelSensor(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
	uint16_t val = 0;
 8000e56:	2300      	movs	r3, #0
 8000e58:	80fb      	strh	r3, [r7, #6]
	HAL_ADC_Start(&hadc2);
 8000e5a:	480a      	ldr	r0, [pc, #40]	; (8000e84 <waterLevelSensor+0x34>)
 8000e5c:	f000 ffa6 	bl	8001dac <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc2, 100);
 8000e60:	2164      	movs	r1, #100	; 0x64
 8000e62:	4808      	ldr	r0, [pc, #32]	; (8000e84 <waterLevelSensor+0x34>)
 8000e64:	f001 f8a7 	bl	8001fb6 <HAL_ADC_PollForConversion>
	val = HAL_ADC_GetValue(&hadc2);
 8000e68:	4806      	ldr	r0, [pc, #24]	; (8000e84 <waterLevelSensor+0x34>)
 8000e6a:	f001 f92f 	bl	80020cc <HAL_ADC_GetValue>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	80fb      	strh	r3, [r7, #6]
	HAL_ADC_Stop(&hadc2);
 8000e72:	4804      	ldr	r0, [pc, #16]	; (8000e84 <waterLevelSensor+0x34>)
 8000e74:	f001 f86c 	bl	8001f50 <HAL_ADC_Stop>
	return val;
 8000e78:	88fb      	ldrh	r3, [r7, #6]

}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3708      	adds	r7, #8
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	2000040c 	.word	0x2000040c

08000e88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e88:	b5b0      	push	{r4, r5, r7, lr}
 8000e8a:	b09c      	sub	sp, #112	; 0x70
 8000e8c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e8e:	f000 fee3 	bl	8001c58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e92:	f000 f895 	bl	8000fc0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e96:	f000 fa7b 	bl	8001390 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000e9a:	f000 f8ff 	bl	800109c <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000e9e:	f000 fa4d 	bl	800133c <MX_USART1_UART_Init>
  MX_ADC2_Init();
 8000ea2:	f000 f94f 	bl	8001144 <MX_ADC2_Init>
  MX_TIM1_Init();
 8000ea6:	f000 f9a1 	bl	80011ec <MX_TIM1_Init>
  MX_TIM2_Init();
 8000eaa:	f000 f9ef 	bl	800128c <MX_TIM2_Init>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000eae:	2108      	movs	r1, #8
 8000eb0:	4834      	ldr	r0, [pc, #208]	; (8000f84 <main+0xfc>)
 8000eb2:	f002 fe13 	bl	8003adc <HAL_TIM_PWM_Start>
  /* USER CODE BEGIN 2 */

  Vamb = HAL_ADC_GetValue(&hadc1);
 8000eb6:	4834      	ldr	r0, [pc, #208]	; (8000f88 <main+0x100>)
 8000eb8:	f001 f908 	bl	80020cc <HAL_ADC_GetValue>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	b29a      	uxth	r2, r3
 8000ec0:	4b32      	ldr	r3, [pc, #200]	; (8000f8c <main+0x104>)
 8000ec2:	801a      	strh	r2, [r3, #0]
  DC_Multiplier = 65535/(4096-Vamb);
 8000ec4:	4b31      	ldr	r3, [pc, #196]	; (8000f8c <main+0x104>)
 8000ec6:	881b      	ldrh	r3, [r3, #0]
 8000ec8:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8000ecc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ed0:	fb92 f3f3 	sdiv	r3, r2, r3
 8000ed4:	b29a      	uxth	r2, r3
 8000ed6:	4b2e      	ldr	r3, [pc, #184]	; (8000f90 <main+0x108>)
 8000ed8:	801a      	strh	r2, [r3, #0]

  HAL_TIM_Base_Start(&htim1);
 8000eda:	482e      	ldr	r0, [pc, #184]	; (8000f94 <main+0x10c>)
 8000edc:	f002 fcd6 	bl	800388c <HAL_TIM_Base_Start>
  ESP_Init("WIFI_NAME", "WIFI_PASSWORD");
 8000ee0:	492d      	ldr	r1, [pc, #180]	; (8000f98 <main+0x110>)
 8000ee2:	482e      	ldr	r0, [pc, #184]	; (8000f9c <main+0x114>)
 8000ee4:	f7ff fb8c 	bl	8000600 <ESP_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000ee8:	4b2d      	ldr	r3, [pc, #180]	; (8000fa0 <main+0x118>)
 8000eea:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000eee:	461d      	mov	r5, r3
 8000ef0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ef2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ef4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ef8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000efc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f00:	2100      	movs	r1, #0
 8000f02:	4618      	mov	r0, r3
 8000f04:	f004 fc3f 	bl	8005786 <osThreadCreate>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	4a26      	ldr	r2, [pc, #152]	; (8000fa4 <main+0x11c>)
 8000f0c:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task2 */
  osThreadDef(Task2, Task2_int, osPriorityAboveNormal, 0, 128);
 8000f0e:	4b26      	ldr	r3, [pc, #152]	; (8000fa8 <main+0x120>)
 8000f10:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000f14:	461d      	mov	r5, r3
 8000f16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f1a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f1e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task2Handle = osThreadCreate(osThread(Task2), NULL);
 8000f22:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f26:	2100      	movs	r1, #0
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f004 fc2c 	bl	8005786 <osThreadCreate>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	4a1e      	ldr	r2, [pc, #120]	; (8000fac <main+0x124>)
 8000f32:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task3 */
  osThreadDef(Task3, Task3_int, osPriorityNormal, 0, 128);
 8000f34:	4b1e      	ldr	r3, [pc, #120]	; (8000fb0 <main+0x128>)
 8000f36:	f107 041c 	add.w	r4, r7, #28
 8000f3a:	461d      	mov	r5, r3
 8000f3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f40:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f44:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task3Handle = osThreadCreate(osThread(Task3), NULL);
 8000f48:	f107 031c 	add.w	r3, r7, #28
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f004 fc19 	bl	8005786 <osThreadCreate>
 8000f54:	4603      	mov	r3, r0
 8000f56:	4a17      	ldr	r2, [pc, #92]	; (8000fb4 <main+0x12c>)
 8000f58:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task4 */
  osThreadDef(Task4, Task4_int, osPriorityNormal, 0, 128);
 8000f5a:	4b17      	ldr	r3, [pc, #92]	; (8000fb8 <main+0x130>)
 8000f5c:	463c      	mov	r4, r7
 8000f5e:	461d      	mov	r5, r3
 8000f60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f64:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f68:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task4Handle = osThreadCreate(osThread(Task4), NULL);
 8000f6c:	463b      	mov	r3, r7
 8000f6e:	2100      	movs	r1, #0
 8000f70:	4618      	mov	r0, r3
 8000f72:	f004 fc08 	bl	8005786 <osThreadCreate>
 8000f76:	4603      	mov	r3, r0
 8000f78:	4a10      	ldr	r2, [pc, #64]	; (8000fbc <main+0x134>)
 8000f7a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000f7c:	f004 fbfc 	bl	8005778 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f80:	e7fe      	b.n	8000f80 <main+0xf8>
 8000f82:	bf00      	nop
 8000f84:	20000454 	.word	0x20000454
 8000f88:	200003c4 	.word	0x200003c4
 8000f8c:	2000050e 	.word	0x2000050e
 8000f90:	20000510 	.word	0x20000510
 8000f94:	2000037c 	.word	0x2000037c
 8000f98:	08007674 	.word	0x08007674
 8000f9c:	08007684 	.word	0x08007684
 8000fa0:	08007690 	.word	0x08007690
 8000fa4:	200004e0 	.word	0x200004e0
 8000fa8:	080076ac 	.word	0x080076ac
 8000fac:	200004e4 	.word	0x200004e4
 8000fb0:	080076c8 	.word	0x080076c8
 8000fb4:	200004e8 	.word	0x200004e8
 8000fb8:	080076e4 	.word	0x080076e4
 8000fbc:	200004ec 	.word	0x200004ec

08000fc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b094      	sub	sp, #80	; 0x50
 8000fc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fc6:	f107 031c 	add.w	r3, r7, #28
 8000fca:	2234      	movs	r2, #52	; 0x34
 8000fcc:	2100      	movs	r1, #0
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f005 fe3c 	bl	8006c4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fd4:	f107 0308 	add.w	r3, r7, #8
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
 8000fdc:	605a      	str	r2, [r3, #4]
 8000fde:	609a      	str	r2, [r3, #8]
 8000fe0:	60da      	str	r2, [r3, #12]
 8000fe2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	607b      	str	r3, [r7, #4]
 8000fe8:	4b2a      	ldr	r3, [pc, #168]	; (8001094 <SystemClock_Config+0xd4>)
 8000fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fec:	4a29      	ldr	r2, [pc, #164]	; (8001094 <SystemClock_Config+0xd4>)
 8000fee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ff2:	6413      	str	r3, [r2, #64]	; 0x40
 8000ff4:	4b27      	ldr	r3, [pc, #156]	; (8001094 <SystemClock_Config+0xd4>)
 8000ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ffc:	607b      	str	r3, [r7, #4]
 8000ffe:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001000:	2300      	movs	r3, #0
 8001002:	603b      	str	r3, [r7, #0]
 8001004:	4b24      	ldr	r3, [pc, #144]	; (8001098 <SystemClock_Config+0xd8>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800100c:	4a22      	ldr	r2, [pc, #136]	; (8001098 <SystemClock_Config+0xd8>)
 800100e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001012:	6013      	str	r3, [r2, #0]
 8001014:	4b20      	ldr	r3, [pc, #128]	; (8001098 <SystemClock_Config+0xd8>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800101c:	603b      	str	r3, [r7, #0]
 800101e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001020:	2302      	movs	r3, #2
 8001022:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001024:	2301      	movs	r3, #1
 8001026:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001028:	2310      	movs	r3, #16
 800102a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800102c:	2302      	movs	r3, #2
 800102e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001030:	2300      	movs	r3, #0
 8001032:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001034:	2308      	movs	r3, #8
 8001036:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001038:	2348      	movs	r3, #72	; 0x48
 800103a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800103c:	2302      	movs	r3, #2
 800103e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001040:	2302      	movs	r3, #2
 8001042:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001044:	2302      	movs	r3, #2
 8001046:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001048:	f107 031c 	add.w	r3, r7, #28
 800104c:	4618      	mov	r0, r3
 800104e:	f002 f92f 	bl	80032b0 <HAL_RCC_OscConfig>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001058:	f000 fb96 	bl	8001788 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800105c:	230f      	movs	r3, #15
 800105e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001060:	2302      	movs	r3, #2
 8001062:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001064:	2300      	movs	r3, #0
 8001066:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001068:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800106c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800106e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001072:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001074:	f107 0308 	add.w	r3, r7, #8
 8001078:	2102      	movs	r1, #2
 800107a:	4618      	mov	r0, r3
 800107c:	f001 fd9c 	bl	8002bb8 <HAL_RCC_ClockConfig>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001086:	f000 fb7f 	bl	8001788 <Error_Handler>
  }
}
 800108a:	bf00      	nop
 800108c:	3750      	adds	r7, #80	; 0x50
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	40023800 	.word	0x40023800
 8001098:	40007000 	.word	0x40007000

0800109c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010a2:	463b      	mov	r3, r7
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]
 80010a8:	605a      	str	r2, [r3, #4]
 80010aa:	609a      	str	r2, [r3, #8]
 80010ac:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80010ae:	4b22      	ldr	r3, [pc, #136]	; (8001138 <MX_ADC1_Init+0x9c>)
 80010b0:	4a22      	ldr	r2, [pc, #136]	; (800113c <MX_ADC1_Init+0xa0>)
 80010b2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010b4:	4b20      	ldr	r3, [pc, #128]	; (8001138 <MX_ADC1_Init+0x9c>)
 80010b6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80010ba:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 80010bc:	4b1e      	ldr	r3, [pc, #120]	; (8001138 <MX_ADC1_Init+0x9c>)
 80010be:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80010c2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80010c4:	4b1c      	ldr	r3, [pc, #112]	; (8001138 <MX_ADC1_Init+0x9c>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80010ca:	4b1b      	ldr	r3, [pc, #108]	; (8001138 <MX_ADC1_Init+0x9c>)
 80010cc:	2201      	movs	r2, #1
 80010ce:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010d0:	4b19      	ldr	r3, [pc, #100]	; (8001138 <MX_ADC1_Init+0x9c>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010d8:	4b17      	ldr	r3, [pc, #92]	; (8001138 <MX_ADC1_Init+0x9c>)
 80010da:	2200      	movs	r2, #0
 80010dc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010de:	4b16      	ldr	r3, [pc, #88]	; (8001138 <MX_ADC1_Init+0x9c>)
 80010e0:	4a17      	ldr	r2, [pc, #92]	; (8001140 <MX_ADC1_Init+0xa4>)
 80010e2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010e4:	4b14      	ldr	r3, [pc, #80]	; (8001138 <MX_ADC1_Init+0x9c>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80010ea:	4b13      	ldr	r3, [pc, #76]	; (8001138 <MX_ADC1_Init+0x9c>)
 80010ec:	2201      	movs	r2, #1
 80010ee:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010f0:	4b11      	ldr	r3, [pc, #68]	; (8001138 <MX_ADC1_Init+0x9c>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010f8:	4b0f      	ldr	r3, [pc, #60]	; (8001138 <MX_ADC1_Init+0x9c>)
 80010fa:	2201      	movs	r2, #1
 80010fc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010fe:	480e      	ldr	r0, [pc, #56]	; (8001138 <MX_ADC1_Init+0x9c>)
 8001100:	f000 fe10 	bl	8001d24 <HAL_ADC_Init>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 800110a:	f000 fb3d 	bl	8001788 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800110e:	2301      	movs	r3, #1
 8001110:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001112:	2301      	movs	r3, #1
 8001114:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001116:	2300      	movs	r3, #0
 8001118:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800111a:	463b      	mov	r3, r7
 800111c:	4619      	mov	r1, r3
 800111e:	4806      	ldr	r0, [pc, #24]	; (8001138 <MX_ADC1_Init+0x9c>)
 8001120:	f000 ffe2 	bl	80020e8 <HAL_ADC_ConfigChannel>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800112a:	f000 fb2d 	bl	8001788 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800112e:	bf00      	nop
 8001130:	3710      	adds	r7, #16
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	200003c4 	.word	0x200003c4
 800113c:	40012000 	.word	0x40012000
 8001140:	0f000001 	.word	0x0f000001

08001144 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800114a:	463b      	mov	r3, r7
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	605a      	str	r2, [r3, #4]
 8001152:	609a      	str	r2, [r3, #8]
 8001154:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001156:	4b22      	ldr	r3, [pc, #136]	; (80011e0 <MX_ADC2_Init+0x9c>)
 8001158:	4a22      	ldr	r2, [pc, #136]	; (80011e4 <MX_ADC2_Init+0xa0>)
 800115a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800115c:	4b20      	ldr	r3, [pc, #128]	; (80011e0 <MX_ADC2_Init+0x9c>)
 800115e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001162:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_10B;
 8001164:	4b1e      	ldr	r3, [pc, #120]	; (80011e0 <MX_ADC2_Init+0x9c>)
 8001166:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800116a:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 800116c:	4b1c      	ldr	r3, [pc, #112]	; (80011e0 <MX_ADC2_Init+0x9c>)
 800116e:	2200      	movs	r2, #0
 8001170:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001172:	4b1b      	ldr	r3, [pc, #108]	; (80011e0 <MX_ADC2_Init+0x9c>)
 8001174:	2201      	movs	r2, #1
 8001176:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001178:	4b19      	ldr	r3, [pc, #100]	; (80011e0 <MX_ADC2_Init+0x9c>)
 800117a:	2200      	movs	r2, #0
 800117c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001180:	4b17      	ldr	r3, [pc, #92]	; (80011e0 <MX_ADC2_Init+0x9c>)
 8001182:	2200      	movs	r2, #0
 8001184:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001186:	4b16      	ldr	r3, [pc, #88]	; (80011e0 <MX_ADC2_Init+0x9c>)
 8001188:	4a17      	ldr	r2, [pc, #92]	; (80011e8 <MX_ADC2_Init+0xa4>)
 800118a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800118c:	4b14      	ldr	r3, [pc, #80]	; (80011e0 <MX_ADC2_Init+0x9c>)
 800118e:	2200      	movs	r2, #0
 8001190:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001192:	4b13      	ldr	r3, [pc, #76]	; (80011e0 <MX_ADC2_Init+0x9c>)
 8001194:	2201      	movs	r2, #1
 8001196:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001198:	4b11      	ldr	r3, [pc, #68]	; (80011e0 <MX_ADC2_Init+0x9c>)
 800119a:	2200      	movs	r2, #0
 800119c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011a0:	4b0f      	ldr	r3, [pc, #60]	; (80011e0 <MX_ADC2_Init+0x9c>)
 80011a2:	2201      	movs	r2, #1
 80011a4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80011a6:	480e      	ldr	r0, [pc, #56]	; (80011e0 <MX_ADC2_Init+0x9c>)
 80011a8:	f000 fdbc 	bl	8001d24 <HAL_ADC_Init>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <MX_ADC2_Init+0x72>
  {
    Error_Handler();
 80011b2:	f000 fae9 	bl	8001788 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80011b6:	2300      	movs	r3, #0
 80011b8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80011ba:	2301      	movs	r3, #1
 80011bc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80011be:	2300      	movs	r3, #0
 80011c0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80011c2:	463b      	mov	r3, r7
 80011c4:	4619      	mov	r1, r3
 80011c6:	4806      	ldr	r0, [pc, #24]	; (80011e0 <MX_ADC2_Init+0x9c>)
 80011c8:	f000 ff8e 	bl	80020e8 <HAL_ADC_ConfigChannel>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <MX_ADC2_Init+0x92>
  {
    Error_Handler();
 80011d2:	f000 fad9 	bl	8001788 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80011d6:	bf00      	nop
 80011d8:	3710      	adds	r7, #16
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	2000040c 	.word	0x2000040c
 80011e4:	40012100 	.word	0x40012100
 80011e8:	0f000001 	.word	0x0f000001

080011ec <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b086      	sub	sp, #24
 80011f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011f2:	f107 0308 	add.w	r3, r7, #8
 80011f6:	2200      	movs	r2, #0
 80011f8:	601a      	str	r2, [r3, #0]
 80011fa:	605a      	str	r2, [r3, #4]
 80011fc:	609a      	str	r2, [r3, #8]
 80011fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001200:	463b      	mov	r3, r7
 8001202:	2200      	movs	r2, #0
 8001204:	601a      	str	r2, [r3, #0]
 8001206:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001208:	4b1e      	ldr	r3, [pc, #120]	; (8001284 <MX_TIM1_Init+0x98>)
 800120a:	4a1f      	ldr	r2, [pc, #124]	; (8001288 <MX_TIM1_Init+0x9c>)
 800120c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 800120e:	4b1d      	ldr	r3, [pc, #116]	; (8001284 <MX_TIM1_Init+0x98>)
 8001210:	2247      	movs	r2, #71	; 0x47
 8001212:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001214:	4b1b      	ldr	r3, [pc, #108]	; (8001284 <MX_TIM1_Init+0x98>)
 8001216:	2200      	movs	r2, #0
 8001218:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800121a:	4b1a      	ldr	r3, [pc, #104]	; (8001284 <MX_TIM1_Init+0x98>)
 800121c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001220:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001222:	4b18      	ldr	r3, [pc, #96]	; (8001284 <MX_TIM1_Init+0x98>)
 8001224:	2200      	movs	r2, #0
 8001226:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001228:	4b16      	ldr	r3, [pc, #88]	; (8001284 <MX_TIM1_Init+0x98>)
 800122a:	2200      	movs	r2, #0
 800122c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800122e:	4b15      	ldr	r3, [pc, #84]	; (8001284 <MX_TIM1_Init+0x98>)
 8001230:	2200      	movs	r2, #0
 8001232:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001234:	4813      	ldr	r0, [pc, #76]	; (8001284 <MX_TIM1_Init+0x98>)
 8001236:	f002 fad9 	bl	80037ec <HAL_TIM_Base_Init>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001240:	f000 faa2 	bl	8001788 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001244:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001248:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800124a:	f107 0308 	add.w	r3, r7, #8
 800124e:	4619      	mov	r1, r3
 8001250:	480c      	ldr	r0, [pc, #48]	; (8001284 <MX_TIM1_Init+0x98>)
 8001252:	f002 fed5 	bl	8004000 <HAL_TIM_ConfigClockSource>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800125c:	f000 fa94 	bl	8001788 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001260:	2300      	movs	r3, #0
 8001262:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001264:	2300      	movs	r3, #0
 8001266:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001268:	463b      	mov	r3, r7
 800126a:	4619      	mov	r1, r3
 800126c:	4805      	ldr	r0, [pc, #20]	; (8001284 <MX_TIM1_Init+0x98>)
 800126e:	f003 fac7 	bl	8004800 <HAL_TIMEx_MasterConfigSynchronization>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001278:	f000 fa86 	bl	8001788 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800127c:	bf00      	nop
 800127e:	3718      	adds	r7, #24
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	2000037c 	.word	0x2000037c
 8001288:	40010000 	.word	0x40010000

0800128c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b08a      	sub	sp, #40	; 0x28
 8001290:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001292:	f107 0320 	add.w	r3, r7, #32
 8001296:	2200      	movs	r2, #0
 8001298:	601a      	str	r2, [r3, #0]
 800129a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800129c:	1d3b      	adds	r3, r7, #4
 800129e:	2200      	movs	r2, #0
 80012a0:	601a      	str	r2, [r3, #0]
 80012a2:	605a      	str	r2, [r3, #4]
 80012a4:	609a      	str	r2, [r3, #8]
 80012a6:	60da      	str	r2, [r3, #12]
 80012a8:	611a      	str	r2, [r3, #16]
 80012aa:	615a      	str	r2, [r3, #20]
 80012ac:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012ae:	4b22      	ldr	r3, [pc, #136]	; (8001338 <MX_TIM2_Init+0xac>)
 80012b0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012b4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80012b6:	4b20      	ldr	r3, [pc, #128]	; (8001338 <MX_TIM2_Init+0xac>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012bc:	4b1e      	ldr	r3, [pc, #120]	; (8001338 <MX_TIM2_Init+0xac>)
 80012be:	2200      	movs	r2, #0
 80012c0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80012c2:	4b1d      	ldr	r3, [pc, #116]	; (8001338 <MX_TIM2_Init+0xac>)
 80012c4:	f04f 32ff 	mov.w	r2, #4294967295
 80012c8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012ca:	4b1b      	ldr	r3, [pc, #108]	; (8001338 <MX_TIM2_Init+0xac>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012d0:	4b19      	ldr	r3, [pc, #100]	; (8001338 <MX_TIM2_Init+0xac>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80012d6:	4818      	ldr	r0, [pc, #96]	; (8001338 <MX_TIM2_Init+0xac>)
 80012d8:	f002 fbb0 	bl	8003a3c <HAL_TIM_PWM_Init>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80012e2:	f000 fa51 	bl	8001788 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012e6:	2300      	movs	r3, #0
 80012e8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ea:	2300      	movs	r3, #0
 80012ec:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012ee:	f107 0320 	add.w	r3, r7, #32
 80012f2:	4619      	mov	r1, r3
 80012f4:	4810      	ldr	r0, [pc, #64]	; (8001338 <MX_TIM2_Init+0xac>)
 80012f6:	f003 fa83 	bl	8004800 <HAL_TIMEx_MasterConfigSynchronization>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001300:	f000 fa42 	bl	8001788 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001304:	2360      	movs	r3, #96	; 0x60
 8001306:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001308:	2300      	movs	r3, #0
 800130a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800130c:	2300      	movs	r3, #0
 800130e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001310:	2300      	movs	r3, #0
 8001312:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001314:	1d3b      	adds	r3, r7, #4
 8001316:	2208      	movs	r2, #8
 8001318:	4619      	mov	r1, r3
 800131a:	4807      	ldr	r0, [pc, #28]	; (8001338 <MX_TIM2_Init+0xac>)
 800131c:	f002 fdae 	bl	8003e7c <HAL_TIM_PWM_ConfigChannel>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001326:	f000 fa2f 	bl	8001788 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800132a:	4803      	ldr	r0, [pc, #12]	; (8001338 <MX_TIM2_Init+0xac>)
 800132c:	f000 fb14 	bl	8001958 <HAL_TIM_MspPostInit>

}
 8001330:	bf00      	nop
 8001332:	3728      	adds	r7, #40	; 0x28
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	20000454 	.word	0x20000454

0800133c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001340:	4b11      	ldr	r3, [pc, #68]	; (8001388 <MX_USART1_UART_Init+0x4c>)
 8001342:	4a12      	ldr	r2, [pc, #72]	; (800138c <MX_USART1_UART_Init+0x50>)
 8001344:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001346:	4b10      	ldr	r3, [pc, #64]	; (8001388 <MX_USART1_UART_Init+0x4c>)
 8001348:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800134c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800134e:	4b0e      	ldr	r3, [pc, #56]	; (8001388 <MX_USART1_UART_Init+0x4c>)
 8001350:	2200      	movs	r2, #0
 8001352:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001354:	4b0c      	ldr	r3, [pc, #48]	; (8001388 <MX_USART1_UART_Init+0x4c>)
 8001356:	2200      	movs	r2, #0
 8001358:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800135a:	4b0b      	ldr	r3, [pc, #44]	; (8001388 <MX_USART1_UART_Init+0x4c>)
 800135c:	2200      	movs	r2, #0
 800135e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001360:	4b09      	ldr	r3, [pc, #36]	; (8001388 <MX_USART1_UART_Init+0x4c>)
 8001362:	220c      	movs	r2, #12
 8001364:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001366:	4b08      	ldr	r3, [pc, #32]	; (8001388 <MX_USART1_UART_Init+0x4c>)
 8001368:	2200      	movs	r2, #0
 800136a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800136c:	4b06      	ldr	r3, [pc, #24]	; (8001388 <MX_USART1_UART_Init+0x4c>)
 800136e:	2200      	movs	r2, #0
 8001370:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001372:	4805      	ldr	r0, [pc, #20]	; (8001388 <MX_USART1_UART_Init+0x4c>)
 8001374:	f003 fad4 	bl	8004920 <HAL_UART_Init>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800137e:	f000 fa03 	bl	8001788 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001382:	bf00      	nop
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	2000049c 	.word	0x2000049c
 800138c:	40011000 	.word	0x40011000

08001390 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b088      	sub	sp, #32
 8001394:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001396:	f107 030c 	add.w	r3, r7, #12
 800139a:	2200      	movs	r2, #0
 800139c:	601a      	str	r2, [r3, #0]
 800139e:	605a      	str	r2, [r3, #4]
 80013a0:	609a      	str	r2, [r3, #8]
 80013a2:	60da      	str	r2, [r3, #12]
 80013a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013a6:	2300      	movs	r3, #0
 80013a8:	60bb      	str	r3, [r7, #8]
 80013aa:	4b2a      	ldr	r3, [pc, #168]	; (8001454 <MX_GPIO_Init+0xc4>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ae:	4a29      	ldr	r2, [pc, #164]	; (8001454 <MX_GPIO_Init+0xc4>)
 80013b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013b4:	6313      	str	r3, [r2, #48]	; 0x30
 80013b6:	4b27      	ldr	r3, [pc, #156]	; (8001454 <MX_GPIO_Init+0xc4>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013be:	60bb      	str	r3, [r7, #8]
 80013c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c2:	2300      	movs	r3, #0
 80013c4:	607b      	str	r3, [r7, #4]
 80013c6:	4b23      	ldr	r3, [pc, #140]	; (8001454 <MX_GPIO_Init+0xc4>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	4a22      	ldr	r2, [pc, #136]	; (8001454 <MX_GPIO_Init+0xc4>)
 80013cc:	f043 0301 	orr.w	r3, r3, #1
 80013d0:	6313      	str	r3, [r2, #48]	; 0x30
 80013d2:	4b20      	ldr	r3, [pc, #128]	; (8001454 <MX_GPIO_Init+0xc4>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d6:	f003 0301 	and.w	r3, r3, #1
 80013da:	607b      	str	r3, [r7, #4]
 80013dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013de:	2300      	movs	r3, #0
 80013e0:	603b      	str	r3, [r7, #0]
 80013e2:	4b1c      	ldr	r3, [pc, #112]	; (8001454 <MX_GPIO_Init+0xc4>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e6:	4a1b      	ldr	r2, [pc, #108]	; (8001454 <MX_GPIO_Init+0xc4>)
 80013e8:	f043 0302 	orr.w	r3, r3, #2
 80013ec:	6313      	str	r3, [r2, #48]	; 0x30
 80013ee:	4b19      	ldr	r3, [pc, #100]	; (8001454 <MX_GPIO_Init+0xc4>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f2:	f003 0302 	and.w	r3, r3, #2
 80013f6:	603b      	str	r3, [r7, #0]
 80013f8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|LD2_Pin, GPIO_PIN_RESET);
 80013fa:	2200      	movs	r2, #0
 80013fc:	2130      	movs	r1, #48	; 0x30
 80013fe:	4816      	ldr	r0, [pc, #88]	; (8001458 <MX_GPIO_Init+0xc8>)
 8001400:	f001 fbc0 	bl	8002b84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8001404:	2200      	movs	r2, #0
 8001406:	f44f 7100 	mov.w	r1, #512	; 0x200
 800140a:	4814      	ldr	r0, [pc, #80]	; (800145c <MX_GPIO_Init+0xcc>)
 800140c:	f001 fbba 	bl	8002b84 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA4 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD2_Pin;
 8001410:	2330      	movs	r3, #48	; 0x30
 8001412:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001414:	2301      	movs	r3, #1
 8001416:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001418:	2300      	movs	r3, #0
 800141a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141c:	2300      	movs	r3, #0
 800141e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001420:	f107 030c 	add.w	r3, r7, #12
 8001424:	4619      	mov	r1, r3
 8001426:	480c      	ldr	r0, [pc, #48]	; (8001458 <MX_GPIO_Init+0xc8>)
 8001428:	f001 fa00 	bl	800282c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800142c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001430:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001432:	2301      	movs	r3, #1
 8001434:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001436:	2300      	movs	r3, #0
 8001438:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800143a:	2300      	movs	r3, #0
 800143c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800143e:	f107 030c 	add.w	r3, r7, #12
 8001442:	4619      	mov	r1, r3
 8001444:	4805      	ldr	r0, [pc, #20]	; (800145c <MX_GPIO_Init+0xcc>)
 8001446:	f001 f9f1 	bl	800282c <HAL_GPIO_Init>

}
 800144a:	bf00      	nop
 800144c:	3720      	adds	r7, #32
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	40023800 	.word	0x40023800
 8001458:	40020000 	.word	0x40020000
 800145c:	40020400 	.word	0x40020400

08001460 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001468:	2001      	movs	r0, #1
 800146a:	f004 f9d8 	bl	800581e <osDelay>
 800146e:	e7fb      	b.n	8001468 <StartDefaultTask+0x8>

08001470 <Task2_int>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task2_int */
void Task2_int(void const * argument)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task2_int */
  /* Infinite loop */
  for(;;)
  {
	  if (DHT22_Start())
 8001478:	f7ff fbda 	bl	8000c30 <DHT22_Start>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d07c      	beq.n	800157c <Task2_int+0x10c>
	 	      {
	 	        RH1 = DHT22_Read(); // First 8bits of humidity
 8001482:	f7ff fc4d 	bl	8000d20 <DHT22_Read>
 8001486:	4603      	mov	r3, r0
 8001488:	461a      	mov	r2, r3
 800148a:	4b58      	ldr	r3, [pc, #352]	; (80015ec <Task2_int+0x17c>)
 800148c:	701a      	strb	r2, [r3, #0]
	 	        RH2 = DHT22_Read(); // Second 8bits of Relative humidity
 800148e:	f7ff fc47 	bl	8000d20 <DHT22_Read>
 8001492:	4603      	mov	r3, r0
 8001494:	461a      	mov	r2, r3
 8001496:	4b56      	ldr	r3, [pc, #344]	; (80015f0 <Task2_int+0x180>)
 8001498:	701a      	strb	r2, [r3, #0]
	 	        TC1 = DHT22_Read(); // First 8bits of Celsius
 800149a:	f7ff fc41 	bl	8000d20 <DHT22_Read>
 800149e:	4603      	mov	r3, r0
 80014a0:	461a      	mov	r2, r3
 80014a2:	4b54      	ldr	r3, [pc, #336]	; (80015f4 <Task2_int+0x184>)
 80014a4:	701a      	strb	r2, [r3, #0]
	 	        TC2 = DHT22_Read(); // Second 8bits of Celsius
 80014a6:	f7ff fc3b 	bl	8000d20 <DHT22_Read>
 80014aa:	4603      	mov	r3, r0
 80014ac:	461a      	mov	r2, r3
 80014ae:	4b52      	ldr	r3, [pc, #328]	; (80015f8 <Task2_int+0x188>)
 80014b0:	701a      	strb	r2, [r3, #0]
	 	        SUM = DHT22_Read(); // Check sum
 80014b2:	f7ff fc35 	bl	8000d20 <DHT22_Read>
 80014b6:	4603      	mov	r3, r0
 80014b8:	461a      	mov	r2, r3
 80014ba:	4b50      	ldr	r3, [pc, #320]	; (80015fc <Task2_int+0x18c>)
 80014bc:	701a      	strb	r2, [r3, #0]
	 	        CHECK = RH1 + RH2 + TC1 + TC2;
 80014be:	4b4b      	ldr	r3, [pc, #300]	; (80015ec <Task2_int+0x17c>)
 80014c0:	781a      	ldrb	r2, [r3, #0]
 80014c2:	4b4b      	ldr	r3, [pc, #300]	; (80015f0 <Task2_int+0x180>)
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	4413      	add	r3, r2
 80014c8:	b2da      	uxtb	r2, r3
 80014ca:	4b4a      	ldr	r3, [pc, #296]	; (80015f4 <Task2_int+0x184>)
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	4413      	add	r3, r2
 80014d0:	b2da      	uxtb	r2, r3
 80014d2:	4b49      	ldr	r3, [pc, #292]	; (80015f8 <Task2_int+0x188>)
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	4413      	add	r3, r2
 80014d8:	b2da      	uxtb	r2, r3
 80014da:	4b49      	ldr	r3, [pc, #292]	; (8001600 <Task2_int+0x190>)
 80014dc:	701a      	strb	r2, [r3, #0]
	 	        if (CHECK == SUM)
 80014de:	4b48      	ldr	r3, [pc, #288]	; (8001600 <Task2_int+0x190>)
 80014e0:	781a      	ldrb	r2, [r3, #0]
 80014e2:	4b46      	ldr	r3, [pc, #280]	; (80015fc <Task2_int+0x18c>)
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	429a      	cmp	r2, r3
 80014e8:	d148      	bne.n	800157c <Task2_int+0x10c>
	 	        {
	 	          if (TC1>127) // If TC1=10000000, negative temperature
 80014ea:	4b42      	ldr	r3, [pc, #264]	; (80015f4 <Task2_int+0x184>)
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	b25b      	sxtb	r3, r3
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	da0f      	bge.n	8001514 <Task2_int+0xa4>
	 	          {
	 	            tCelsius = (float)TC2/10*(-1);
 80014f4:	4b40      	ldr	r3, [pc, #256]	; (80015f8 <Task2_int+0x188>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	ee07 3a90 	vmov	s15, r3
 80014fc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001500:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001504:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001508:	eef1 7a67 	vneg.f32	s15, s15
 800150c:	4b3d      	ldr	r3, [pc, #244]	; (8001604 <Task2_int+0x194>)
 800150e:	edc3 7a00 	vstr	s15, [r3]
 8001512:	e010      	b.n	8001536 <Task2_int+0xc6>
	 	          }
	 	          else
	 	          {
	 	            tCelsius = (float)((TC1<<8)|TC2)/10;
 8001514:	4b37      	ldr	r3, [pc, #220]	; (80015f4 <Task2_int+0x184>)
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	021b      	lsls	r3, r3, #8
 800151a:	4a37      	ldr	r2, [pc, #220]	; (80015f8 <Task2_int+0x188>)
 800151c:	7812      	ldrb	r2, [r2, #0]
 800151e:	4313      	orrs	r3, r2
 8001520:	ee07 3a90 	vmov	s15, r3
 8001524:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001528:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800152c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001530:	4b34      	ldr	r3, [pc, #208]	; (8001604 <Task2_int+0x194>)
 8001532:	edc3 7a00 	vstr	s15, [r3]
	 	          }
	 	          tFahrenheit = tCelsius * 9/5 + 32;
 8001536:	4b33      	ldr	r3, [pc, #204]	; (8001604 <Task2_int+0x194>)
 8001538:	edd3 7a00 	vldr	s15, [r3]
 800153c:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8001540:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001544:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8001548:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800154c:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8001608 <Task2_int+0x198>
 8001550:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001554:	4b2d      	ldr	r3, [pc, #180]	; (800160c <Task2_int+0x19c>)
 8001556:	edc3 7a00 	vstr	s15, [r3]
	 	          RH = (float) ((RH1<<8)|RH2)/10;
 800155a:	4b24      	ldr	r3, [pc, #144]	; (80015ec <Task2_int+0x17c>)
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	021b      	lsls	r3, r3, #8
 8001560:	4a23      	ldr	r2, [pc, #140]	; (80015f0 <Task2_int+0x180>)
 8001562:	7812      	ldrb	r2, [r2, #0]
 8001564:	4313      	orrs	r3, r2
 8001566:	ee07 3a90 	vmov	s15, r3
 800156a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800156e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001572:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001576:	4b26      	ldr	r3, [pc, #152]	; (8001610 <Task2_int+0x1a0>)
 8001578:	edc3 7a00 	vstr	s15, [r3]
	 	        }
	 	      }
	 	      HAL_Delay(1000);
 800157c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001580:	f000 fbac 	bl	8001cdc <HAL_Delay>

	  waterLevel = waterLevelSensor();
 8001584:	f7ff fc64 	bl	8000e50 <waterLevelSensor>
 8001588:	4603      	mov	r3, r0
 800158a:	461a      	mov	r2, r3
 800158c:	4b21      	ldr	r3, [pc, #132]	; (8001614 <Task2_int+0x1a4>)
 800158e:	801a      	strh	r2, [r3, #0]
	  ADC_Value = ADC_Get_Value();
 8001590:	f7ff fc42 	bl	8000e18 <ADC_Get_Value>
 8001594:	4603      	mov	r3, r0
 8001596:	461a      	mov	r2, r3
 8001598:	4b1f      	ldr	r3, [pc, #124]	; (8001618 <Task2_int+0x1a8>)
 800159a:	801a      	strh	r2, [r3, #0]

	  value_buf[0] = ADC_Value;
 800159c:	4b1e      	ldr	r3, [pc, #120]	; (8001618 <Task2_int+0x1a8>)
 800159e:	881a      	ldrh	r2, [r3, #0]
 80015a0:	4b1e      	ldr	r3, [pc, #120]	; (800161c <Task2_int+0x1ac>)
 80015a2:	801a      	strh	r2, [r3, #0]
	  value_buf[1] = tCelsius;
 80015a4:	4b17      	ldr	r3, [pc, #92]	; (8001604 <Task2_int+0x194>)
 80015a6:	edd3 7a00 	vldr	s15, [r3]
 80015aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015ae:	ee17 3a90 	vmov	r3, s15
 80015b2:	b29a      	uxth	r2, r3
 80015b4:	4b19      	ldr	r3, [pc, #100]	; (800161c <Task2_int+0x1ac>)
 80015b6:	805a      	strh	r2, [r3, #2]
	  value_buf[2] = waterLevel;
 80015b8:	4b16      	ldr	r3, [pc, #88]	; (8001614 <Task2_int+0x1a4>)
 80015ba:	881a      	ldrh	r2, [r3, #0]
 80015bc:	4b17      	ldr	r3, [pc, #92]	; (800161c <Task2_int+0x1ac>)
 80015be:	809a      	strh	r2, [r3, #4]
	  value_buf[3] = RH;
 80015c0:	4b13      	ldr	r3, [pc, #76]	; (8001610 <Task2_int+0x1a0>)
 80015c2:	edd3 7a00 	vldr	s15, [r3]
 80015c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015ca:	ee17 3a90 	vmov	r3, s15
 80015ce:	b29a      	uxth	r2, r3
 80015d0:	4b12      	ldr	r3, [pc, #72]	; (800161c <Task2_int+0x1ac>)
 80015d2:	80da      	strh	r2, [r3, #6]

	  ESP_Send_Multi("WRITE_API_KEY", 4, value_buf);
 80015d4:	4a11      	ldr	r2, [pc, #68]	; (800161c <Task2_int+0x1ac>)
 80015d6:	2104      	movs	r1, #4
 80015d8:	4811      	ldr	r0, [pc, #68]	; (8001620 <Task2_int+0x1b0>)
 80015da:	f7ff f86d 	bl	80006b8 <ESP_Send_Multi>

	  HAL_Delay(15);
 80015de:	200f      	movs	r0, #15
 80015e0:	f000 fb7c 	bl	8001cdc <HAL_Delay>
    osDelay(1);
 80015e4:	2001      	movs	r0, #1
 80015e6:	f004 f91a 	bl	800581e <osDelay>
	  if (DHT22_Start())
 80015ea:	e745      	b.n	8001478 <Task2_int+0x8>
 80015ec:	200004f0 	.word	0x200004f0
 80015f0:	200004f1 	.word	0x200004f1
 80015f4:	200004f2 	.word	0x200004f2
 80015f8:	200004f3 	.word	0x200004f3
 80015fc:	200004f4 	.word	0x200004f4
 8001600:	200004f5 	.word	0x200004f5
 8001604:	20000500 	.word	0x20000500
 8001608:	42000000 	.word	0x42000000
 800160c:	20000504 	.word	0x20000504
 8001610:	20000508 	.word	0x20000508
 8001614:	20000514 	.word	0x20000514
 8001618:	20000512 	.word	0x20000512
 800161c:	20000518 	.word	0x20000518
 8001620:	08007700 	.word	0x08007700

08001624 <Task3_int>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task3_int */
void Task3_int(void const * argument)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task3_int */
  /* Infinite loop */
  for(;;)
  {

	AD_RES = HAL_ADC_GetValue(&hadc1);
 800162c:	480b      	ldr	r0, [pc, #44]	; (800165c <Task3_int+0x38>)
 800162e:	f000 fd4d 	bl	80020cc <HAL_ADC_GetValue>
 8001632:	4603      	mov	r3, r0
 8001634:	b29a      	uxth	r2, r3
 8001636:	4b0a      	ldr	r3, [pc, #40]	; (8001660 <Task3_int+0x3c>)
 8001638:	801a      	strh	r2, [r3, #0]
	TIM2->CCR1 = (AD_RES-Vamb)*DC_Multiplier;
 800163a:	4b09      	ldr	r3, [pc, #36]	; (8001660 <Task3_int+0x3c>)
 800163c:	881b      	ldrh	r3, [r3, #0]
 800163e:	461a      	mov	r2, r3
 8001640:	4b08      	ldr	r3, [pc, #32]	; (8001664 <Task3_int+0x40>)
 8001642:	881b      	ldrh	r3, [r3, #0]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	4a08      	ldr	r2, [pc, #32]	; (8001668 <Task3_int+0x44>)
 8001648:	8812      	ldrh	r2, [r2, #0]
 800164a:	fb03 f202 	mul.w	r2, r3, r2
 800164e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001652:	635a      	str	r2, [r3, #52]	; 0x34

    osDelay(1);
 8001654:	2001      	movs	r0, #1
 8001656:	f004 f8e2 	bl	800581e <osDelay>
	AD_RES = HAL_ADC_GetValue(&hadc1);
 800165a:	e7e7      	b.n	800162c <Task3_int+0x8>
 800165c:	200003c4 	.word	0x200003c4
 8001660:	2000050c 	.word	0x2000050c
 8001664:	2000050e 	.word	0x2000050e
 8001668:	20000510 	.word	0x20000510

0800166c <Task4_int>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task4_int */
void Task4_int(void const * argument)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task4_int */
  /* Infinite loop */
  for(;;)
  {
	  if (tCelsius > 32){
 8001674:	4b36      	ldr	r3, [pc, #216]	; (8001750 <Task4_int+0xe4>)
 8001676:	edd3 7a00 	vldr	s15, [r3]
 800167a:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8001754 <Task4_int+0xe8>
 800167e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001686:	dd2f      	ble.n	80016e8 <Task4_int+0x7c>
		  if (RH < 80){
 8001688:	4b33      	ldr	r3, [pc, #204]	; (8001758 <Task4_int+0xec>)
 800168a:	edd3 7a00 	vldr	s15, [r3]
 800168e:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800175c <Task4_int+0xf0>
 8001692:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800169a:	d512      	bpl.n	80016c2 <Task4_int+0x56>
			  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET);
 800169c:	2201      	movs	r2, #1
 800169e:	2120      	movs	r1, #32
 80016a0:	482f      	ldr	r0, [pc, #188]	; (8001760 <Task4_int+0xf4>)
 80016a2:	f001 fa6f 	bl	8002b84 <HAL_GPIO_WritePin>
			  HAL_Delay(10000); //motor run for 10s (for demo only)
 80016a6:	f242 7010 	movw	r0, #10000	; 0x2710
 80016aa:	f000 fb17 	bl	8001cdc <HAL_Delay>
			  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET);
 80016ae:	2200      	movs	r2, #0
 80016b0:	2120      	movs	r1, #32
 80016b2:	482b      	ldr	r0, [pc, #172]	; (8001760 <Task4_int+0xf4>)
 80016b4:	f001 fa66 	bl	8002b84 <HAL_GPIO_WritePin>
			  HAL_Delay(10000); //motor stop for 10s
 80016b8:	f242 7010 	movw	r0, #10000	; 0x2710
 80016bc:	f000 fb0e 	bl	8001cdc <HAL_Delay>
 80016c0:	e041      	b.n	8001746 <Task4_int+0xda>
		  }
		  else {
			  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET);
 80016c2:	2201      	movs	r2, #1
 80016c4:	2120      	movs	r1, #32
 80016c6:	4826      	ldr	r0, [pc, #152]	; (8001760 <Task4_int+0xf4>)
 80016c8:	f001 fa5c 	bl	8002b84 <HAL_GPIO_WritePin>
			  HAL_Delay(8000); //motor run for 8s (for demo only)
 80016cc:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80016d0:	f000 fb04 	bl	8001cdc <HAL_Delay>
			  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET);
 80016d4:	2200      	movs	r2, #0
 80016d6:	2120      	movs	r1, #32
 80016d8:	4821      	ldr	r0, [pc, #132]	; (8001760 <Task4_int+0xf4>)
 80016da:	f001 fa53 	bl	8002b84 <HAL_GPIO_WritePin>
			  HAL_Delay(10000); //motor stop for 10s
 80016de:	f242 7010 	movw	r0, #10000	; 0x2710
 80016e2:	f000 fafb 	bl	8001cdc <HAL_Delay>
 80016e6:	e02e      	b.n	8001746 <Task4_int+0xda>
		  }
	  }
	  else {
		  if (RH < 80){
 80016e8:	4b1b      	ldr	r3, [pc, #108]	; (8001758 <Task4_int+0xec>)
 80016ea:	edd3 7a00 	vldr	s15, [r3]
 80016ee:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 800175c <Task4_int+0xf0>
 80016f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016fa:	d512      	bpl.n	8001722 <Task4_int+0xb6>
			  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET);
 80016fc:	2201      	movs	r2, #1
 80016fe:	2120      	movs	r1, #32
 8001700:	4817      	ldr	r0, [pc, #92]	; (8001760 <Task4_int+0xf4>)
 8001702:	f001 fa3f 	bl	8002b84 <HAL_GPIO_WritePin>
			  HAL_Delay(6000); //motor run for 6s (for demo only)
 8001706:	f241 7070 	movw	r0, #6000	; 0x1770
 800170a:	f000 fae7 	bl	8001cdc <HAL_Delay>
			  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET);
 800170e:	2200      	movs	r2, #0
 8001710:	2120      	movs	r1, #32
 8001712:	4813      	ldr	r0, [pc, #76]	; (8001760 <Task4_int+0xf4>)
 8001714:	f001 fa36 	bl	8002b84 <HAL_GPIO_WritePin>
			  HAL_Delay(10000); //motor stop for 10s
 8001718:	f242 7010 	movw	r0, #10000	; 0x2710
 800171c:	f000 fade 	bl	8001cdc <HAL_Delay>
 8001720:	e011      	b.n	8001746 <Task4_int+0xda>
		  }
		  else {
			  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET);
 8001722:	2201      	movs	r2, #1
 8001724:	2120      	movs	r1, #32
 8001726:	480e      	ldr	r0, [pc, #56]	; (8001760 <Task4_int+0xf4>)
 8001728:	f001 fa2c 	bl	8002b84 <HAL_GPIO_WritePin>
			  HAL_Delay(4000); //motor run for 4s (for demo only)
 800172c:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8001730:	f000 fad4 	bl	8001cdc <HAL_Delay>
			  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET);
 8001734:	2200      	movs	r2, #0
 8001736:	2120      	movs	r1, #32
 8001738:	4809      	ldr	r0, [pc, #36]	; (8001760 <Task4_int+0xf4>)
 800173a:	f001 fa23 	bl	8002b84 <HAL_GPIO_WritePin>
			  HAL_Delay(10000); //motor stop for 10s
 800173e:	f242 7010 	movw	r0, #10000	; 0x2710
 8001742:	f000 facb 	bl	8001cdc <HAL_Delay>
	/*HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET);
	HAL_Delay(6000); //motor run for 10 min
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET);
	HAL_Delay(3000); //motor stop for 50 min
	*/
    osDelay(1);
 8001746:	2001      	movs	r0, #1
 8001748:	f004 f869 	bl	800581e <osDelay>
	  if (tCelsius > 32){
 800174c:	e792      	b.n	8001674 <Task4_int+0x8>
 800174e:	bf00      	nop
 8001750:	20000500 	.word	0x20000500
 8001754:	42000000 	.word	0x42000000
 8001758:	20000508 	.word	0x20000508
 800175c:	42a00000 	.word	0x42a00000
 8001760:	40020000 	.word	0x40020000

08001764 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a04      	ldr	r2, [pc, #16]	; (8001784 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d101      	bne.n	800177a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001776:	f000 fa91 	bl	8001c9c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800177a:	bf00      	nop
 800177c:	3708      	adds	r7, #8
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	40000400 	.word	0x40000400

08001788 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800178c:	b672      	cpsid	i
}
 800178e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001790:	e7fe      	b.n	8001790 <Error_Handler+0x8>
	...

08001794 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800179a:	2300      	movs	r3, #0
 800179c:	607b      	str	r3, [r7, #4]
 800179e:	4b12      	ldr	r3, [pc, #72]	; (80017e8 <HAL_MspInit+0x54>)
 80017a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a2:	4a11      	ldr	r2, [pc, #68]	; (80017e8 <HAL_MspInit+0x54>)
 80017a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017a8:	6453      	str	r3, [r2, #68]	; 0x44
 80017aa:	4b0f      	ldr	r3, [pc, #60]	; (80017e8 <HAL_MspInit+0x54>)
 80017ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017b2:	607b      	str	r3, [r7, #4]
 80017b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017b6:	2300      	movs	r3, #0
 80017b8:	603b      	str	r3, [r7, #0]
 80017ba:	4b0b      	ldr	r3, [pc, #44]	; (80017e8 <HAL_MspInit+0x54>)
 80017bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017be:	4a0a      	ldr	r2, [pc, #40]	; (80017e8 <HAL_MspInit+0x54>)
 80017c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017c4:	6413      	str	r3, [r2, #64]	; 0x40
 80017c6:	4b08      	ldr	r3, [pc, #32]	; (80017e8 <HAL_MspInit+0x54>)
 80017c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ce:	603b      	str	r3, [r7, #0]
 80017d0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80017d2:	2200      	movs	r2, #0
 80017d4:	210f      	movs	r1, #15
 80017d6:	f06f 0001 	mvn.w	r0, #1
 80017da:	f000 ff6b 	bl	80026b4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017de:	bf00      	nop
 80017e0:	3708      	adds	r7, #8
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	40023800 	.word	0x40023800

080017ec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b08c      	sub	sp, #48	; 0x30
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f4:	f107 031c 	add.w	r3, r7, #28
 80017f8:	2200      	movs	r2, #0
 80017fa:	601a      	str	r2, [r3, #0]
 80017fc:	605a      	str	r2, [r3, #4]
 80017fe:	609a      	str	r2, [r3, #8]
 8001800:	60da      	str	r2, [r3, #12]
 8001802:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a2e      	ldr	r2, [pc, #184]	; (80018c4 <HAL_ADC_MspInit+0xd8>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d128      	bne.n	8001860 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800180e:	2300      	movs	r3, #0
 8001810:	61bb      	str	r3, [r7, #24]
 8001812:	4b2d      	ldr	r3, [pc, #180]	; (80018c8 <HAL_ADC_MspInit+0xdc>)
 8001814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001816:	4a2c      	ldr	r2, [pc, #176]	; (80018c8 <HAL_ADC_MspInit+0xdc>)
 8001818:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800181c:	6453      	str	r3, [r2, #68]	; 0x44
 800181e:	4b2a      	ldr	r3, [pc, #168]	; (80018c8 <HAL_ADC_MspInit+0xdc>)
 8001820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001822:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001826:	61bb      	str	r3, [r7, #24]
 8001828:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800182a:	2300      	movs	r3, #0
 800182c:	617b      	str	r3, [r7, #20]
 800182e:	4b26      	ldr	r3, [pc, #152]	; (80018c8 <HAL_ADC_MspInit+0xdc>)
 8001830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001832:	4a25      	ldr	r2, [pc, #148]	; (80018c8 <HAL_ADC_MspInit+0xdc>)
 8001834:	f043 0301 	orr.w	r3, r3, #1
 8001838:	6313      	str	r3, [r2, #48]	; 0x30
 800183a:	4b23      	ldr	r3, [pc, #140]	; (80018c8 <HAL_ADC_MspInit+0xdc>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183e:	f003 0301 	and.w	r3, r3, #1
 8001842:	617b      	str	r3, [r7, #20]
 8001844:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001846:	2302      	movs	r3, #2
 8001848:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800184a:	2303      	movs	r3, #3
 800184c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184e:	2300      	movs	r3, #0
 8001850:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001852:	f107 031c 	add.w	r3, r7, #28
 8001856:	4619      	mov	r1, r3
 8001858:	481c      	ldr	r0, [pc, #112]	; (80018cc <HAL_ADC_MspInit+0xe0>)
 800185a:	f000 ffe7 	bl	800282c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800185e:	e02c      	b.n	80018ba <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a1a      	ldr	r2, [pc, #104]	; (80018d0 <HAL_ADC_MspInit+0xe4>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d127      	bne.n	80018ba <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800186a:	2300      	movs	r3, #0
 800186c:	613b      	str	r3, [r7, #16]
 800186e:	4b16      	ldr	r3, [pc, #88]	; (80018c8 <HAL_ADC_MspInit+0xdc>)
 8001870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001872:	4a15      	ldr	r2, [pc, #84]	; (80018c8 <HAL_ADC_MspInit+0xdc>)
 8001874:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001878:	6453      	str	r3, [r2, #68]	; 0x44
 800187a:	4b13      	ldr	r3, [pc, #76]	; (80018c8 <HAL_ADC_MspInit+0xdc>)
 800187c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800187e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001882:	613b      	str	r3, [r7, #16]
 8001884:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001886:	2300      	movs	r3, #0
 8001888:	60fb      	str	r3, [r7, #12]
 800188a:	4b0f      	ldr	r3, [pc, #60]	; (80018c8 <HAL_ADC_MspInit+0xdc>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188e:	4a0e      	ldr	r2, [pc, #56]	; (80018c8 <HAL_ADC_MspInit+0xdc>)
 8001890:	f043 0301 	orr.w	r3, r3, #1
 8001894:	6313      	str	r3, [r2, #48]	; 0x30
 8001896:	4b0c      	ldr	r3, [pc, #48]	; (80018c8 <HAL_ADC_MspInit+0xdc>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189a:	f003 0301 	and.w	r3, r3, #1
 800189e:	60fb      	str	r3, [r7, #12]
 80018a0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80018a2:	2301      	movs	r3, #1
 80018a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018a6:	2303      	movs	r3, #3
 80018a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018aa:	2300      	movs	r3, #0
 80018ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ae:	f107 031c 	add.w	r3, r7, #28
 80018b2:	4619      	mov	r1, r3
 80018b4:	4805      	ldr	r0, [pc, #20]	; (80018cc <HAL_ADC_MspInit+0xe0>)
 80018b6:	f000 ffb9 	bl	800282c <HAL_GPIO_Init>
}
 80018ba:	bf00      	nop
 80018bc:	3730      	adds	r7, #48	; 0x30
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	40012000 	.word	0x40012000
 80018c8:	40023800 	.word	0x40023800
 80018cc:	40020000 	.word	0x40020000
 80018d0:	40012100 	.word	0x40012100

080018d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b085      	sub	sp, #20
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a0b      	ldr	r2, [pc, #44]	; (8001910 <HAL_TIM_Base_MspInit+0x3c>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d10d      	bne.n	8001902 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80018e6:	2300      	movs	r3, #0
 80018e8:	60fb      	str	r3, [r7, #12]
 80018ea:	4b0a      	ldr	r3, [pc, #40]	; (8001914 <HAL_TIM_Base_MspInit+0x40>)
 80018ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ee:	4a09      	ldr	r2, [pc, #36]	; (8001914 <HAL_TIM_Base_MspInit+0x40>)
 80018f0:	f043 0301 	orr.w	r3, r3, #1
 80018f4:	6453      	str	r3, [r2, #68]	; 0x44
 80018f6:	4b07      	ldr	r3, [pc, #28]	; (8001914 <HAL_TIM_Base_MspInit+0x40>)
 80018f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018fa:	f003 0301 	and.w	r3, r3, #1
 80018fe:	60fb      	str	r3, [r7, #12]
 8001900:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001902:	bf00      	nop
 8001904:	3714      	adds	r7, #20
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	40010000 	.word	0x40010000
 8001914:	40023800 	.word	0x40023800

08001918 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001918:	b480      	push	{r7}
 800191a:	b085      	sub	sp, #20
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001928:	d10d      	bne.n	8001946 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800192a:	2300      	movs	r3, #0
 800192c:	60fb      	str	r3, [r7, #12]
 800192e:	4b09      	ldr	r3, [pc, #36]	; (8001954 <HAL_TIM_PWM_MspInit+0x3c>)
 8001930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001932:	4a08      	ldr	r2, [pc, #32]	; (8001954 <HAL_TIM_PWM_MspInit+0x3c>)
 8001934:	f043 0301 	orr.w	r3, r3, #1
 8001938:	6413      	str	r3, [r2, #64]	; 0x40
 800193a:	4b06      	ldr	r3, [pc, #24]	; (8001954 <HAL_TIM_PWM_MspInit+0x3c>)
 800193c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193e:	f003 0301 	and.w	r3, r3, #1
 8001942:	60fb      	str	r3, [r7, #12]
 8001944:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001946:	bf00      	nop
 8001948:	3714      	adds	r7, #20
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	40023800 	.word	0x40023800

08001958 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b088      	sub	sp, #32
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001960:	f107 030c 	add.w	r3, r7, #12
 8001964:	2200      	movs	r2, #0
 8001966:	601a      	str	r2, [r3, #0]
 8001968:	605a      	str	r2, [r3, #4]
 800196a:	609a      	str	r2, [r3, #8]
 800196c:	60da      	str	r2, [r3, #12]
 800196e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001978:	d11d      	bne.n	80019b6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800197a:	2300      	movs	r3, #0
 800197c:	60bb      	str	r3, [r7, #8]
 800197e:	4b10      	ldr	r3, [pc, #64]	; (80019c0 <HAL_TIM_MspPostInit+0x68>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001982:	4a0f      	ldr	r2, [pc, #60]	; (80019c0 <HAL_TIM_MspPostInit+0x68>)
 8001984:	f043 0301 	orr.w	r3, r3, #1
 8001988:	6313      	str	r3, [r2, #48]	; 0x30
 800198a:	4b0d      	ldr	r3, [pc, #52]	; (80019c0 <HAL_TIM_MspPostInit+0x68>)
 800198c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198e:	f003 0301 	and.w	r3, r3, #1
 8001992:	60bb      	str	r3, [r7, #8]
 8001994:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001996:	2304      	movs	r3, #4
 8001998:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800199a:	2302      	movs	r3, #2
 800199c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199e:	2300      	movs	r3, #0
 80019a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a2:	2300      	movs	r3, #0
 80019a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80019a6:	2301      	movs	r3, #1
 80019a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019aa:	f107 030c 	add.w	r3, r7, #12
 80019ae:	4619      	mov	r1, r3
 80019b0:	4804      	ldr	r0, [pc, #16]	; (80019c4 <HAL_TIM_MspPostInit+0x6c>)
 80019b2:	f000 ff3b 	bl	800282c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80019b6:	bf00      	nop
 80019b8:	3720      	adds	r7, #32
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	40023800 	.word	0x40023800
 80019c4:	40020000 	.word	0x40020000

080019c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b08a      	sub	sp, #40	; 0x28
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d0:	f107 0314 	add.w	r3, r7, #20
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]
 80019d8:	605a      	str	r2, [r3, #4]
 80019da:	609a      	str	r2, [r3, #8]
 80019dc:	60da      	str	r2, [r3, #12]
 80019de:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a1d      	ldr	r2, [pc, #116]	; (8001a5c <HAL_UART_MspInit+0x94>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d134      	bne.n	8001a54 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80019ea:	2300      	movs	r3, #0
 80019ec:	613b      	str	r3, [r7, #16]
 80019ee:	4b1c      	ldr	r3, [pc, #112]	; (8001a60 <HAL_UART_MspInit+0x98>)
 80019f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f2:	4a1b      	ldr	r2, [pc, #108]	; (8001a60 <HAL_UART_MspInit+0x98>)
 80019f4:	f043 0310 	orr.w	r3, r3, #16
 80019f8:	6453      	str	r3, [r2, #68]	; 0x44
 80019fa:	4b19      	ldr	r3, [pc, #100]	; (8001a60 <HAL_UART_MspInit+0x98>)
 80019fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019fe:	f003 0310 	and.w	r3, r3, #16
 8001a02:	613b      	str	r3, [r7, #16]
 8001a04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a06:	2300      	movs	r3, #0
 8001a08:	60fb      	str	r3, [r7, #12]
 8001a0a:	4b15      	ldr	r3, [pc, #84]	; (8001a60 <HAL_UART_MspInit+0x98>)
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0e:	4a14      	ldr	r2, [pc, #80]	; (8001a60 <HAL_UART_MspInit+0x98>)
 8001a10:	f043 0301 	orr.w	r3, r3, #1
 8001a14:	6313      	str	r3, [r2, #48]	; 0x30
 8001a16:	4b12      	ldr	r3, [pc, #72]	; (8001a60 <HAL_UART_MspInit+0x98>)
 8001a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1a:	f003 0301 	and.w	r3, r3, #1
 8001a1e:	60fb      	str	r3, [r7, #12]
 8001a20:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001a22:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001a26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a28:	2302      	movs	r3, #2
 8001a2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a30:	2303      	movs	r3, #3
 8001a32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a34:	2307      	movs	r3, #7
 8001a36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a38:	f107 0314 	add.w	r3, r7, #20
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	4809      	ldr	r0, [pc, #36]	; (8001a64 <HAL_UART_MspInit+0x9c>)
 8001a40:	f000 fef4 	bl	800282c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001a44:	2200      	movs	r2, #0
 8001a46:	2105      	movs	r1, #5
 8001a48:	2025      	movs	r0, #37	; 0x25
 8001a4a:	f000 fe33 	bl	80026b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001a4e:	2025      	movs	r0, #37	; 0x25
 8001a50:	f000 fe4c 	bl	80026ec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001a54:	bf00      	nop
 8001a56:	3728      	adds	r7, #40	; 0x28
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	40011000 	.word	0x40011000
 8001a60:	40023800 	.word	0x40023800
 8001a64:	40020000 	.word	0x40020000

08001a68 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b08c      	sub	sp, #48	; 0x30
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001a70:	2300      	movs	r3, #0
 8001a72:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001a74:	2300      	movs	r3, #0
 8001a76:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM3 IRQ priority */
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0);
 8001a78:	2200      	movs	r2, #0
 8001a7a:	6879      	ldr	r1, [r7, #4]
 8001a7c:	201d      	movs	r0, #29
 8001a7e:	f000 fe19 	bl	80026b4 <HAL_NVIC_SetPriority>

  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001a82:	201d      	movs	r0, #29
 8001a84:	f000 fe32 	bl	80026ec <HAL_NVIC_EnableIRQ>

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8001a88:	2300      	movs	r3, #0
 8001a8a:	60fb      	str	r3, [r7, #12]
 8001a8c:	4b1f      	ldr	r3, [pc, #124]	; (8001b0c <HAL_InitTick+0xa4>)
 8001a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a90:	4a1e      	ldr	r2, [pc, #120]	; (8001b0c <HAL_InitTick+0xa4>)
 8001a92:	f043 0302 	orr.w	r3, r3, #2
 8001a96:	6413      	str	r3, [r2, #64]	; 0x40
 8001a98:	4b1c      	ldr	r3, [pc, #112]	; (8001b0c <HAL_InitTick+0xa4>)
 8001a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9c:	f003 0302 	and.w	r3, r3, #2
 8001aa0:	60fb      	str	r3, [r7, #12]
 8001aa2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001aa4:	f107 0210 	add.w	r2, r7, #16
 8001aa8:	f107 0314 	add.w	r3, r7, #20
 8001aac:	4611      	mov	r1, r2
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f001 f99c 	bl	8002dec <HAL_RCC_GetClockConfig>

  /* Compute TIM3 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001ab4:	f001 f972 	bl	8002d9c <HAL_RCC_GetPCLK1Freq>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	005b      	lsls	r3, r3, #1
 8001abc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ac0:	4a13      	ldr	r2, [pc, #76]	; (8001b10 <HAL_InitTick+0xa8>)
 8001ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ac6:	0c9b      	lsrs	r3, r3, #18
 8001ac8:	3b01      	subs	r3, #1
 8001aca:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8001acc:	4b11      	ldr	r3, [pc, #68]	; (8001b14 <HAL_InitTick+0xac>)
 8001ace:	4a12      	ldr	r2, [pc, #72]	; (8001b18 <HAL_InitTick+0xb0>)
 8001ad0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8001ad2:	4b10      	ldr	r3, [pc, #64]	; (8001b14 <HAL_InitTick+0xac>)
 8001ad4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ad8:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8001ada:	4a0e      	ldr	r2, [pc, #56]	; (8001b14 <HAL_InitTick+0xac>)
 8001adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ade:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8001ae0:	4b0c      	ldr	r3, [pc, #48]	; (8001b14 <HAL_InitTick+0xac>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ae6:	4b0b      	ldr	r3, [pc, #44]	; (8001b14 <HAL_InitTick+0xac>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 8001aec:	4809      	ldr	r0, [pc, #36]	; (8001b14 <HAL_InitTick+0xac>)
 8001aee:	f001 fe7d 	bl	80037ec <HAL_TIM_Base_Init>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d104      	bne.n	8001b02 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 8001af8:	4806      	ldr	r0, [pc, #24]	; (8001b14 <HAL_InitTick+0xac>)
 8001afa:	f001 ff2f 	bl	800395c <HAL_TIM_Base_Start_IT>
 8001afe:	4603      	mov	r3, r0
 8001b00:	e000      	b.n	8001b04 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3730      	adds	r7, #48	; 0x30
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	40023800 	.word	0x40023800
 8001b10:	431bde83 	.word	0x431bde83
 8001b14:	20000520 	.word	0x20000520
 8001b18:	40000400 	.word	0x40000400

08001b1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b20:	e7fe      	b.n	8001b20 <NMI_Handler+0x4>

08001b22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b22:	b480      	push	{r7}
 8001b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b26:	e7fe      	b.n	8001b26 <HardFault_Handler+0x4>

08001b28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b2c:	e7fe      	b.n	8001b2c <MemManage_Handler+0x4>

08001b2e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b2e:	b480      	push	{r7}
 8001b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b32:	e7fe      	b.n	8001b32 <BusFault_Handler+0x4>

08001b34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b38:	e7fe      	b.n	8001b38 <UsageFault_Handler+0x4>

08001b3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b3e:	bf00      	nop
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr

08001b48 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001b4c:	4802      	ldr	r0, [pc, #8]	; (8001b58 <TIM3_IRQHandler+0x10>)
 8001b4e:	f002 f88d 	bl	8003c6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001b52:	bf00      	nop
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	20000520 	.word	0x20000520

08001b5c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

	Uart_isr(&huart1);
 8001b60:	4803      	ldr	r0, [pc, #12]	; (8001b70 <USART1_IRQHandler+0x14>)
 8001b62:	f7fe ffd7 	bl	8000b14 <Uart_isr>

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001b66:	4802      	ldr	r0, [pc, #8]	; (8001b70 <USART1_IRQHandler+0x14>)
 8001b68:	f002 ff28 	bl	80049bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001b6c:	bf00      	nop
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	2000049c 	.word	0x2000049c

08001b74 <_sbrk>:
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b086      	sub	sp, #24
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	4a14      	ldr	r2, [pc, #80]	; (8001bd0 <_sbrk+0x5c>)
 8001b7e:	4b15      	ldr	r3, [pc, #84]	; (8001bd4 <_sbrk+0x60>)
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	617b      	str	r3, [r7, #20]
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	613b      	str	r3, [r7, #16]
 8001b88:	4b13      	ldr	r3, [pc, #76]	; (8001bd8 <_sbrk+0x64>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d102      	bne.n	8001b96 <_sbrk+0x22>
 8001b90:	4b11      	ldr	r3, [pc, #68]	; (8001bd8 <_sbrk+0x64>)
 8001b92:	4a12      	ldr	r2, [pc, #72]	; (8001bdc <_sbrk+0x68>)
 8001b94:	601a      	str	r2, [r3, #0]
 8001b96:	4b10      	ldr	r3, [pc, #64]	; (8001bd8 <_sbrk+0x64>)
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4413      	add	r3, r2
 8001b9e:	693a      	ldr	r2, [r7, #16]
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d207      	bcs.n	8001bb4 <_sbrk+0x40>
 8001ba4:	f005 f81a 	bl	8006bdc <__errno>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	220c      	movs	r2, #12
 8001bac:	601a      	str	r2, [r3, #0]
 8001bae:	f04f 33ff 	mov.w	r3, #4294967295
 8001bb2:	e009      	b.n	8001bc8 <_sbrk+0x54>
 8001bb4:	4b08      	ldr	r3, [pc, #32]	; (8001bd8 <_sbrk+0x64>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	60fb      	str	r3, [r7, #12]
 8001bba:	4b07      	ldr	r3, [pc, #28]	; (8001bd8 <_sbrk+0x64>)
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4413      	add	r3, r2
 8001bc2:	4a05      	ldr	r2, [pc, #20]	; (8001bd8 <_sbrk+0x64>)
 8001bc4:	6013      	str	r3, [r2, #0]
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3718      	adds	r7, #24
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	20020000 	.word	0x20020000
 8001bd4:	00000400 	.word	0x00000400
 8001bd8:	20000568 	.word	0x20000568
 8001bdc:	200042d8 	.word	0x200042d8

08001be0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001be4:	4b06      	ldr	r3, [pc, #24]	; (8001c00 <SystemInit+0x20>)
 8001be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bea:	4a05      	ldr	r2, [pc, #20]	; (8001c00 <SystemInit+0x20>)
 8001bec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bf0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bf4:	bf00      	nop
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	e000ed00 	.word	0xe000ed00

08001c04 <Reset_Handler>:
 8001c04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c3c <LoopFillZerobss+0x12>
 8001c08:	480d      	ldr	r0, [pc, #52]	; (8001c40 <LoopFillZerobss+0x16>)
 8001c0a:	490e      	ldr	r1, [pc, #56]	; (8001c44 <LoopFillZerobss+0x1a>)
 8001c0c:	4a0e      	ldr	r2, [pc, #56]	; (8001c48 <LoopFillZerobss+0x1e>)
 8001c0e:	2300      	movs	r3, #0
 8001c10:	e002      	b.n	8001c18 <LoopCopyDataInit>

08001c12 <CopyDataInit>:
 8001c12:	58d4      	ldr	r4, [r2, r3]
 8001c14:	50c4      	str	r4, [r0, r3]
 8001c16:	3304      	adds	r3, #4

08001c18 <LoopCopyDataInit>:
 8001c18:	18c4      	adds	r4, r0, r3
 8001c1a:	428c      	cmp	r4, r1
 8001c1c:	d3f9      	bcc.n	8001c12 <CopyDataInit>
 8001c1e:	4a0b      	ldr	r2, [pc, #44]	; (8001c4c <LoopFillZerobss+0x22>)
 8001c20:	4c0b      	ldr	r4, [pc, #44]	; (8001c50 <LoopFillZerobss+0x26>)
 8001c22:	2300      	movs	r3, #0
 8001c24:	e001      	b.n	8001c2a <LoopFillZerobss>

08001c26 <FillZerobss>:
 8001c26:	6013      	str	r3, [r2, #0]
 8001c28:	3204      	adds	r2, #4

08001c2a <LoopFillZerobss>:
 8001c2a:	42a2      	cmp	r2, r4
 8001c2c:	d3fb      	bcc.n	8001c26 <FillZerobss>
 8001c2e:	f7ff ffd7 	bl	8001be0 <SystemInit>
 8001c32:	f004 ffd9 	bl	8006be8 <__libc_init_array>
 8001c36:	f7ff f927 	bl	8000e88 <main>
 8001c3a:	4770      	bx	lr
 8001c3c:	20020000 	.word	0x20020000
 8001c40:	20000000 	.word	0x20000000
 8001c44:	20000074 	.word	0x20000074
 8001c48:	08007774 	.word	0x08007774
 8001c4c:	20000074 	.word	0x20000074
 8001c50:	200042d4 	.word	0x200042d4

08001c54 <ADC_IRQHandler>:
 8001c54:	e7fe      	b.n	8001c54 <ADC_IRQHandler>
	...

08001c58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c5c:	4b0e      	ldr	r3, [pc, #56]	; (8001c98 <HAL_Init+0x40>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a0d      	ldr	r2, [pc, #52]	; (8001c98 <HAL_Init+0x40>)
 8001c62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c68:	4b0b      	ldr	r3, [pc, #44]	; (8001c98 <HAL_Init+0x40>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a0a      	ldr	r2, [pc, #40]	; (8001c98 <HAL_Init+0x40>)
 8001c6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c74:	4b08      	ldr	r3, [pc, #32]	; (8001c98 <HAL_Init+0x40>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a07      	ldr	r2, [pc, #28]	; (8001c98 <HAL_Init+0x40>)
 8001c7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c80:	2003      	movs	r0, #3
 8001c82:	f000 fd0c 	bl	800269e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c86:	200f      	movs	r0, #15
 8001c88:	f7ff feee 	bl	8001a68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c8c:	f7ff fd82 	bl	8001794 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c90:	2300      	movs	r3, #0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	40023c00 	.word	0x40023c00

08001c9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ca0:	4b06      	ldr	r3, [pc, #24]	; (8001cbc <HAL_IncTick+0x20>)
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	4b06      	ldr	r3, [pc, #24]	; (8001cc0 <HAL_IncTick+0x24>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4413      	add	r3, r2
 8001cac:	4a04      	ldr	r2, [pc, #16]	; (8001cc0 <HAL_IncTick+0x24>)
 8001cae:	6013      	str	r3, [r2, #0]
}
 8001cb0:	bf00      	nop
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	20000008 	.word	0x20000008
 8001cc0:	2000056c 	.word	0x2000056c

08001cc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  return uwTick;
 8001cc8:	4b03      	ldr	r3, [pc, #12]	; (8001cd8 <HAL_GetTick+0x14>)
 8001cca:	681b      	ldr	r3, [r3, #0]
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	2000056c 	.word	0x2000056c

08001cdc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b084      	sub	sp, #16
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ce4:	f7ff ffee 	bl	8001cc4 <HAL_GetTick>
 8001ce8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cf4:	d005      	beq.n	8001d02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cf6:	4b0a      	ldr	r3, [pc, #40]	; (8001d20 <HAL_Delay+0x44>)
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	4413      	add	r3, r2
 8001d00:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d02:	bf00      	nop
 8001d04:	f7ff ffde 	bl	8001cc4 <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	68fa      	ldr	r2, [r7, #12]
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d8f7      	bhi.n	8001d04 <HAL_Delay+0x28>
  {
  }
}
 8001d14:	bf00      	nop
 8001d16:	bf00      	nop
 8001d18:	3710      	adds	r7, #16
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	20000008 	.word	0x20000008

08001d24 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d101      	bne.n	8001d3a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e033      	b.n	8001da2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d109      	bne.n	8001d56 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f7ff fd52 	bl	80017ec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2200      	movs	r2, #0
 8001d52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5a:	f003 0310 	and.w	r3, r3, #16
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d118      	bne.n	8001d94 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d66:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001d6a:	f023 0302 	bic.w	r3, r3, #2
 8001d6e:	f043 0202 	orr.w	r2, r3, #2
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f000 fae8 	bl	800234c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d86:	f023 0303 	bic.w	r3, r3, #3
 8001d8a:	f043 0201 	orr.w	r2, r3, #1
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	641a      	str	r2, [r3, #64]	; 0x40
 8001d92:	e001      	b.n	8001d98 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3710      	adds	r7, #16
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
	...

08001dac <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b085      	sub	sp, #20
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001db4:	2300      	movs	r3, #0
 8001db6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d101      	bne.n	8001dc6 <HAL_ADC_Start+0x1a>
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	e0b2      	b.n	8001f2c <HAL_ADC_Start+0x180>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2201      	movs	r2, #1
 8001dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	f003 0301 	and.w	r3, r3, #1
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d018      	beq.n	8001e0e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	689a      	ldr	r2, [r3, #8]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f042 0201 	orr.w	r2, r2, #1
 8001dea:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001dec:	4b52      	ldr	r3, [pc, #328]	; (8001f38 <HAL_ADC_Start+0x18c>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a52      	ldr	r2, [pc, #328]	; (8001f3c <HAL_ADC_Start+0x190>)
 8001df2:	fba2 2303 	umull	r2, r3, r2, r3
 8001df6:	0c9a      	lsrs	r2, r3, #18
 8001df8:	4613      	mov	r3, r2
 8001dfa:	005b      	lsls	r3, r3, #1
 8001dfc:	4413      	add	r3, r2
 8001dfe:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001e00:	e002      	b.n	8001e08 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	3b01      	subs	r3, #1
 8001e06:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d1f9      	bne.n	8001e02 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	f003 0301 	and.w	r3, r3, #1
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d17a      	bne.n	8001f12 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e20:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001e24:	f023 0301 	bic.w	r3, r3, #1
 8001e28:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d007      	beq.n	8001e4e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e42:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e46:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e5a:	d106      	bne.n	8001e6a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e60:	f023 0206 	bic.w	r2, r3, #6
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	645a      	str	r2, [r3, #68]	; 0x44
 8001e68:	e002      	b.n	8001e70 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2200      	movs	r2, #0
 8001e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e78:	4b31      	ldr	r3, [pc, #196]	; (8001f40 <HAL_ADC_Start+0x194>)
 8001e7a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001e84:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f003 031f 	and.w	r3, r3, #31
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d12a      	bne.n	8001ee8 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a2b      	ldr	r2, [pc, #172]	; (8001f44 <HAL_ADC_Start+0x198>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d015      	beq.n	8001ec8 <HAL_ADC_Start+0x11c>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a29      	ldr	r2, [pc, #164]	; (8001f48 <HAL_ADC_Start+0x19c>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d105      	bne.n	8001eb2 <HAL_ADC_Start+0x106>
 8001ea6:	4b26      	ldr	r3, [pc, #152]	; (8001f40 <HAL_ADC_Start+0x194>)
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	f003 031f 	and.w	r3, r3, #31
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d00a      	beq.n	8001ec8 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a25      	ldr	r2, [pc, #148]	; (8001f4c <HAL_ADC_Start+0x1a0>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d136      	bne.n	8001f2a <HAL_ADC_Start+0x17e>
 8001ebc:	4b20      	ldr	r3, [pc, #128]	; (8001f40 <HAL_ADC_Start+0x194>)
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f003 0310 	and.w	r3, r3, #16
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d130      	bne.n	8001f2a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d129      	bne.n	8001f2a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	689a      	ldr	r2, [r3, #8]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001ee4:	609a      	str	r2, [r3, #8]
 8001ee6:	e020      	b.n	8001f2a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a15      	ldr	r2, [pc, #84]	; (8001f44 <HAL_ADC_Start+0x198>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d11b      	bne.n	8001f2a <HAL_ADC_Start+0x17e>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d114      	bne.n	8001f2a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	689a      	ldr	r2, [r3, #8]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001f0e:	609a      	str	r2, [r3, #8]
 8001f10:	e00b      	b.n	8001f2a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f16:	f043 0210 	orr.w	r2, r3, #16
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f22:	f043 0201 	orr.w	r2, r3, #1
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001f2a:	2300      	movs	r3, #0
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3714      	adds	r7, #20
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr
 8001f38:	20000000 	.word	0x20000000
 8001f3c:	431bde83 	.word	0x431bde83
 8001f40:	40012300 	.word	0x40012300
 8001f44:	40012000 	.word	0x40012000
 8001f48:	40012100 	.word	0x40012100
 8001f4c:	40012200 	.word	0x40012200

08001f50 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d101      	bne.n	8001f66 <HAL_ADC_Stop+0x16>
 8001f62:	2302      	movs	r3, #2
 8001f64:	e021      	b.n	8001faa <HAL_ADC_Stop+0x5a>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2201      	movs	r2, #1
 8001f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	689a      	ldr	r2, [r3, #8]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f022 0201 	bic.w	r2, r2, #1
 8001f7c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	f003 0301 	and.w	r3, r3, #1
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d109      	bne.n	8001fa0 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f90:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001f94:	f023 0301 	bic.w	r3, r3, #1
 8001f98:	f043 0201 	orr.w	r2, r3, #1
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001fa8:	2300      	movs	r3, #0
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr

08001fb6 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001fb6:	b580      	push	{r7, lr}
 8001fb8:	b084      	sub	sp, #16
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	6078      	str	r0, [r7, #4]
 8001fbe:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fd2:	d113      	bne.n	8001ffc <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001fde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fe2:	d10b      	bne.n	8001ffc <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe8:	f043 0220 	orr.w	r2, r3, #32
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e063      	b.n	80020c4 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001ffc:	f7ff fe62 	bl	8001cc4 <HAL_GetTick>
 8002000:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002002:	e021      	b.n	8002048 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	f1b3 3fff 	cmp.w	r3, #4294967295
 800200a:	d01d      	beq.n	8002048 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d007      	beq.n	8002022 <HAL_ADC_PollForConversion+0x6c>
 8002012:	f7ff fe57 	bl	8001cc4 <HAL_GetTick>
 8002016:	4602      	mov	r2, r0
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	683a      	ldr	r2, [r7, #0]
 800201e:	429a      	cmp	r2, r3
 8002020:	d212      	bcs.n	8002048 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0302 	and.w	r3, r3, #2
 800202c:	2b02      	cmp	r3, #2
 800202e:	d00b      	beq.n	8002048 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002034:	f043 0204 	orr.w	r2, r3, #4
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2200      	movs	r2, #0
 8002040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002044:	2303      	movs	r3, #3
 8002046:	e03d      	b.n	80020c4 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0302 	and.w	r3, r3, #2
 8002052:	2b02      	cmp	r3, #2
 8002054:	d1d6      	bne.n	8002004 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f06f 0212 	mvn.w	r2, #18
 800205e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002064:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d123      	bne.n	80020c2 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800207e:	2b00      	cmp	r3, #0
 8002080:	d11f      	bne.n	80020c2 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002088:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800208c:	2b00      	cmp	r3, #0
 800208e:	d006      	beq.n	800209e <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800209a:	2b00      	cmp	r3, #0
 800209c:	d111      	bne.n	80020c2 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d105      	bne.n	80020c2 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ba:	f043 0201 	orr.w	r2, r3, #1
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80020c2:	2300      	movs	r3, #0
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3710      	adds	r7, #16
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}

080020cc <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80020da:	4618      	mov	r0, r3
 80020dc:	370c      	adds	r7, #12
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
	...

080020e8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b085      	sub	sp, #20
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80020f2:	2300      	movs	r3, #0
 80020f4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d101      	bne.n	8002104 <HAL_ADC_ConfigChannel+0x1c>
 8002100:	2302      	movs	r3, #2
 8002102:	e113      	b.n	800232c <HAL_ADC_ConfigChannel+0x244>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2201      	movs	r2, #1
 8002108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2b09      	cmp	r3, #9
 8002112:	d925      	bls.n	8002160 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	68d9      	ldr	r1, [r3, #12]
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	b29b      	uxth	r3, r3
 8002120:	461a      	mov	r2, r3
 8002122:	4613      	mov	r3, r2
 8002124:	005b      	lsls	r3, r3, #1
 8002126:	4413      	add	r3, r2
 8002128:	3b1e      	subs	r3, #30
 800212a:	2207      	movs	r2, #7
 800212c:	fa02 f303 	lsl.w	r3, r2, r3
 8002130:	43da      	mvns	r2, r3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	400a      	ands	r2, r1
 8002138:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	68d9      	ldr	r1, [r3, #12]
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	689a      	ldr	r2, [r3, #8]
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	b29b      	uxth	r3, r3
 800214a:	4618      	mov	r0, r3
 800214c:	4603      	mov	r3, r0
 800214e:	005b      	lsls	r3, r3, #1
 8002150:	4403      	add	r3, r0
 8002152:	3b1e      	subs	r3, #30
 8002154:	409a      	lsls	r2, r3
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	430a      	orrs	r2, r1
 800215c:	60da      	str	r2, [r3, #12]
 800215e:	e022      	b.n	80021a6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	6919      	ldr	r1, [r3, #16]
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	b29b      	uxth	r3, r3
 800216c:	461a      	mov	r2, r3
 800216e:	4613      	mov	r3, r2
 8002170:	005b      	lsls	r3, r3, #1
 8002172:	4413      	add	r3, r2
 8002174:	2207      	movs	r2, #7
 8002176:	fa02 f303 	lsl.w	r3, r2, r3
 800217a:	43da      	mvns	r2, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	400a      	ands	r2, r1
 8002182:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	6919      	ldr	r1, [r3, #16]
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	689a      	ldr	r2, [r3, #8]
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	b29b      	uxth	r3, r3
 8002194:	4618      	mov	r0, r3
 8002196:	4603      	mov	r3, r0
 8002198:	005b      	lsls	r3, r3, #1
 800219a:	4403      	add	r3, r0
 800219c:	409a      	lsls	r2, r3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	430a      	orrs	r2, r1
 80021a4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	2b06      	cmp	r3, #6
 80021ac:	d824      	bhi.n	80021f8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	685a      	ldr	r2, [r3, #4]
 80021b8:	4613      	mov	r3, r2
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	4413      	add	r3, r2
 80021be:	3b05      	subs	r3, #5
 80021c0:	221f      	movs	r2, #31
 80021c2:	fa02 f303 	lsl.w	r3, r2, r3
 80021c6:	43da      	mvns	r2, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	400a      	ands	r2, r1
 80021ce:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	b29b      	uxth	r3, r3
 80021dc:	4618      	mov	r0, r3
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	685a      	ldr	r2, [r3, #4]
 80021e2:	4613      	mov	r3, r2
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	4413      	add	r3, r2
 80021e8:	3b05      	subs	r3, #5
 80021ea:	fa00 f203 	lsl.w	r2, r0, r3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	430a      	orrs	r2, r1
 80021f4:	635a      	str	r2, [r3, #52]	; 0x34
 80021f6:	e04c      	b.n	8002292 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	2b0c      	cmp	r3, #12
 80021fe:	d824      	bhi.n	800224a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	685a      	ldr	r2, [r3, #4]
 800220a:	4613      	mov	r3, r2
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	4413      	add	r3, r2
 8002210:	3b23      	subs	r3, #35	; 0x23
 8002212:	221f      	movs	r2, #31
 8002214:	fa02 f303 	lsl.w	r3, r2, r3
 8002218:	43da      	mvns	r2, r3
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	400a      	ands	r2, r1
 8002220:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	b29b      	uxth	r3, r3
 800222e:	4618      	mov	r0, r3
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	685a      	ldr	r2, [r3, #4]
 8002234:	4613      	mov	r3, r2
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	4413      	add	r3, r2
 800223a:	3b23      	subs	r3, #35	; 0x23
 800223c:	fa00 f203 	lsl.w	r2, r0, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	430a      	orrs	r2, r1
 8002246:	631a      	str	r2, [r3, #48]	; 0x30
 8002248:	e023      	b.n	8002292 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	685a      	ldr	r2, [r3, #4]
 8002254:	4613      	mov	r3, r2
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	4413      	add	r3, r2
 800225a:	3b41      	subs	r3, #65	; 0x41
 800225c:	221f      	movs	r2, #31
 800225e:	fa02 f303 	lsl.w	r3, r2, r3
 8002262:	43da      	mvns	r2, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	400a      	ands	r2, r1
 800226a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	b29b      	uxth	r3, r3
 8002278:	4618      	mov	r0, r3
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	685a      	ldr	r2, [r3, #4]
 800227e:	4613      	mov	r3, r2
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	4413      	add	r3, r2
 8002284:	3b41      	subs	r3, #65	; 0x41
 8002286:	fa00 f203 	lsl.w	r2, r0, r3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	430a      	orrs	r2, r1
 8002290:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002292:	4b29      	ldr	r3, [pc, #164]	; (8002338 <HAL_ADC_ConfigChannel+0x250>)
 8002294:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a28      	ldr	r2, [pc, #160]	; (800233c <HAL_ADC_ConfigChannel+0x254>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d10f      	bne.n	80022c0 <HAL_ADC_ConfigChannel+0x1d8>
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	2b12      	cmp	r3, #18
 80022a6:	d10b      	bne.n	80022c0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a1d      	ldr	r2, [pc, #116]	; (800233c <HAL_ADC_ConfigChannel+0x254>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d12b      	bne.n	8002322 <HAL_ADC_ConfigChannel+0x23a>
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a1c      	ldr	r2, [pc, #112]	; (8002340 <HAL_ADC_ConfigChannel+0x258>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d003      	beq.n	80022dc <HAL_ADC_ConfigChannel+0x1f4>
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	2b11      	cmp	r3, #17
 80022da:	d122      	bne.n	8002322 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a11      	ldr	r2, [pc, #68]	; (8002340 <HAL_ADC_ConfigChannel+0x258>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d111      	bne.n	8002322 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80022fe:	4b11      	ldr	r3, [pc, #68]	; (8002344 <HAL_ADC_ConfigChannel+0x25c>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a11      	ldr	r2, [pc, #68]	; (8002348 <HAL_ADC_ConfigChannel+0x260>)
 8002304:	fba2 2303 	umull	r2, r3, r2, r3
 8002308:	0c9a      	lsrs	r2, r3, #18
 800230a:	4613      	mov	r3, r2
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	4413      	add	r3, r2
 8002310:	005b      	lsls	r3, r3, #1
 8002312:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002314:	e002      	b.n	800231c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	3b01      	subs	r3, #1
 800231a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d1f9      	bne.n	8002316 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2200      	movs	r2, #0
 8002326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800232a:	2300      	movs	r3, #0
}
 800232c:	4618      	mov	r0, r3
 800232e:	3714      	adds	r7, #20
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr
 8002338:	40012300 	.word	0x40012300
 800233c:	40012000 	.word	0x40012000
 8002340:	10000012 	.word	0x10000012
 8002344:	20000000 	.word	0x20000000
 8002348:	431bde83 	.word	0x431bde83

0800234c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800234c:	b480      	push	{r7}
 800234e:	b085      	sub	sp, #20
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002354:	4b79      	ldr	r3, [pc, #484]	; (800253c <ADC_Init+0x1f0>)
 8002356:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	685a      	ldr	r2, [r3, #4]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	431a      	orrs	r2, r3
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	685a      	ldr	r2, [r3, #4]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002380:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	6859      	ldr	r1, [r3, #4]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	691b      	ldr	r3, [r3, #16]
 800238c:	021a      	lsls	r2, r3, #8
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	430a      	orrs	r2, r1
 8002394:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	685a      	ldr	r2, [r3, #4]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80023a4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	6859      	ldr	r1, [r3, #4]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	689a      	ldr	r2, [r3, #8]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	430a      	orrs	r2, r1
 80023b6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	689a      	ldr	r2, [r3, #8]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023c6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	6899      	ldr	r1, [r3, #8]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	68da      	ldr	r2, [r3, #12]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	430a      	orrs	r2, r1
 80023d8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023de:	4a58      	ldr	r2, [pc, #352]	; (8002540 <ADC_Init+0x1f4>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d022      	beq.n	800242a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	689a      	ldr	r2, [r3, #8]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80023f2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	6899      	ldr	r1, [r3, #8]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	430a      	orrs	r2, r1
 8002404:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	689a      	ldr	r2, [r3, #8]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002414:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	6899      	ldr	r1, [r3, #8]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	430a      	orrs	r2, r1
 8002426:	609a      	str	r2, [r3, #8]
 8002428:	e00f      	b.n	800244a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	689a      	ldr	r2, [r3, #8]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002438:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	689a      	ldr	r2, [r3, #8]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002448:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	689a      	ldr	r2, [r3, #8]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f022 0202 	bic.w	r2, r2, #2
 8002458:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	6899      	ldr	r1, [r3, #8]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	7e1b      	ldrb	r3, [r3, #24]
 8002464:	005a      	lsls	r2, r3, #1
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	430a      	orrs	r2, r1
 800246c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d01b      	beq.n	80024b0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	685a      	ldr	r2, [r3, #4]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002486:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	685a      	ldr	r2, [r3, #4]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002496:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	6859      	ldr	r1, [r3, #4]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a2:	3b01      	subs	r3, #1
 80024a4:	035a      	lsls	r2, r3, #13
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	430a      	orrs	r2, r1
 80024ac:	605a      	str	r2, [r3, #4]
 80024ae:	e007      	b.n	80024c0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	685a      	ldr	r2, [r3, #4]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024be:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80024ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	69db      	ldr	r3, [r3, #28]
 80024da:	3b01      	subs	r3, #1
 80024dc:	051a      	lsls	r2, r3, #20
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	430a      	orrs	r2, r1
 80024e4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	689a      	ldr	r2, [r3, #8]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80024f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	6899      	ldr	r1, [r3, #8]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002502:	025a      	lsls	r2, r3, #9
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	430a      	orrs	r2, r1
 800250a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	689a      	ldr	r2, [r3, #8]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800251a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	6899      	ldr	r1, [r3, #8]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	695b      	ldr	r3, [r3, #20]
 8002526:	029a      	lsls	r2, r3, #10
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	430a      	orrs	r2, r1
 800252e:	609a      	str	r2, [r3, #8]
}
 8002530:	bf00      	nop
 8002532:	3714      	adds	r7, #20
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr
 800253c:	40012300 	.word	0x40012300
 8002540:	0f000001 	.word	0x0f000001

08002544 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002544:	b480      	push	{r7}
 8002546:	b085      	sub	sp, #20
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	f003 0307 	and.w	r3, r3, #7
 8002552:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002554:	4b0c      	ldr	r3, [pc, #48]	; (8002588 <__NVIC_SetPriorityGrouping+0x44>)
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800255a:	68ba      	ldr	r2, [r7, #8]
 800255c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002560:	4013      	ands	r3, r2
 8002562:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800256c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002570:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002574:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002576:	4a04      	ldr	r2, [pc, #16]	; (8002588 <__NVIC_SetPriorityGrouping+0x44>)
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	60d3      	str	r3, [r2, #12]
}
 800257c:	bf00      	nop
 800257e:	3714      	adds	r7, #20
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr
 8002588:	e000ed00 	.word	0xe000ed00

0800258c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800258c:	b480      	push	{r7}
 800258e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002590:	4b04      	ldr	r3, [pc, #16]	; (80025a4 <__NVIC_GetPriorityGrouping+0x18>)
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	0a1b      	lsrs	r3, r3, #8
 8002596:	f003 0307 	and.w	r3, r3, #7
}
 800259a:	4618      	mov	r0, r3
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr
 80025a4:	e000ed00 	.word	0xe000ed00

080025a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	4603      	mov	r3, r0
 80025b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	db0b      	blt.n	80025d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025ba:	79fb      	ldrb	r3, [r7, #7]
 80025bc:	f003 021f 	and.w	r2, r3, #31
 80025c0:	4907      	ldr	r1, [pc, #28]	; (80025e0 <__NVIC_EnableIRQ+0x38>)
 80025c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c6:	095b      	lsrs	r3, r3, #5
 80025c8:	2001      	movs	r0, #1
 80025ca:	fa00 f202 	lsl.w	r2, r0, r2
 80025ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025d2:	bf00      	nop
 80025d4:	370c      	adds	r7, #12
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop
 80025e0:	e000e100 	.word	0xe000e100

080025e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	4603      	mov	r3, r0
 80025ec:	6039      	str	r1, [r7, #0]
 80025ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	db0a      	blt.n	800260e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	b2da      	uxtb	r2, r3
 80025fc:	490c      	ldr	r1, [pc, #48]	; (8002630 <__NVIC_SetPriority+0x4c>)
 80025fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002602:	0112      	lsls	r2, r2, #4
 8002604:	b2d2      	uxtb	r2, r2
 8002606:	440b      	add	r3, r1
 8002608:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800260c:	e00a      	b.n	8002624 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	b2da      	uxtb	r2, r3
 8002612:	4908      	ldr	r1, [pc, #32]	; (8002634 <__NVIC_SetPriority+0x50>)
 8002614:	79fb      	ldrb	r3, [r7, #7]
 8002616:	f003 030f 	and.w	r3, r3, #15
 800261a:	3b04      	subs	r3, #4
 800261c:	0112      	lsls	r2, r2, #4
 800261e:	b2d2      	uxtb	r2, r2
 8002620:	440b      	add	r3, r1
 8002622:	761a      	strb	r2, [r3, #24]
}
 8002624:	bf00      	nop
 8002626:	370c      	adds	r7, #12
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr
 8002630:	e000e100 	.word	0xe000e100
 8002634:	e000ed00 	.word	0xe000ed00

08002638 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002638:	b480      	push	{r7}
 800263a:	b089      	sub	sp, #36	; 0x24
 800263c:	af00      	add	r7, sp, #0
 800263e:	60f8      	str	r0, [r7, #12]
 8002640:	60b9      	str	r1, [r7, #8]
 8002642:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	f003 0307 	and.w	r3, r3, #7
 800264a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	f1c3 0307 	rsb	r3, r3, #7
 8002652:	2b04      	cmp	r3, #4
 8002654:	bf28      	it	cs
 8002656:	2304      	movcs	r3, #4
 8002658:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	3304      	adds	r3, #4
 800265e:	2b06      	cmp	r3, #6
 8002660:	d902      	bls.n	8002668 <NVIC_EncodePriority+0x30>
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	3b03      	subs	r3, #3
 8002666:	e000      	b.n	800266a <NVIC_EncodePriority+0x32>
 8002668:	2300      	movs	r3, #0
 800266a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800266c:	f04f 32ff 	mov.w	r2, #4294967295
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	fa02 f303 	lsl.w	r3, r2, r3
 8002676:	43da      	mvns	r2, r3
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	401a      	ands	r2, r3
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002680:	f04f 31ff 	mov.w	r1, #4294967295
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	fa01 f303 	lsl.w	r3, r1, r3
 800268a:	43d9      	mvns	r1, r3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002690:	4313      	orrs	r3, r2
         );
}
 8002692:	4618      	mov	r0, r3
 8002694:	3724      	adds	r7, #36	; 0x24
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr

0800269e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800269e:	b580      	push	{r7, lr}
 80026a0:	b082      	sub	sp, #8
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f7ff ff4c 	bl	8002544 <__NVIC_SetPriorityGrouping>
}
 80026ac:	bf00      	nop
 80026ae:	3708      	adds	r7, #8
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}

080026b4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b086      	sub	sp, #24
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	4603      	mov	r3, r0
 80026bc:	60b9      	str	r1, [r7, #8]
 80026be:	607a      	str	r2, [r7, #4]
 80026c0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026c2:	2300      	movs	r3, #0
 80026c4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026c6:	f7ff ff61 	bl	800258c <__NVIC_GetPriorityGrouping>
 80026ca:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026cc:	687a      	ldr	r2, [r7, #4]
 80026ce:	68b9      	ldr	r1, [r7, #8]
 80026d0:	6978      	ldr	r0, [r7, #20]
 80026d2:	f7ff ffb1 	bl	8002638 <NVIC_EncodePriority>
 80026d6:	4602      	mov	r2, r0
 80026d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026dc:	4611      	mov	r1, r2
 80026de:	4618      	mov	r0, r3
 80026e0:	f7ff ff80 	bl	80025e4 <__NVIC_SetPriority>
}
 80026e4:	bf00      	nop
 80026e6:	3718      	adds	r7, #24
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}

080026ec <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	4603      	mov	r3, r0
 80026f4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026fa:	4618      	mov	r0, r3
 80026fc:	f7ff ff54 	bl	80025a8 <__NVIC_EnableIRQ>
}
 8002700:	bf00      	nop
 8002702:	3708      	adds	r7, #8
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}

08002708 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b084      	sub	sp, #16
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002714:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002716:	f7ff fad5 	bl	8001cc4 <HAL_GetTick>
 800271a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002722:	b2db      	uxtb	r3, r3
 8002724:	2b02      	cmp	r3, #2
 8002726:	d008      	beq.n	800273a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2280      	movs	r2, #128	; 0x80
 800272c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2200      	movs	r2, #0
 8002732:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e052      	b.n	80027e0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f022 0216 	bic.w	r2, r2, #22
 8002748:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	695a      	ldr	r2, [r3, #20]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002758:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275e:	2b00      	cmp	r3, #0
 8002760:	d103      	bne.n	800276a <HAL_DMA_Abort+0x62>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002766:	2b00      	cmp	r3, #0
 8002768:	d007      	beq.n	800277a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f022 0208 	bic.w	r2, r2, #8
 8002778:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f022 0201 	bic.w	r2, r2, #1
 8002788:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800278a:	e013      	b.n	80027b4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800278c:	f7ff fa9a 	bl	8001cc4 <HAL_GetTick>
 8002790:	4602      	mov	r2, r0
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	2b05      	cmp	r3, #5
 8002798:	d90c      	bls.n	80027b4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2220      	movs	r2, #32
 800279e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2203      	movs	r2, #3
 80027a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2200      	movs	r2, #0
 80027ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80027b0:	2303      	movs	r3, #3
 80027b2:	e015      	b.n	80027e0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0301 	and.w	r3, r3, #1
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d1e4      	bne.n	800278c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027c6:	223f      	movs	r2, #63	; 0x3f
 80027c8:	409a      	lsls	r2, r3
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2201      	movs	r2, #1
 80027d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80027de:	2300      	movs	r3, #0
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3710      	adds	r7, #16
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	d004      	beq.n	8002806 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2280      	movs	r2, #128	; 0x80
 8002800:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e00c      	b.n	8002820 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2205      	movs	r2, #5
 800280a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f022 0201 	bic.w	r2, r2, #1
 800281c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800281e:	2300      	movs	r3, #0
}
 8002820:	4618      	mov	r0, r3
 8002822:	370c      	adds	r7, #12
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr

0800282c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800282c:	b480      	push	{r7}
 800282e:	b089      	sub	sp, #36	; 0x24
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002836:	2300      	movs	r3, #0
 8002838:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800283a:	2300      	movs	r3, #0
 800283c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800283e:	2300      	movs	r3, #0
 8002840:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002842:	2300      	movs	r3, #0
 8002844:	61fb      	str	r3, [r7, #28]
 8002846:	e165      	b.n	8002b14 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002848:	2201      	movs	r2, #1
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	fa02 f303 	lsl.w	r3, r2, r3
 8002850:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	697a      	ldr	r2, [r7, #20]
 8002858:	4013      	ands	r3, r2
 800285a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800285c:	693a      	ldr	r2, [r7, #16]
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	429a      	cmp	r2, r3
 8002862:	f040 8154 	bne.w	8002b0e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	f003 0303 	and.w	r3, r3, #3
 800286e:	2b01      	cmp	r3, #1
 8002870:	d005      	beq.n	800287e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800287a:	2b02      	cmp	r3, #2
 800287c:	d130      	bne.n	80028e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	005b      	lsls	r3, r3, #1
 8002888:	2203      	movs	r2, #3
 800288a:	fa02 f303 	lsl.w	r3, r2, r3
 800288e:	43db      	mvns	r3, r3
 8002890:	69ba      	ldr	r2, [r7, #24]
 8002892:	4013      	ands	r3, r2
 8002894:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	68da      	ldr	r2, [r3, #12]
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	005b      	lsls	r3, r3, #1
 800289e:	fa02 f303 	lsl.w	r3, r2, r3
 80028a2:	69ba      	ldr	r2, [r7, #24]
 80028a4:	4313      	orrs	r3, r2
 80028a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	69ba      	ldr	r2, [r7, #24]
 80028ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028b4:	2201      	movs	r2, #1
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	fa02 f303 	lsl.w	r3, r2, r3
 80028bc:	43db      	mvns	r3, r3
 80028be:	69ba      	ldr	r2, [r7, #24]
 80028c0:	4013      	ands	r3, r2
 80028c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	091b      	lsrs	r3, r3, #4
 80028ca:	f003 0201 	and.w	r2, r3, #1
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	fa02 f303 	lsl.w	r3, r2, r3
 80028d4:	69ba      	ldr	r2, [r7, #24]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	69ba      	ldr	r2, [r7, #24]
 80028de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f003 0303 	and.w	r3, r3, #3
 80028e8:	2b03      	cmp	r3, #3
 80028ea:	d017      	beq.n	800291c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	005b      	lsls	r3, r3, #1
 80028f6:	2203      	movs	r2, #3
 80028f8:	fa02 f303 	lsl.w	r3, r2, r3
 80028fc:	43db      	mvns	r3, r3
 80028fe:	69ba      	ldr	r2, [r7, #24]
 8002900:	4013      	ands	r3, r2
 8002902:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	689a      	ldr	r2, [r3, #8]
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	005b      	lsls	r3, r3, #1
 800290c:	fa02 f303 	lsl.w	r3, r2, r3
 8002910:	69ba      	ldr	r2, [r7, #24]
 8002912:	4313      	orrs	r3, r2
 8002914:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	69ba      	ldr	r2, [r7, #24]
 800291a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f003 0303 	and.w	r3, r3, #3
 8002924:	2b02      	cmp	r3, #2
 8002926:	d123      	bne.n	8002970 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	08da      	lsrs	r2, r3, #3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	3208      	adds	r2, #8
 8002930:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002934:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	f003 0307 	and.w	r3, r3, #7
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	220f      	movs	r2, #15
 8002940:	fa02 f303 	lsl.w	r3, r2, r3
 8002944:	43db      	mvns	r3, r3
 8002946:	69ba      	ldr	r2, [r7, #24]
 8002948:	4013      	ands	r3, r2
 800294a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	691a      	ldr	r2, [r3, #16]
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	f003 0307 	and.w	r3, r3, #7
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	fa02 f303 	lsl.w	r3, r2, r3
 800295c:	69ba      	ldr	r2, [r7, #24]
 800295e:	4313      	orrs	r3, r2
 8002960:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	08da      	lsrs	r2, r3, #3
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	3208      	adds	r2, #8
 800296a:	69b9      	ldr	r1, [r7, #24]
 800296c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	005b      	lsls	r3, r3, #1
 800297a:	2203      	movs	r2, #3
 800297c:	fa02 f303 	lsl.w	r3, r2, r3
 8002980:	43db      	mvns	r3, r3
 8002982:	69ba      	ldr	r2, [r7, #24]
 8002984:	4013      	ands	r3, r2
 8002986:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f003 0203 	and.w	r2, r3, #3
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	005b      	lsls	r3, r3, #1
 8002994:	fa02 f303 	lsl.w	r3, r2, r3
 8002998:	69ba      	ldr	r2, [r7, #24]
 800299a:	4313      	orrs	r3, r2
 800299c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	69ba      	ldr	r2, [r7, #24]
 80029a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	f000 80ae 	beq.w	8002b0e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029b2:	2300      	movs	r3, #0
 80029b4:	60fb      	str	r3, [r7, #12]
 80029b6:	4b5d      	ldr	r3, [pc, #372]	; (8002b2c <HAL_GPIO_Init+0x300>)
 80029b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ba:	4a5c      	ldr	r2, [pc, #368]	; (8002b2c <HAL_GPIO_Init+0x300>)
 80029bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029c0:	6453      	str	r3, [r2, #68]	; 0x44
 80029c2:	4b5a      	ldr	r3, [pc, #360]	; (8002b2c <HAL_GPIO_Init+0x300>)
 80029c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029ca:	60fb      	str	r3, [r7, #12]
 80029cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029ce:	4a58      	ldr	r2, [pc, #352]	; (8002b30 <HAL_GPIO_Init+0x304>)
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	089b      	lsrs	r3, r3, #2
 80029d4:	3302      	adds	r3, #2
 80029d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	f003 0303 	and.w	r3, r3, #3
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	220f      	movs	r2, #15
 80029e6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ea:	43db      	mvns	r3, r3
 80029ec:	69ba      	ldr	r2, [r7, #24]
 80029ee:	4013      	ands	r3, r2
 80029f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4a4f      	ldr	r2, [pc, #316]	; (8002b34 <HAL_GPIO_Init+0x308>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d025      	beq.n	8002a46 <HAL_GPIO_Init+0x21a>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4a4e      	ldr	r2, [pc, #312]	; (8002b38 <HAL_GPIO_Init+0x30c>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d01f      	beq.n	8002a42 <HAL_GPIO_Init+0x216>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a4d      	ldr	r2, [pc, #308]	; (8002b3c <HAL_GPIO_Init+0x310>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d019      	beq.n	8002a3e <HAL_GPIO_Init+0x212>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4a4c      	ldr	r2, [pc, #304]	; (8002b40 <HAL_GPIO_Init+0x314>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d013      	beq.n	8002a3a <HAL_GPIO_Init+0x20e>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4a4b      	ldr	r2, [pc, #300]	; (8002b44 <HAL_GPIO_Init+0x318>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d00d      	beq.n	8002a36 <HAL_GPIO_Init+0x20a>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4a4a      	ldr	r2, [pc, #296]	; (8002b48 <HAL_GPIO_Init+0x31c>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d007      	beq.n	8002a32 <HAL_GPIO_Init+0x206>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4a49      	ldr	r2, [pc, #292]	; (8002b4c <HAL_GPIO_Init+0x320>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d101      	bne.n	8002a2e <HAL_GPIO_Init+0x202>
 8002a2a:	2306      	movs	r3, #6
 8002a2c:	e00c      	b.n	8002a48 <HAL_GPIO_Init+0x21c>
 8002a2e:	2307      	movs	r3, #7
 8002a30:	e00a      	b.n	8002a48 <HAL_GPIO_Init+0x21c>
 8002a32:	2305      	movs	r3, #5
 8002a34:	e008      	b.n	8002a48 <HAL_GPIO_Init+0x21c>
 8002a36:	2304      	movs	r3, #4
 8002a38:	e006      	b.n	8002a48 <HAL_GPIO_Init+0x21c>
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e004      	b.n	8002a48 <HAL_GPIO_Init+0x21c>
 8002a3e:	2302      	movs	r3, #2
 8002a40:	e002      	b.n	8002a48 <HAL_GPIO_Init+0x21c>
 8002a42:	2301      	movs	r3, #1
 8002a44:	e000      	b.n	8002a48 <HAL_GPIO_Init+0x21c>
 8002a46:	2300      	movs	r3, #0
 8002a48:	69fa      	ldr	r2, [r7, #28]
 8002a4a:	f002 0203 	and.w	r2, r2, #3
 8002a4e:	0092      	lsls	r2, r2, #2
 8002a50:	4093      	lsls	r3, r2
 8002a52:	69ba      	ldr	r2, [r7, #24]
 8002a54:	4313      	orrs	r3, r2
 8002a56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a58:	4935      	ldr	r1, [pc, #212]	; (8002b30 <HAL_GPIO_Init+0x304>)
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	089b      	lsrs	r3, r3, #2
 8002a5e:	3302      	adds	r3, #2
 8002a60:	69ba      	ldr	r2, [r7, #24]
 8002a62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a66:	4b3a      	ldr	r3, [pc, #232]	; (8002b50 <HAL_GPIO_Init+0x324>)
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	43db      	mvns	r3, r3
 8002a70:	69ba      	ldr	r2, [r7, #24]
 8002a72:	4013      	ands	r3, r2
 8002a74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d003      	beq.n	8002a8a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002a82:	69ba      	ldr	r2, [r7, #24]
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a8a:	4a31      	ldr	r2, [pc, #196]	; (8002b50 <HAL_GPIO_Init+0x324>)
 8002a8c:	69bb      	ldr	r3, [r7, #24]
 8002a8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a90:	4b2f      	ldr	r3, [pc, #188]	; (8002b50 <HAL_GPIO_Init+0x324>)
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	43db      	mvns	r3, r3
 8002a9a:	69ba      	ldr	r2, [r7, #24]
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d003      	beq.n	8002ab4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002aac:	69ba      	ldr	r2, [r7, #24]
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ab4:	4a26      	ldr	r2, [pc, #152]	; (8002b50 <HAL_GPIO_Init+0x324>)
 8002ab6:	69bb      	ldr	r3, [r7, #24]
 8002ab8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002aba:	4b25      	ldr	r3, [pc, #148]	; (8002b50 <HAL_GPIO_Init+0x324>)
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	43db      	mvns	r3, r3
 8002ac4:	69ba      	ldr	r2, [r7, #24]
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d003      	beq.n	8002ade <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002ad6:	69ba      	ldr	r2, [r7, #24]
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ade:	4a1c      	ldr	r2, [pc, #112]	; (8002b50 <HAL_GPIO_Init+0x324>)
 8002ae0:	69bb      	ldr	r3, [r7, #24]
 8002ae2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ae4:	4b1a      	ldr	r3, [pc, #104]	; (8002b50 <HAL_GPIO_Init+0x324>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	43db      	mvns	r3, r3
 8002aee:	69ba      	ldr	r2, [r7, #24]
 8002af0:	4013      	ands	r3, r2
 8002af2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d003      	beq.n	8002b08 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002b00:	69ba      	ldr	r2, [r7, #24]
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b08:	4a11      	ldr	r2, [pc, #68]	; (8002b50 <HAL_GPIO_Init+0x324>)
 8002b0a:	69bb      	ldr	r3, [r7, #24]
 8002b0c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	3301      	adds	r3, #1
 8002b12:	61fb      	str	r3, [r7, #28]
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	2b0f      	cmp	r3, #15
 8002b18:	f67f ae96 	bls.w	8002848 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b1c:	bf00      	nop
 8002b1e:	bf00      	nop
 8002b20:	3724      	adds	r7, #36	; 0x24
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr
 8002b2a:	bf00      	nop
 8002b2c:	40023800 	.word	0x40023800
 8002b30:	40013800 	.word	0x40013800
 8002b34:	40020000 	.word	0x40020000
 8002b38:	40020400 	.word	0x40020400
 8002b3c:	40020800 	.word	0x40020800
 8002b40:	40020c00 	.word	0x40020c00
 8002b44:	40021000 	.word	0x40021000
 8002b48:	40021400 	.word	0x40021400
 8002b4c:	40021800 	.word	0x40021800
 8002b50:	40013c00 	.word	0x40013c00

08002b54 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b085      	sub	sp, #20
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	460b      	mov	r3, r1
 8002b5e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	691a      	ldr	r2, [r3, #16]
 8002b64:	887b      	ldrh	r3, [r7, #2]
 8002b66:	4013      	ands	r3, r2
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d002      	beq.n	8002b72 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	73fb      	strb	r3, [r7, #15]
 8002b70:	e001      	b.n	8002b76 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b72:	2300      	movs	r3, #0
 8002b74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b76:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3714      	adds	r7, #20
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr

08002b84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	460b      	mov	r3, r1
 8002b8e:	807b      	strh	r3, [r7, #2]
 8002b90:	4613      	mov	r3, r2
 8002b92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b94:	787b      	ldrb	r3, [r7, #1]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d003      	beq.n	8002ba2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b9a:	887a      	ldrh	r2, [r7, #2]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ba0:	e003      	b.n	8002baa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ba2:	887b      	ldrh	r3, [r7, #2]
 8002ba4:	041a      	lsls	r2, r3, #16
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	619a      	str	r2, [r3, #24]
}
 8002baa:	bf00      	nop
 8002bac:	370c      	adds	r7, #12
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr
	...

08002bb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b084      	sub	sp, #16
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d101      	bne.n	8002bcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e0cc      	b.n	8002d66 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bcc:	4b68      	ldr	r3, [pc, #416]	; (8002d70 <HAL_RCC_ClockConfig+0x1b8>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 030f 	and.w	r3, r3, #15
 8002bd4:	683a      	ldr	r2, [r7, #0]
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d90c      	bls.n	8002bf4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bda:	4b65      	ldr	r3, [pc, #404]	; (8002d70 <HAL_RCC_ClockConfig+0x1b8>)
 8002bdc:	683a      	ldr	r2, [r7, #0]
 8002bde:	b2d2      	uxtb	r2, r2
 8002be0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002be2:	4b63      	ldr	r3, [pc, #396]	; (8002d70 <HAL_RCC_ClockConfig+0x1b8>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 030f 	and.w	r3, r3, #15
 8002bea:	683a      	ldr	r2, [r7, #0]
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d001      	beq.n	8002bf4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e0b8      	b.n	8002d66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 0302 	and.w	r3, r3, #2
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d020      	beq.n	8002c42 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0304 	and.w	r3, r3, #4
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d005      	beq.n	8002c18 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c0c:	4b59      	ldr	r3, [pc, #356]	; (8002d74 <HAL_RCC_ClockConfig+0x1bc>)
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	4a58      	ldr	r2, [pc, #352]	; (8002d74 <HAL_RCC_ClockConfig+0x1bc>)
 8002c12:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c16:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0308 	and.w	r3, r3, #8
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d005      	beq.n	8002c30 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c24:	4b53      	ldr	r3, [pc, #332]	; (8002d74 <HAL_RCC_ClockConfig+0x1bc>)
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	4a52      	ldr	r2, [pc, #328]	; (8002d74 <HAL_RCC_ClockConfig+0x1bc>)
 8002c2a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c2e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c30:	4b50      	ldr	r3, [pc, #320]	; (8002d74 <HAL_RCC_ClockConfig+0x1bc>)
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	494d      	ldr	r1, [pc, #308]	; (8002d74 <HAL_RCC_ClockConfig+0x1bc>)
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0301 	and.w	r3, r3, #1
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d044      	beq.n	8002cd8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d107      	bne.n	8002c66 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c56:	4b47      	ldr	r3, [pc, #284]	; (8002d74 <HAL_RCC_ClockConfig+0x1bc>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d119      	bne.n	8002c96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e07f      	b.n	8002d66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d003      	beq.n	8002c76 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c72:	2b03      	cmp	r3, #3
 8002c74:	d107      	bne.n	8002c86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c76:	4b3f      	ldr	r3, [pc, #252]	; (8002d74 <HAL_RCC_ClockConfig+0x1bc>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d109      	bne.n	8002c96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e06f      	b.n	8002d66 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c86:	4b3b      	ldr	r3, [pc, #236]	; (8002d74 <HAL_RCC_ClockConfig+0x1bc>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 0302 	and.w	r3, r3, #2
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d101      	bne.n	8002c96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e067      	b.n	8002d66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c96:	4b37      	ldr	r3, [pc, #220]	; (8002d74 <HAL_RCC_ClockConfig+0x1bc>)
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	f023 0203 	bic.w	r2, r3, #3
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	4934      	ldr	r1, [pc, #208]	; (8002d74 <HAL_RCC_ClockConfig+0x1bc>)
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ca8:	f7ff f80c 	bl	8001cc4 <HAL_GetTick>
 8002cac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cae:	e00a      	b.n	8002cc6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cb0:	f7ff f808 	bl	8001cc4 <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d901      	bls.n	8002cc6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	e04f      	b.n	8002d66 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cc6:	4b2b      	ldr	r3, [pc, #172]	; (8002d74 <HAL_RCC_ClockConfig+0x1bc>)
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	f003 020c 	and.w	r2, r3, #12
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d1eb      	bne.n	8002cb0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cd8:	4b25      	ldr	r3, [pc, #148]	; (8002d70 <HAL_RCC_ClockConfig+0x1b8>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 030f 	and.w	r3, r3, #15
 8002ce0:	683a      	ldr	r2, [r7, #0]
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d20c      	bcs.n	8002d00 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ce6:	4b22      	ldr	r3, [pc, #136]	; (8002d70 <HAL_RCC_ClockConfig+0x1b8>)
 8002ce8:	683a      	ldr	r2, [r7, #0]
 8002cea:	b2d2      	uxtb	r2, r2
 8002cec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cee:	4b20      	ldr	r3, [pc, #128]	; (8002d70 <HAL_RCC_ClockConfig+0x1b8>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 030f 	and.w	r3, r3, #15
 8002cf6:	683a      	ldr	r2, [r7, #0]
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d001      	beq.n	8002d00 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e032      	b.n	8002d66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 0304 	and.w	r3, r3, #4
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d008      	beq.n	8002d1e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d0c:	4b19      	ldr	r3, [pc, #100]	; (8002d74 <HAL_RCC_ClockConfig+0x1bc>)
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	4916      	ldr	r1, [pc, #88]	; (8002d74 <HAL_RCC_ClockConfig+0x1bc>)
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0308 	and.w	r3, r3, #8
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d009      	beq.n	8002d3e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d2a:	4b12      	ldr	r3, [pc, #72]	; (8002d74 <HAL_RCC_ClockConfig+0x1bc>)
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	691b      	ldr	r3, [r3, #16]
 8002d36:	00db      	lsls	r3, r3, #3
 8002d38:	490e      	ldr	r1, [pc, #56]	; (8002d74 <HAL_RCC_ClockConfig+0x1bc>)
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d3e:	f000 f887 	bl	8002e50 <HAL_RCC_GetSysClockFreq>
 8002d42:	4602      	mov	r2, r0
 8002d44:	4b0b      	ldr	r3, [pc, #44]	; (8002d74 <HAL_RCC_ClockConfig+0x1bc>)
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	091b      	lsrs	r3, r3, #4
 8002d4a:	f003 030f 	and.w	r3, r3, #15
 8002d4e:	490a      	ldr	r1, [pc, #40]	; (8002d78 <HAL_RCC_ClockConfig+0x1c0>)
 8002d50:	5ccb      	ldrb	r3, [r1, r3]
 8002d52:	fa22 f303 	lsr.w	r3, r2, r3
 8002d56:	4a09      	ldr	r2, [pc, #36]	; (8002d7c <HAL_RCC_ClockConfig+0x1c4>)
 8002d58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d5a:	4b09      	ldr	r3, [pc, #36]	; (8002d80 <HAL_RCC_ClockConfig+0x1c8>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f7fe fe82 	bl	8001a68 <HAL_InitTick>

  return HAL_OK;
 8002d64:	2300      	movs	r3, #0
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3710      	adds	r7, #16
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	40023c00 	.word	0x40023c00
 8002d74:	40023800 	.word	0x40023800
 8002d78:	08007718 	.word	0x08007718
 8002d7c:	20000000 	.word	0x20000000
 8002d80:	20000004 	.word	0x20000004

08002d84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d84:	b480      	push	{r7}
 8002d86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d88:	4b03      	ldr	r3, [pc, #12]	; (8002d98 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr
 8002d96:	bf00      	nop
 8002d98:	20000000 	.word	0x20000000

08002d9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002da0:	f7ff fff0 	bl	8002d84 <HAL_RCC_GetHCLKFreq>
 8002da4:	4602      	mov	r2, r0
 8002da6:	4b05      	ldr	r3, [pc, #20]	; (8002dbc <HAL_RCC_GetPCLK1Freq+0x20>)
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	0a9b      	lsrs	r3, r3, #10
 8002dac:	f003 0307 	and.w	r3, r3, #7
 8002db0:	4903      	ldr	r1, [pc, #12]	; (8002dc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002db2:	5ccb      	ldrb	r3, [r1, r3]
 8002db4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	40023800 	.word	0x40023800
 8002dc0:	08007728 	.word	0x08007728

08002dc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002dc8:	f7ff ffdc 	bl	8002d84 <HAL_RCC_GetHCLKFreq>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	4b05      	ldr	r3, [pc, #20]	; (8002de4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	0b5b      	lsrs	r3, r3, #13
 8002dd4:	f003 0307 	and.w	r3, r3, #7
 8002dd8:	4903      	ldr	r1, [pc, #12]	; (8002de8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002dda:	5ccb      	ldrb	r3, [r1, r3]
 8002ddc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	40023800 	.word	0x40023800
 8002de8:	08007728 	.word	0x08007728

08002dec <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	220f      	movs	r2, #15
 8002dfa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002dfc:	4b12      	ldr	r3, [pc, #72]	; (8002e48 <HAL_RCC_GetClockConfig+0x5c>)
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	f003 0203 	and.w	r2, r3, #3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002e08:	4b0f      	ldr	r3, [pc, #60]	; (8002e48 <HAL_RCC_GetClockConfig+0x5c>)
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002e14:	4b0c      	ldr	r3, [pc, #48]	; (8002e48 <HAL_RCC_GetClockConfig+0x5c>)
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002e20:	4b09      	ldr	r3, [pc, #36]	; (8002e48 <HAL_RCC_GetClockConfig+0x5c>)
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	08db      	lsrs	r3, r3, #3
 8002e26:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002e2e:	4b07      	ldr	r3, [pc, #28]	; (8002e4c <HAL_RCC_GetClockConfig+0x60>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 020f 	and.w	r2, r3, #15
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	601a      	str	r2, [r3, #0]
}
 8002e3a:	bf00      	nop
 8002e3c:	370c      	adds	r7, #12
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr
 8002e46:	bf00      	nop
 8002e48:	40023800 	.word	0x40023800
 8002e4c:	40023c00 	.word	0x40023c00

08002e50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e54:	b0ae      	sub	sp, #184	; 0xb8
 8002e56:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002e64:	2300      	movs	r3, #0
 8002e66:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002e70:	2300      	movs	r3, #0
 8002e72:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e76:	4bcb      	ldr	r3, [pc, #812]	; (80031a4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	f003 030c 	and.w	r3, r3, #12
 8002e7e:	2b0c      	cmp	r3, #12
 8002e80:	f200 8206 	bhi.w	8003290 <HAL_RCC_GetSysClockFreq+0x440>
 8002e84:	a201      	add	r2, pc, #4	; (adr r2, 8002e8c <HAL_RCC_GetSysClockFreq+0x3c>)
 8002e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e8a:	bf00      	nop
 8002e8c:	08002ec1 	.word	0x08002ec1
 8002e90:	08003291 	.word	0x08003291
 8002e94:	08003291 	.word	0x08003291
 8002e98:	08003291 	.word	0x08003291
 8002e9c:	08002ec9 	.word	0x08002ec9
 8002ea0:	08003291 	.word	0x08003291
 8002ea4:	08003291 	.word	0x08003291
 8002ea8:	08003291 	.word	0x08003291
 8002eac:	08002ed1 	.word	0x08002ed1
 8002eb0:	08003291 	.word	0x08003291
 8002eb4:	08003291 	.word	0x08003291
 8002eb8:	08003291 	.word	0x08003291
 8002ebc:	080030c1 	.word	0x080030c1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ec0:	4bb9      	ldr	r3, [pc, #740]	; (80031a8 <HAL_RCC_GetSysClockFreq+0x358>)
 8002ec2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002ec6:	e1e7      	b.n	8003298 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ec8:	4bb8      	ldr	r3, [pc, #736]	; (80031ac <HAL_RCC_GetSysClockFreq+0x35c>)
 8002eca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002ece:	e1e3      	b.n	8003298 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ed0:	4bb4      	ldr	r3, [pc, #720]	; (80031a4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ed8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002edc:	4bb1      	ldr	r3, [pc, #708]	; (80031a4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d071      	beq.n	8002fcc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ee8:	4bae      	ldr	r3, [pc, #696]	; (80031a4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	099b      	lsrs	r3, r3, #6
 8002eee:	2200      	movs	r2, #0
 8002ef0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002ef4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002ef8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002efc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f00:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002f04:	2300      	movs	r3, #0
 8002f06:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002f0a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002f0e:	4622      	mov	r2, r4
 8002f10:	462b      	mov	r3, r5
 8002f12:	f04f 0000 	mov.w	r0, #0
 8002f16:	f04f 0100 	mov.w	r1, #0
 8002f1a:	0159      	lsls	r1, r3, #5
 8002f1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f20:	0150      	lsls	r0, r2, #5
 8002f22:	4602      	mov	r2, r0
 8002f24:	460b      	mov	r3, r1
 8002f26:	4621      	mov	r1, r4
 8002f28:	1a51      	subs	r1, r2, r1
 8002f2a:	6439      	str	r1, [r7, #64]	; 0x40
 8002f2c:	4629      	mov	r1, r5
 8002f2e:	eb63 0301 	sbc.w	r3, r3, r1
 8002f32:	647b      	str	r3, [r7, #68]	; 0x44
 8002f34:	f04f 0200 	mov.w	r2, #0
 8002f38:	f04f 0300 	mov.w	r3, #0
 8002f3c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002f40:	4649      	mov	r1, r9
 8002f42:	018b      	lsls	r3, r1, #6
 8002f44:	4641      	mov	r1, r8
 8002f46:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f4a:	4641      	mov	r1, r8
 8002f4c:	018a      	lsls	r2, r1, #6
 8002f4e:	4641      	mov	r1, r8
 8002f50:	1a51      	subs	r1, r2, r1
 8002f52:	63b9      	str	r1, [r7, #56]	; 0x38
 8002f54:	4649      	mov	r1, r9
 8002f56:	eb63 0301 	sbc.w	r3, r3, r1
 8002f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f5c:	f04f 0200 	mov.w	r2, #0
 8002f60:	f04f 0300 	mov.w	r3, #0
 8002f64:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002f68:	4649      	mov	r1, r9
 8002f6a:	00cb      	lsls	r3, r1, #3
 8002f6c:	4641      	mov	r1, r8
 8002f6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f72:	4641      	mov	r1, r8
 8002f74:	00ca      	lsls	r2, r1, #3
 8002f76:	4610      	mov	r0, r2
 8002f78:	4619      	mov	r1, r3
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	4622      	mov	r2, r4
 8002f7e:	189b      	adds	r3, r3, r2
 8002f80:	633b      	str	r3, [r7, #48]	; 0x30
 8002f82:	462b      	mov	r3, r5
 8002f84:	460a      	mov	r2, r1
 8002f86:	eb42 0303 	adc.w	r3, r2, r3
 8002f8a:	637b      	str	r3, [r7, #52]	; 0x34
 8002f8c:	f04f 0200 	mov.w	r2, #0
 8002f90:	f04f 0300 	mov.w	r3, #0
 8002f94:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002f98:	4629      	mov	r1, r5
 8002f9a:	024b      	lsls	r3, r1, #9
 8002f9c:	4621      	mov	r1, r4
 8002f9e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002fa2:	4621      	mov	r1, r4
 8002fa4:	024a      	lsls	r2, r1, #9
 8002fa6:	4610      	mov	r0, r2
 8002fa8:	4619      	mov	r1, r3
 8002faa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002fae:	2200      	movs	r2, #0
 8002fb0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002fb4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002fb8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002fbc:	f7fd f980 	bl	80002c0 <__aeabi_uldivmod>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	460b      	mov	r3, r1
 8002fc4:	4613      	mov	r3, r2
 8002fc6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002fca:	e067      	b.n	800309c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fcc:	4b75      	ldr	r3, [pc, #468]	; (80031a4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	099b      	lsrs	r3, r3, #6
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002fd8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002fdc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002fe0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fe4:	67bb      	str	r3, [r7, #120]	; 0x78
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002fea:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002fee:	4622      	mov	r2, r4
 8002ff0:	462b      	mov	r3, r5
 8002ff2:	f04f 0000 	mov.w	r0, #0
 8002ff6:	f04f 0100 	mov.w	r1, #0
 8002ffa:	0159      	lsls	r1, r3, #5
 8002ffc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003000:	0150      	lsls	r0, r2, #5
 8003002:	4602      	mov	r2, r0
 8003004:	460b      	mov	r3, r1
 8003006:	4621      	mov	r1, r4
 8003008:	1a51      	subs	r1, r2, r1
 800300a:	62b9      	str	r1, [r7, #40]	; 0x28
 800300c:	4629      	mov	r1, r5
 800300e:	eb63 0301 	sbc.w	r3, r3, r1
 8003012:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003014:	f04f 0200 	mov.w	r2, #0
 8003018:	f04f 0300 	mov.w	r3, #0
 800301c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003020:	4649      	mov	r1, r9
 8003022:	018b      	lsls	r3, r1, #6
 8003024:	4641      	mov	r1, r8
 8003026:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800302a:	4641      	mov	r1, r8
 800302c:	018a      	lsls	r2, r1, #6
 800302e:	4641      	mov	r1, r8
 8003030:	ebb2 0a01 	subs.w	sl, r2, r1
 8003034:	4649      	mov	r1, r9
 8003036:	eb63 0b01 	sbc.w	fp, r3, r1
 800303a:	f04f 0200 	mov.w	r2, #0
 800303e:	f04f 0300 	mov.w	r3, #0
 8003042:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003046:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800304a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800304e:	4692      	mov	sl, r2
 8003050:	469b      	mov	fp, r3
 8003052:	4623      	mov	r3, r4
 8003054:	eb1a 0303 	adds.w	r3, sl, r3
 8003058:	623b      	str	r3, [r7, #32]
 800305a:	462b      	mov	r3, r5
 800305c:	eb4b 0303 	adc.w	r3, fp, r3
 8003060:	627b      	str	r3, [r7, #36]	; 0x24
 8003062:	f04f 0200 	mov.w	r2, #0
 8003066:	f04f 0300 	mov.w	r3, #0
 800306a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800306e:	4629      	mov	r1, r5
 8003070:	028b      	lsls	r3, r1, #10
 8003072:	4621      	mov	r1, r4
 8003074:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003078:	4621      	mov	r1, r4
 800307a:	028a      	lsls	r2, r1, #10
 800307c:	4610      	mov	r0, r2
 800307e:	4619      	mov	r1, r3
 8003080:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003084:	2200      	movs	r2, #0
 8003086:	673b      	str	r3, [r7, #112]	; 0x70
 8003088:	677a      	str	r2, [r7, #116]	; 0x74
 800308a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800308e:	f7fd f917 	bl	80002c0 <__aeabi_uldivmod>
 8003092:	4602      	mov	r2, r0
 8003094:	460b      	mov	r3, r1
 8003096:	4613      	mov	r3, r2
 8003098:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800309c:	4b41      	ldr	r3, [pc, #260]	; (80031a4 <HAL_RCC_GetSysClockFreq+0x354>)
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	0c1b      	lsrs	r3, r3, #16
 80030a2:	f003 0303 	and.w	r3, r3, #3
 80030a6:	3301      	adds	r3, #1
 80030a8:	005b      	lsls	r3, r3, #1
 80030aa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80030ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80030b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80030b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80030be:	e0eb      	b.n	8003298 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030c0:	4b38      	ldr	r3, [pc, #224]	; (80031a4 <HAL_RCC_GetSysClockFreq+0x354>)
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030cc:	4b35      	ldr	r3, [pc, #212]	; (80031a4 <HAL_RCC_GetSysClockFreq+0x354>)
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d06b      	beq.n	80031b0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030d8:	4b32      	ldr	r3, [pc, #200]	; (80031a4 <HAL_RCC_GetSysClockFreq+0x354>)
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	099b      	lsrs	r3, r3, #6
 80030de:	2200      	movs	r2, #0
 80030e0:	66bb      	str	r3, [r7, #104]	; 0x68
 80030e2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80030e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80030e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030ea:	663b      	str	r3, [r7, #96]	; 0x60
 80030ec:	2300      	movs	r3, #0
 80030ee:	667b      	str	r3, [r7, #100]	; 0x64
 80030f0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80030f4:	4622      	mov	r2, r4
 80030f6:	462b      	mov	r3, r5
 80030f8:	f04f 0000 	mov.w	r0, #0
 80030fc:	f04f 0100 	mov.w	r1, #0
 8003100:	0159      	lsls	r1, r3, #5
 8003102:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003106:	0150      	lsls	r0, r2, #5
 8003108:	4602      	mov	r2, r0
 800310a:	460b      	mov	r3, r1
 800310c:	4621      	mov	r1, r4
 800310e:	1a51      	subs	r1, r2, r1
 8003110:	61b9      	str	r1, [r7, #24]
 8003112:	4629      	mov	r1, r5
 8003114:	eb63 0301 	sbc.w	r3, r3, r1
 8003118:	61fb      	str	r3, [r7, #28]
 800311a:	f04f 0200 	mov.w	r2, #0
 800311e:	f04f 0300 	mov.w	r3, #0
 8003122:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003126:	4659      	mov	r1, fp
 8003128:	018b      	lsls	r3, r1, #6
 800312a:	4651      	mov	r1, sl
 800312c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003130:	4651      	mov	r1, sl
 8003132:	018a      	lsls	r2, r1, #6
 8003134:	4651      	mov	r1, sl
 8003136:	ebb2 0801 	subs.w	r8, r2, r1
 800313a:	4659      	mov	r1, fp
 800313c:	eb63 0901 	sbc.w	r9, r3, r1
 8003140:	f04f 0200 	mov.w	r2, #0
 8003144:	f04f 0300 	mov.w	r3, #0
 8003148:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800314c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003150:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003154:	4690      	mov	r8, r2
 8003156:	4699      	mov	r9, r3
 8003158:	4623      	mov	r3, r4
 800315a:	eb18 0303 	adds.w	r3, r8, r3
 800315e:	613b      	str	r3, [r7, #16]
 8003160:	462b      	mov	r3, r5
 8003162:	eb49 0303 	adc.w	r3, r9, r3
 8003166:	617b      	str	r3, [r7, #20]
 8003168:	f04f 0200 	mov.w	r2, #0
 800316c:	f04f 0300 	mov.w	r3, #0
 8003170:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003174:	4629      	mov	r1, r5
 8003176:	024b      	lsls	r3, r1, #9
 8003178:	4621      	mov	r1, r4
 800317a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800317e:	4621      	mov	r1, r4
 8003180:	024a      	lsls	r2, r1, #9
 8003182:	4610      	mov	r0, r2
 8003184:	4619      	mov	r1, r3
 8003186:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800318a:	2200      	movs	r2, #0
 800318c:	65bb      	str	r3, [r7, #88]	; 0x58
 800318e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003190:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003194:	f7fd f894 	bl	80002c0 <__aeabi_uldivmod>
 8003198:	4602      	mov	r2, r0
 800319a:	460b      	mov	r3, r1
 800319c:	4613      	mov	r3, r2
 800319e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80031a2:	e065      	b.n	8003270 <HAL_RCC_GetSysClockFreq+0x420>
 80031a4:	40023800 	.word	0x40023800
 80031a8:	00f42400 	.word	0x00f42400
 80031ac:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031b0:	4b3d      	ldr	r3, [pc, #244]	; (80032a8 <HAL_RCC_GetSysClockFreq+0x458>)
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	099b      	lsrs	r3, r3, #6
 80031b6:	2200      	movs	r2, #0
 80031b8:	4618      	mov	r0, r3
 80031ba:	4611      	mov	r1, r2
 80031bc:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80031c0:	653b      	str	r3, [r7, #80]	; 0x50
 80031c2:	2300      	movs	r3, #0
 80031c4:	657b      	str	r3, [r7, #84]	; 0x54
 80031c6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80031ca:	4642      	mov	r2, r8
 80031cc:	464b      	mov	r3, r9
 80031ce:	f04f 0000 	mov.w	r0, #0
 80031d2:	f04f 0100 	mov.w	r1, #0
 80031d6:	0159      	lsls	r1, r3, #5
 80031d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031dc:	0150      	lsls	r0, r2, #5
 80031de:	4602      	mov	r2, r0
 80031e0:	460b      	mov	r3, r1
 80031e2:	4641      	mov	r1, r8
 80031e4:	1a51      	subs	r1, r2, r1
 80031e6:	60b9      	str	r1, [r7, #8]
 80031e8:	4649      	mov	r1, r9
 80031ea:	eb63 0301 	sbc.w	r3, r3, r1
 80031ee:	60fb      	str	r3, [r7, #12]
 80031f0:	f04f 0200 	mov.w	r2, #0
 80031f4:	f04f 0300 	mov.w	r3, #0
 80031f8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80031fc:	4659      	mov	r1, fp
 80031fe:	018b      	lsls	r3, r1, #6
 8003200:	4651      	mov	r1, sl
 8003202:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003206:	4651      	mov	r1, sl
 8003208:	018a      	lsls	r2, r1, #6
 800320a:	4651      	mov	r1, sl
 800320c:	1a54      	subs	r4, r2, r1
 800320e:	4659      	mov	r1, fp
 8003210:	eb63 0501 	sbc.w	r5, r3, r1
 8003214:	f04f 0200 	mov.w	r2, #0
 8003218:	f04f 0300 	mov.w	r3, #0
 800321c:	00eb      	lsls	r3, r5, #3
 800321e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003222:	00e2      	lsls	r2, r4, #3
 8003224:	4614      	mov	r4, r2
 8003226:	461d      	mov	r5, r3
 8003228:	4643      	mov	r3, r8
 800322a:	18e3      	adds	r3, r4, r3
 800322c:	603b      	str	r3, [r7, #0]
 800322e:	464b      	mov	r3, r9
 8003230:	eb45 0303 	adc.w	r3, r5, r3
 8003234:	607b      	str	r3, [r7, #4]
 8003236:	f04f 0200 	mov.w	r2, #0
 800323a:	f04f 0300 	mov.w	r3, #0
 800323e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003242:	4629      	mov	r1, r5
 8003244:	028b      	lsls	r3, r1, #10
 8003246:	4621      	mov	r1, r4
 8003248:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800324c:	4621      	mov	r1, r4
 800324e:	028a      	lsls	r2, r1, #10
 8003250:	4610      	mov	r0, r2
 8003252:	4619      	mov	r1, r3
 8003254:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003258:	2200      	movs	r2, #0
 800325a:	64bb      	str	r3, [r7, #72]	; 0x48
 800325c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800325e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003262:	f7fd f82d 	bl	80002c0 <__aeabi_uldivmod>
 8003266:	4602      	mov	r2, r0
 8003268:	460b      	mov	r3, r1
 800326a:	4613      	mov	r3, r2
 800326c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003270:	4b0d      	ldr	r3, [pc, #52]	; (80032a8 <HAL_RCC_GetSysClockFreq+0x458>)
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	0f1b      	lsrs	r3, r3, #28
 8003276:	f003 0307 	and.w	r3, r3, #7
 800327a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800327e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003282:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003286:	fbb2 f3f3 	udiv	r3, r2, r3
 800328a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800328e:	e003      	b.n	8003298 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003290:	4b06      	ldr	r3, [pc, #24]	; (80032ac <HAL_RCC_GetSysClockFreq+0x45c>)
 8003292:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003296:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003298:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800329c:	4618      	mov	r0, r3
 800329e:	37b8      	adds	r7, #184	; 0xb8
 80032a0:	46bd      	mov	sp, r7
 80032a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032a6:	bf00      	nop
 80032a8:	40023800 	.word	0x40023800
 80032ac:	00f42400 	.word	0x00f42400

080032b0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b086      	sub	sp, #24
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d101      	bne.n	80032c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e28d      	b.n	80037de <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 0301 	and.w	r3, r3, #1
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	f000 8083 	beq.w	80033d6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80032d0:	4b94      	ldr	r3, [pc, #592]	; (8003524 <HAL_RCC_OscConfig+0x274>)
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	f003 030c 	and.w	r3, r3, #12
 80032d8:	2b04      	cmp	r3, #4
 80032da:	d019      	beq.n	8003310 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80032dc:	4b91      	ldr	r3, [pc, #580]	; (8003524 <HAL_RCC_OscConfig+0x274>)
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80032e4:	2b08      	cmp	r3, #8
 80032e6:	d106      	bne.n	80032f6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80032e8:	4b8e      	ldr	r3, [pc, #568]	; (8003524 <HAL_RCC_OscConfig+0x274>)
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032f4:	d00c      	beq.n	8003310 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032f6:	4b8b      	ldr	r3, [pc, #556]	; (8003524 <HAL_RCC_OscConfig+0x274>)
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80032fe:	2b0c      	cmp	r3, #12
 8003300:	d112      	bne.n	8003328 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003302:	4b88      	ldr	r3, [pc, #544]	; (8003524 <HAL_RCC_OscConfig+0x274>)
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800330a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800330e:	d10b      	bne.n	8003328 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003310:	4b84      	ldr	r3, [pc, #528]	; (8003524 <HAL_RCC_OscConfig+0x274>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003318:	2b00      	cmp	r3, #0
 800331a:	d05b      	beq.n	80033d4 <HAL_RCC_OscConfig+0x124>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d157      	bne.n	80033d4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e25a      	b.n	80037de <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003330:	d106      	bne.n	8003340 <HAL_RCC_OscConfig+0x90>
 8003332:	4b7c      	ldr	r3, [pc, #496]	; (8003524 <HAL_RCC_OscConfig+0x274>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a7b      	ldr	r2, [pc, #492]	; (8003524 <HAL_RCC_OscConfig+0x274>)
 8003338:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800333c:	6013      	str	r3, [r2, #0]
 800333e:	e01d      	b.n	800337c <HAL_RCC_OscConfig+0xcc>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003348:	d10c      	bne.n	8003364 <HAL_RCC_OscConfig+0xb4>
 800334a:	4b76      	ldr	r3, [pc, #472]	; (8003524 <HAL_RCC_OscConfig+0x274>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a75      	ldr	r2, [pc, #468]	; (8003524 <HAL_RCC_OscConfig+0x274>)
 8003350:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003354:	6013      	str	r3, [r2, #0]
 8003356:	4b73      	ldr	r3, [pc, #460]	; (8003524 <HAL_RCC_OscConfig+0x274>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a72      	ldr	r2, [pc, #456]	; (8003524 <HAL_RCC_OscConfig+0x274>)
 800335c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003360:	6013      	str	r3, [r2, #0]
 8003362:	e00b      	b.n	800337c <HAL_RCC_OscConfig+0xcc>
 8003364:	4b6f      	ldr	r3, [pc, #444]	; (8003524 <HAL_RCC_OscConfig+0x274>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a6e      	ldr	r2, [pc, #440]	; (8003524 <HAL_RCC_OscConfig+0x274>)
 800336a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800336e:	6013      	str	r3, [r2, #0]
 8003370:	4b6c      	ldr	r3, [pc, #432]	; (8003524 <HAL_RCC_OscConfig+0x274>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a6b      	ldr	r2, [pc, #428]	; (8003524 <HAL_RCC_OscConfig+0x274>)
 8003376:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800337a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d013      	beq.n	80033ac <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003384:	f7fe fc9e 	bl	8001cc4 <HAL_GetTick>
 8003388:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800338a:	e008      	b.n	800339e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800338c:	f7fe fc9a 	bl	8001cc4 <HAL_GetTick>
 8003390:	4602      	mov	r2, r0
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	2b64      	cmp	r3, #100	; 0x64
 8003398:	d901      	bls.n	800339e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e21f      	b.n	80037de <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800339e:	4b61      	ldr	r3, [pc, #388]	; (8003524 <HAL_RCC_OscConfig+0x274>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d0f0      	beq.n	800338c <HAL_RCC_OscConfig+0xdc>
 80033aa:	e014      	b.n	80033d6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ac:	f7fe fc8a 	bl	8001cc4 <HAL_GetTick>
 80033b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033b2:	e008      	b.n	80033c6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033b4:	f7fe fc86 	bl	8001cc4 <HAL_GetTick>
 80033b8:	4602      	mov	r2, r0
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	2b64      	cmp	r3, #100	; 0x64
 80033c0:	d901      	bls.n	80033c6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	e20b      	b.n	80037de <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033c6:	4b57      	ldr	r3, [pc, #348]	; (8003524 <HAL_RCC_OscConfig+0x274>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d1f0      	bne.n	80033b4 <HAL_RCC_OscConfig+0x104>
 80033d2:	e000      	b.n	80033d6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 0302 	and.w	r3, r3, #2
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d06f      	beq.n	80034c2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80033e2:	4b50      	ldr	r3, [pc, #320]	; (8003524 <HAL_RCC_OscConfig+0x274>)
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	f003 030c 	and.w	r3, r3, #12
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d017      	beq.n	800341e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80033ee:	4b4d      	ldr	r3, [pc, #308]	; (8003524 <HAL_RCC_OscConfig+0x274>)
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80033f6:	2b08      	cmp	r3, #8
 80033f8:	d105      	bne.n	8003406 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80033fa:	4b4a      	ldr	r3, [pc, #296]	; (8003524 <HAL_RCC_OscConfig+0x274>)
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d00b      	beq.n	800341e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003406:	4b47      	ldr	r3, [pc, #284]	; (8003524 <HAL_RCC_OscConfig+0x274>)
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800340e:	2b0c      	cmp	r3, #12
 8003410:	d11c      	bne.n	800344c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003412:	4b44      	ldr	r3, [pc, #272]	; (8003524 <HAL_RCC_OscConfig+0x274>)
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d116      	bne.n	800344c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800341e:	4b41      	ldr	r3, [pc, #260]	; (8003524 <HAL_RCC_OscConfig+0x274>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 0302 	and.w	r3, r3, #2
 8003426:	2b00      	cmp	r3, #0
 8003428:	d005      	beq.n	8003436 <HAL_RCC_OscConfig+0x186>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	2b01      	cmp	r3, #1
 8003430:	d001      	beq.n	8003436 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e1d3      	b.n	80037de <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003436:	4b3b      	ldr	r3, [pc, #236]	; (8003524 <HAL_RCC_OscConfig+0x274>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	691b      	ldr	r3, [r3, #16]
 8003442:	00db      	lsls	r3, r3, #3
 8003444:	4937      	ldr	r1, [pc, #220]	; (8003524 <HAL_RCC_OscConfig+0x274>)
 8003446:	4313      	orrs	r3, r2
 8003448:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800344a:	e03a      	b.n	80034c2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	68db      	ldr	r3, [r3, #12]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d020      	beq.n	8003496 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003454:	4b34      	ldr	r3, [pc, #208]	; (8003528 <HAL_RCC_OscConfig+0x278>)
 8003456:	2201      	movs	r2, #1
 8003458:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800345a:	f7fe fc33 	bl	8001cc4 <HAL_GetTick>
 800345e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003460:	e008      	b.n	8003474 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003462:	f7fe fc2f 	bl	8001cc4 <HAL_GetTick>
 8003466:	4602      	mov	r2, r0
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	2b02      	cmp	r3, #2
 800346e:	d901      	bls.n	8003474 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003470:	2303      	movs	r3, #3
 8003472:	e1b4      	b.n	80037de <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003474:	4b2b      	ldr	r3, [pc, #172]	; (8003524 <HAL_RCC_OscConfig+0x274>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 0302 	and.w	r3, r3, #2
 800347c:	2b00      	cmp	r3, #0
 800347e:	d0f0      	beq.n	8003462 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003480:	4b28      	ldr	r3, [pc, #160]	; (8003524 <HAL_RCC_OscConfig+0x274>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	691b      	ldr	r3, [r3, #16]
 800348c:	00db      	lsls	r3, r3, #3
 800348e:	4925      	ldr	r1, [pc, #148]	; (8003524 <HAL_RCC_OscConfig+0x274>)
 8003490:	4313      	orrs	r3, r2
 8003492:	600b      	str	r3, [r1, #0]
 8003494:	e015      	b.n	80034c2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003496:	4b24      	ldr	r3, [pc, #144]	; (8003528 <HAL_RCC_OscConfig+0x278>)
 8003498:	2200      	movs	r2, #0
 800349a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800349c:	f7fe fc12 	bl	8001cc4 <HAL_GetTick>
 80034a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034a2:	e008      	b.n	80034b6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034a4:	f7fe fc0e 	bl	8001cc4 <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	2b02      	cmp	r3, #2
 80034b0:	d901      	bls.n	80034b6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	e193      	b.n	80037de <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034b6:	4b1b      	ldr	r3, [pc, #108]	; (8003524 <HAL_RCC_OscConfig+0x274>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 0302 	and.w	r3, r3, #2
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d1f0      	bne.n	80034a4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 0308 	and.w	r3, r3, #8
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d036      	beq.n	800353c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	695b      	ldr	r3, [r3, #20]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d016      	beq.n	8003504 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034d6:	4b15      	ldr	r3, [pc, #84]	; (800352c <HAL_RCC_OscConfig+0x27c>)
 80034d8:	2201      	movs	r2, #1
 80034da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034dc:	f7fe fbf2 	bl	8001cc4 <HAL_GetTick>
 80034e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034e2:	e008      	b.n	80034f6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034e4:	f7fe fbee 	bl	8001cc4 <HAL_GetTick>
 80034e8:	4602      	mov	r2, r0
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	2b02      	cmp	r3, #2
 80034f0:	d901      	bls.n	80034f6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80034f2:	2303      	movs	r3, #3
 80034f4:	e173      	b.n	80037de <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034f6:	4b0b      	ldr	r3, [pc, #44]	; (8003524 <HAL_RCC_OscConfig+0x274>)
 80034f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034fa:	f003 0302 	and.w	r3, r3, #2
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d0f0      	beq.n	80034e4 <HAL_RCC_OscConfig+0x234>
 8003502:	e01b      	b.n	800353c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003504:	4b09      	ldr	r3, [pc, #36]	; (800352c <HAL_RCC_OscConfig+0x27c>)
 8003506:	2200      	movs	r2, #0
 8003508:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800350a:	f7fe fbdb 	bl	8001cc4 <HAL_GetTick>
 800350e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003510:	e00e      	b.n	8003530 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003512:	f7fe fbd7 	bl	8001cc4 <HAL_GetTick>
 8003516:	4602      	mov	r2, r0
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	2b02      	cmp	r3, #2
 800351e:	d907      	bls.n	8003530 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003520:	2303      	movs	r3, #3
 8003522:	e15c      	b.n	80037de <HAL_RCC_OscConfig+0x52e>
 8003524:	40023800 	.word	0x40023800
 8003528:	42470000 	.word	0x42470000
 800352c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003530:	4b8a      	ldr	r3, [pc, #552]	; (800375c <HAL_RCC_OscConfig+0x4ac>)
 8003532:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003534:	f003 0302 	and.w	r3, r3, #2
 8003538:	2b00      	cmp	r3, #0
 800353a:	d1ea      	bne.n	8003512 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 0304 	and.w	r3, r3, #4
 8003544:	2b00      	cmp	r3, #0
 8003546:	f000 8097 	beq.w	8003678 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800354a:	2300      	movs	r3, #0
 800354c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800354e:	4b83      	ldr	r3, [pc, #524]	; (800375c <HAL_RCC_OscConfig+0x4ac>)
 8003550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003552:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003556:	2b00      	cmp	r3, #0
 8003558:	d10f      	bne.n	800357a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800355a:	2300      	movs	r3, #0
 800355c:	60bb      	str	r3, [r7, #8]
 800355e:	4b7f      	ldr	r3, [pc, #508]	; (800375c <HAL_RCC_OscConfig+0x4ac>)
 8003560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003562:	4a7e      	ldr	r2, [pc, #504]	; (800375c <HAL_RCC_OscConfig+0x4ac>)
 8003564:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003568:	6413      	str	r3, [r2, #64]	; 0x40
 800356a:	4b7c      	ldr	r3, [pc, #496]	; (800375c <HAL_RCC_OscConfig+0x4ac>)
 800356c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003572:	60bb      	str	r3, [r7, #8]
 8003574:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003576:	2301      	movs	r3, #1
 8003578:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800357a:	4b79      	ldr	r3, [pc, #484]	; (8003760 <HAL_RCC_OscConfig+0x4b0>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003582:	2b00      	cmp	r3, #0
 8003584:	d118      	bne.n	80035b8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003586:	4b76      	ldr	r3, [pc, #472]	; (8003760 <HAL_RCC_OscConfig+0x4b0>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a75      	ldr	r2, [pc, #468]	; (8003760 <HAL_RCC_OscConfig+0x4b0>)
 800358c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003590:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003592:	f7fe fb97 	bl	8001cc4 <HAL_GetTick>
 8003596:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003598:	e008      	b.n	80035ac <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800359a:	f7fe fb93 	bl	8001cc4 <HAL_GetTick>
 800359e:	4602      	mov	r2, r0
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	1ad3      	subs	r3, r2, r3
 80035a4:	2b02      	cmp	r3, #2
 80035a6:	d901      	bls.n	80035ac <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80035a8:	2303      	movs	r3, #3
 80035aa:	e118      	b.n	80037de <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035ac:	4b6c      	ldr	r3, [pc, #432]	; (8003760 <HAL_RCC_OscConfig+0x4b0>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d0f0      	beq.n	800359a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d106      	bne.n	80035ce <HAL_RCC_OscConfig+0x31e>
 80035c0:	4b66      	ldr	r3, [pc, #408]	; (800375c <HAL_RCC_OscConfig+0x4ac>)
 80035c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035c4:	4a65      	ldr	r2, [pc, #404]	; (800375c <HAL_RCC_OscConfig+0x4ac>)
 80035c6:	f043 0301 	orr.w	r3, r3, #1
 80035ca:	6713      	str	r3, [r2, #112]	; 0x70
 80035cc:	e01c      	b.n	8003608 <HAL_RCC_OscConfig+0x358>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	2b05      	cmp	r3, #5
 80035d4:	d10c      	bne.n	80035f0 <HAL_RCC_OscConfig+0x340>
 80035d6:	4b61      	ldr	r3, [pc, #388]	; (800375c <HAL_RCC_OscConfig+0x4ac>)
 80035d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035da:	4a60      	ldr	r2, [pc, #384]	; (800375c <HAL_RCC_OscConfig+0x4ac>)
 80035dc:	f043 0304 	orr.w	r3, r3, #4
 80035e0:	6713      	str	r3, [r2, #112]	; 0x70
 80035e2:	4b5e      	ldr	r3, [pc, #376]	; (800375c <HAL_RCC_OscConfig+0x4ac>)
 80035e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035e6:	4a5d      	ldr	r2, [pc, #372]	; (800375c <HAL_RCC_OscConfig+0x4ac>)
 80035e8:	f043 0301 	orr.w	r3, r3, #1
 80035ec:	6713      	str	r3, [r2, #112]	; 0x70
 80035ee:	e00b      	b.n	8003608 <HAL_RCC_OscConfig+0x358>
 80035f0:	4b5a      	ldr	r3, [pc, #360]	; (800375c <HAL_RCC_OscConfig+0x4ac>)
 80035f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035f4:	4a59      	ldr	r2, [pc, #356]	; (800375c <HAL_RCC_OscConfig+0x4ac>)
 80035f6:	f023 0301 	bic.w	r3, r3, #1
 80035fa:	6713      	str	r3, [r2, #112]	; 0x70
 80035fc:	4b57      	ldr	r3, [pc, #348]	; (800375c <HAL_RCC_OscConfig+0x4ac>)
 80035fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003600:	4a56      	ldr	r2, [pc, #344]	; (800375c <HAL_RCC_OscConfig+0x4ac>)
 8003602:	f023 0304 	bic.w	r3, r3, #4
 8003606:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d015      	beq.n	800363c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003610:	f7fe fb58 	bl	8001cc4 <HAL_GetTick>
 8003614:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003616:	e00a      	b.n	800362e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003618:	f7fe fb54 	bl	8001cc4 <HAL_GetTick>
 800361c:	4602      	mov	r2, r0
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	f241 3288 	movw	r2, #5000	; 0x1388
 8003626:	4293      	cmp	r3, r2
 8003628:	d901      	bls.n	800362e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800362a:	2303      	movs	r3, #3
 800362c:	e0d7      	b.n	80037de <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800362e:	4b4b      	ldr	r3, [pc, #300]	; (800375c <HAL_RCC_OscConfig+0x4ac>)
 8003630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003632:	f003 0302 	and.w	r3, r3, #2
 8003636:	2b00      	cmp	r3, #0
 8003638:	d0ee      	beq.n	8003618 <HAL_RCC_OscConfig+0x368>
 800363a:	e014      	b.n	8003666 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800363c:	f7fe fb42 	bl	8001cc4 <HAL_GetTick>
 8003640:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003642:	e00a      	b.n	800365a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003644:	f7fe fb3e 	bl	8001cc4 <HAL_GetTick>
 8003648:	4602      	mov	r2, r0
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003652:	4293      	cmp	r3, r2
 8003654:	d901      	bls.n	800365a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e0c1      	b.n	80037de <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800365a:	4b40      	ldr	r3, [pc, #256]	; (800375c <HAL_RCC_OscConfig+0x4ac>)
 800365c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800365e:	f003 0302 	and.w	r3, r3, #2
 8003662:	2b00      	cmp	r3, #0
 8003664:	d1ee      	bne.n	8003644 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003666:	7dfb      	ldrb	r3, [r7, #23]
 8003668:	2b01      	cmp	r3, #1
 800366a:	d105      	bne.n	8003678 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800366c:	4b3b      	ldr	r3, [pc, #236]	; (800375c <HAL_RCC_OscConfig+0x4ac>)
 800366e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003670:	4a3a      	ldr	r2, [pc, #232]	; (800375c <HAL_RCC_OscConfig+0x4ac>)
 8003672:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003676:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	699b      	ldr	r3, [r3, #24]
 800367c:	2b00      	cmp	r3, #0
 800367e:	f000 80ad 	beq.w	80037dc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003682:	4b36      	ldr	r3, [pc, #216]	; (800375c <HAL_RCC_OscConfig+0x4ac>)
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	f003 030c 	and.w	r3, r3, #12
 800368a:	2b08      	cmp	r3, #8
 800368c:	d060      	beq.n	8003750 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	699b      	ldr	r3, [r3, #24]
 8003692:	2b02      	cmp	r3, #2
 8003694:	d145      	bne.n	8003722 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003696:	4b33      	ldr	r3, [pc, #204]	; (8003764 <HAL_RCC_OscConfig+0x4b4>)
 8003698:	2200      	movs	r2, #0
 800369a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800369c:	f7fe fb12 	bl	8001cc4 <HAL_GetTick>
 80036a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036a2:	e008      	b.n	80036b6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036a4:	f7fe fb0e 	bl	8001cc4 <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	2b02      	cmp	r3, #2
 80036b0:	d901      	bls.n	80036b6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e093      	b.n	80037de <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036b6:	4b29      	ldr	r3, [pc, #164]	; (800375c <HAL_RCC_OscConfig+0x4ac>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d1f0      	bne.n	80036a4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	69da      	ldr	r2, [r3, #28]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6a1b      	ldr	r3, [r3, #32]
 80036ca:	431a      	orrs	r2, r3
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d0:	019b      	lsls	r3, r3, #6
 80036d2:	431a      	orrs	r2, r3
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036d8:	085b      	lsrs	r3, r3, #1
 80036da:	3b01      	subs	r3, #1
 80036dc:	041b      	lsls	r3, r3, #16
 80036de:	431a      	orrs	r2, r3
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e4:	061b      	lsls	r3, r3, #24
 80036e6:	431a      	orrs	r2, r3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ec:	071b      	lsls	r3, r3, #28
 80036ee:	491b      	ldr	r1, [pc, #108]	; (800375c <HAL_RCC_OscConfig+0x4ac>)
 80036f0:	4313      	orrs	r3, r2
 80036f2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036f4:	4b1b      	ldr	r3, [pc, #108]	; (8003764 <HAL_RCC_OscConfig+0x4b4>)
 80036f6:	2201      	movs	r2, #1
 80036f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036fa:	f7fe fae3 	bl	8001cc4 <HAL_GetTick>
 80036fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003700:	e008      	b.n	8003714 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003702:	f7fe fadf 	bl	8001cc4 <HAL_GetTick>
 8003706:	4602      	mov	r2, r0
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	2b02      	cmp	r3, #2
 800370e:	d901      	bls.n	8003714 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003710:	2303      	movs	r3, #3
 8003712:	e064      	b.n	80037de <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003714:	4b11      	ldr	r3, [pc, #68]	; (800375c <HAL_RCC_OscConfig+0x4ac>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800371c:	2b00      	cmp	r3, #0
 800371e:	d0f0      	beq.n	8003702 <HAL_RCC_OscConfig+0x452>
 8003720:	e05c      	b.n	80037dc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003722:	4b10      	ldr	r3, [pc, #64]	; (8003764 <HAL_RCC_OscConfig+0x4b4>)
 8003724:	2200      	movs	r2, #0
 8003726:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003728:	f7fe facc 	bl	8001cc4 <HAL_GetTick>
 800372c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800372e:	e008      	b.n	8003742 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003730:	f7fe fac8 	bl	8001cc4 <HAL_GetTick>
 8003734:	4602      	mov	r2, r0
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	2b02      	cmp	r3, #2
 800373c:	d901      	bls.n	8003742 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	e04d      	b.n	80037de <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003742:	4b06      	ldr	r3, [pc, #24]	; (800375c <HAL_RCC_OscConfig+0x4ac>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d1f0      	bne.n	8003730 <HAL_RCC_OscConfig+0x480>
 800374e:	e045      	b.n	80037dc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	699b      	ldr	r3, [r3, #24]
 8003754:	2b01      	cmp	r3, #1
 8003756:	d107      	bne.n	8003768 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e040      	b.n	80037de <HAL_RCC_OscConfig+0x52e>
 800375c:	40023800 	.word	0x40023800
 8003760:	40007000 	.word	0x40007000
 8003764:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003768:	4b1f      	ldr	r3, [pc, #124]	; (80037e8 <HAL_RCC_OscConfig+0x538>)
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	699b      	ldr	r3, [r3, #24]
 8003772:	2b01      	cmp	r3, #1
 8003774:	d030      	beq.n	80037d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003780:	429a      	cmp	r2, r3
 8003782:	d129      	bne.n	80037d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800378e:	429a      	cmp	r2, r3
 8003790:	d122      	bne.n	80037d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003792:	68fa      	ldr	r2, [r7, #12]
 8003794:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003798:	4013      	ands	r3, r2
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800379e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d119      	bne.n	80037d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ae:	085b      	lsrs	r3, r3, #1
 80037b0:	3b01      	subs	r3, #1
 80037b2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d10f      	bne.n	80037d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d107      	bne.n	80037d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d001      	beq.n	80037dc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	e000      	b.n	80037de <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80037dc:	2300      	movs	r3, #0
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3718      	adds	r7, #24
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	40023800 	.word	0x40023800

080037ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b082      	sub	sp, #8
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d101      	bne.n	80037fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e041      	b.n	8003882 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003804:	b2db      	uxtb	r3, r3
 8003806:	2b00      	cmp	r3, #0
 8003808:	d106      	bne.n	8003818 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f7fe f85e 	bl	80018d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2202      	movs	r2, #2
 800381c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	3304      	adds	r3, #4
 8003828:	4619      	mov	r1, r3
 800382a:	4610      	mov	r0, r2
 800382c:	f000 fcd8 	bl	80041e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2201      	movs	r2, #1
 8003834:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2201      	movs	r2, #1
 800383c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2201      	movs	r2, #1
 8003844:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2201      	movs	r2, #1
 800384c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2201      	movs	r2, #1
 8003854:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2201      	movs	r2, #1
 800385c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2201      	movs	r2, #1
 8003864:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2201      	movs	r2, #1
 800386c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2201      	movs	r2, #1
 8003874:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2201      	movs	r2, #1
 800387c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003880:	2300      	movs	r3, #0
}
 8003882:	4618      	mov	r0, r3
 8003884:	3708      	adds	r7, #8
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
	...

0800388c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800388c:	b480      	push	{r7}
 800388e:	b085      	sub	sp, #20
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800389a:	b2db      	uxtb	r3, r3
 800389c:	2b01      	cmp	r3, #1
 800389e:	d001      	beq.n	80038a4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e046      	b.n	8003932 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2202      	movs	r2, #2
 80038a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a23      	ldr	r2, [pc, #140]	; (8003940 <HAL_TIM_Base_Start+0xb4>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d022      	beq.n	80038fc <HAL_TIM_Base_Start+0x70>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038be:	d01d      	beq.n	80038fc <HAL_TIM_Base_Start+0x70>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a1f      	ldr	r2, [pc, #124]	; (8003944 <HAL_TIM_Base_Start+0xb8>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d018      	beq.n	80038fc <HAL_TIM_Base_Start+0x70>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a1e      	ldr	r2, [pc, #120]	; (8003948 <HAL_TIM_Base_Start+0xbc>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d013      	beq.n	80038fc <HAL_TIM_Base_Start+0x70>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a1c      	ldr	r2, [pc, #112]	; (800394c <HAL_TIM_Base_Start+0xc0>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d00e      	beq.n	80038fc <HAL_TIM_Base_Start+0x70>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a1b      	ldr	r2, [pc, #108]	; (8003950 <HAL_TIM_Base_Start+0xc4>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d009      	beq.n	80038fc <HAL_TIM_Base_Start+0x70>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a19      	ldr	r2, [pc, #100]	; (8003954 <HAL_TIM_Base_Start+0xc8>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d004      	beq.n	80038fc <HAL_TIM_Base_Start+0x70>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a18      	ldr	r2, [pc, #96]	; (8003958 <HAL_TIM_Base_Start+0xcc>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d111      	bne.n	8003920 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	f003 0307 	and.w	r3, r3, #7
 8003906:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2b06      	cmp	r3, #6
 800390c:	d010      	beq.n	8003930 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f042 0201 	orr.w	r2, r2, #1
 800391c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800391e:	e007      	b.n	8003930 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f042 0201 	orr.w	r2, r2, #1
 800392e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003930:	2300      	movs	r3, #0
}
 8003932:	4618      	mov	r0, r3
 8003934:	3714      	adds	r7, #20
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr
 800393e:	bf00      	nop
 8003940:	40010000 	.word	0x40010000
 8003944:	40000400 	.word	0x40000400
 8003948:	40000800 	.word	0x40000800
 800394c:	40000c00 	.word	0x40000c00
 8003950:	40010400 	.word	0x40010400
 8003954:	40014000 	.word	0x40014000
 8003958:	40001800 	.word	0x40001800

0800395c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800395c:	b480      	push	{r7}
 800395e:	b085      	sub	sp, #20
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800396a:	b2db      	uxtb	r3, r3
 800396c:	2b01      	cmp	r3, #1
 800396e:	d001      	beq.n	8003974 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	e04e      	b.n	8003a12 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2202      	movs	r2, #2
 8003978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	68da      	ldr	r2, [r3, #12]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f042 0201 	orr.w	r2, r2, #1
 800398a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a23      	ldr	r2, [pc, #140]	; (8003a20 <HAL_TIM_Base_Start_IT+0xc4>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d022      	beq.n	80039dc <HAL_TIM_Base_Start_IT+0x80>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800399e:	d01d      	beq.n	80039dc <HAL_TIM_Base_Start_IT+0x80>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a1f      	ldr	r2, [pc, #124]	; (8003a24 <HAL_TIM_Base_Start_IT+0xc8>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d018      	beq.n	80039dc <HAL_TIM_Base_Start_IT+0x80>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a1e      	ldr	r2, [pc, #120]	; (8003a28 <HAL_TIM_Base_Start_IT+0xcc>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d013      	beq.n	80039dc <HAL_TIM_Base_Start_IT+0x80>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a1c      	ldr	r2, [pc, #112]	; (8003a2c <HAL_TIM_Base_Start_IT+0xd0>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d00e      	beq.n	80039dc <HAL_TIM_Base_Start_IT+0x80>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a1b      	ldr	r2, [pc, #108]	; (8003a30 <HAL_TIM_Base_Start_IT+0xd4>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d009      	beq.n	80039dc <HAL_TIM_Base_Start_IT+0x80>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a19      	ldr	r2, [pc, #100]	; (8003a34 <HAL_TIM_Base_Start_IT+0xd8>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d004      	beq.n	80039dc <HAL_TIM_Base_Start_IT+0x80>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a18      	ldr	r2, [pc, #96]	; (8003a38 <HAL_TIM_Base_Start_IT+0xdc>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d111      	bne.n	8003a00 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	f003 0307 	and.w	r3, r3, #7
 80039e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2b06      	cmp	r3, #6
 80039ec:	d010      	beq.n	8003a10 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f042 0201 	orr.w	r2, r2, #1
 80039fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039fe:	e007      	b.n	8003a10 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f042 0201 	orr.w	r2, r2, #1
 8003a0e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a10:	2300      	movs	r3, #0
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3714      	adds	r7, #20
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr
 8003a1e:	bf00      	nop
 8003a20:	40010000 	.word	0x40010000
 8003a24:	40000400 	.word	0x40000400
 8003a28:	40000800 	.word	0x40000800
 8003a2c:	40000c00 	.word	0x40000c00
 8003a30:	40010400 	.word	0x40010400
 8003a34:	40014000 	.word	0x40014000
 8003a38:	40001800 	.word	0x40001800

08003a3c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b082      	sub	sp, #8
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d101      	bne.n	8003a4e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e041      	b.n	8003ad2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d106      	bne.n	8003a68 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f7fd ff58 	bl	8001918 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2202      	movs	r2, #2
 8003a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	3304      	adds	r3, #4
 8003a78:	4619      	mov	r1, r3
 8003a7a:	4610      	mov	r0, r2
 8003a7c:	f000 fbb0 	bl	80041e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2201      	movs	r2, #1
 8003a84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2201      	movs	r2, #1
 8003a94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2201      	movs	r2, #1
 8003abc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2201      	movs	r2, #1
 8003acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ad0:	2300      	movs	r3, #0
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3708      	adds	r7, #8
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
	...

08003adc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b084      	sub	sp, #16
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d109      	bne.n	8003b00 <HAL_TIM_PWM_Start+0x24>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003af2:	b2db      	uxtb	r3, r3
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	bf14      	ite	ne
 8003af8:	2301      	movne	r3, #1
 8003afa:	2300      	moveq	r3, #0
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	e022      	b.n	8003b46 <HAL_TIM_PWM_Start+0x6a>
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	2b04      	cmp	r3, #4
 8003b04:	d109      	bne.n	8003b1a <HAL_TIM_PWM_Start+0x3e>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	bf14      	ite	ne
 8003b12:	2301      	movne	r3, #1
 8003b14:	2300      	moveq	r3, #0
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	e015      	b.n	8003b46 <HAL_TIM_PWM_Start+0x6a>
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	2b08      	cmp	r3, #8
 8003b1e:	d109      	bne.n	8003b34 <HAL_TIM_PWM_Start+0x58>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	bf14      	ite	ne
 8003b2c:	2301      	movne	r3, #1
 8003b2e:	2300      	moveq	r3, #0
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	e008      	b.n	8003b46 <HAL_TIM_PWM_Start+0x6a>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	bf14      	ite	ne
 8003b40:	2301      	movne	r3, #1
 8003b42:	2300      	moveq	r3, #0
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d001      	beq.n	8003b4e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e07c      	b.n	8003c48 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d104      	bne.n	8003b5e <HAL_TIM_PWM_Start+0x82>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2202      	movs	r2, #2
 8003b58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b5c:	e013      	b.n	8003b86 <HAL_TIM_PWM_Start+0xaa>
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	2b04      	cmp	r3, #4
 8003b62:	d104      	bne.n	8003b6e <HAL_TIM_PWM_Start+0x92>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2202      	movs	r2, #2
 8003b68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b6c:	e00b      	b.n	8003b86 <HAL_TIM_PWM_Start+0xaa>
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	2b08      	cmp	r3, #8
 8003b72:	d104      	bne.n	8003b7e <HAL_TIM_PWM_Start+0xa2>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2202      	movs	r2, #2
 8003b78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b7c:	e003      	b.n	8003b86 <HAL_TIM_PWM_Start+0xaa>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2202      	movs	r2, #2
 8003b82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	6839      	ldr	r1, [r7, #0]
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f000 fe10 	bl	80047b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a2d      	ldr	r2, [pc, #180]	; (8003c50 <HAL_TIM_PWM_Start+0x174>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d004      	beq.n	8003ba8 <HAL_TIM_PWM_Start+0xcc>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a2c      	ldr	r2, [pc, #176]	; (8003c54 <HAL_TIM_PWM_Start+0x178>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d101      	bne.n	8003bac <HAL_TIM_PWM_Start+0xd0>
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e000      	b.n	8003bae <HAL_TIM_PWM_Start+0xd2>
 8003bac:	2300      	movs	r3, #0
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d007      	beq.n	8003bc2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003bc0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a22      	ldr	r2, [pc, #136]	; (8003c50 <HAL_TIM_PWM_Start+0x174>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d022      	beq.n	8003c12 <HAL_TIM_PWM_Start+0x136>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bd4:	d01d      	beq.n	8003c12 <HAL_TIM_PWM_Start+0x136>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a1f      	ldr	r2, [pc, #124]	; (8003c58 <HAL_TIM_PWM_Start+0x17c>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d018      	beq.n	8003c12 <HAL_TIM_PWM_Start+0x136>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a1d      	ldr	r2, [pc, #116]	; (8003c5c <HAL_TIM_PWM_Start+0x180>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d013      	beq.n	8003c12 <HAL_TIM_PWM_Start+0x136>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a1c      	ldr	r2, [pc, #112]	; (8003c60 <HAL_TIM_PWM_Start+0x184>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d00e      	beq.n	8003c12 <HAL_TIM_PWM_Start+0x136>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a16      	ldr	r2, [pc, #88]	; (8003c54 <HAL_TIM_PWM_Start+0x178>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d009      	beq.n	8003c12 <HAL_TIM_PWM_Start+0x136>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a18      	ldr	r2, [pc, #96]	; (8003c64 <HAL_TIM_PWM_Start+0x188>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d004      	beq.n	8003c12 <HAL_TIM_PWM_Start+0x136>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a16      	ldr	r2, [pc, #88]	; (8003c68 <HAL_TIM_PWM_Start+0x18c>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d111      	bne.n	8003c36 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	f003 0307 	and.w	r3, r3, #7
 8003c1c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2b06      	cmp	r3, #6
 8003c22:	d010      	beq.n	8003c46 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f042 0201 	orr.w	r2, r2, #1
 8003c32:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c34:	e007      	b.n	8003c46 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f042 0201 	orr.w	r2, r2, #1
 8003c44:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c46:	2300      	movs	r3, #0
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3710      	adds	r7, #16
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}
 8003c50:	40010000 	.word	0x40010000
 8003c54:	40010400 	.word	0x40010400
 8003c58:	40000400 	.word	0x40000400
 8003c5c:	40000800 	.word	0x40000800
 8003c60:	40000c00 	.word	0x40000c00
 8003c64:	40014000 	.word	0x40014000
 8003c68:	40001800 	.word	0x40001800

08003c6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b082      	sub	sp, #8
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	691b      	ldr	r3, [r3, #16]
 8003c7a:	f003 0302 	and.w	r3, r3, #2
 8003c7e:	2b02      	cmp	r3, #2
 8003c80:	d122      	bne.n	8003cc8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	f003 0302 	and.w	r3, r3, #2
 8003c8c:	2b02      	cmp	r3, #2
 8003c8e:	d11b      	bne.n	8003cc8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f06f 0202 	mvn.w	r2, #2
 8003c98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	699b      	ldr	r3, [r3, #24]
 8003ca6:	f003 0303 	and.w	r3, r3, #3
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d003      	beq.n	8003cb6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f000 fa77 	bl	80041a2 <HAL_TIM_IC_CaptureCallback>
 8003cb4:	e005      	b.n	8003cc2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f000 fa69 	bl	800418e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f000 fa7a 	bl	80041b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	691b      	ldr	r3, [r3, #16]
 8003cce:	f003 0304 	and.w	r3, r3, #4
 8003cd2:	2b04      	cmp	r3, #4
 8003cd4:	d122      	bne.n	8003d1c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	f003 0304 	and.w	r3, r3, #4
 8003ce0:	2b04      	cmp	r3, #4
 8003ce2:	d11b      	bne.n	8003d1c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f06f 0204 	mvn.w	r2, #4
 8003cec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2202      	movs	r2, #2
 8003cf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	699b      	ldr	r3, [r3, #24]
 8003cfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d003      	beq.n	8003d0a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f000 fa4d 	bl	80041a2 <HAL_TIM_IC_CaptureCallback>
 8003d08:	e005      	b.n	8003d16 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f000 fa3f 	bl	800418e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	f000 fa50 	bl	80041b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	691b      	ldr	r3, [r3, #16]
 8003d22:	f003 0308 	and.w	r3, r3, #8
 8003d26:	2b08      	cmp	r3, #8
 8003d28:	d122      	bne.n	8003d70 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	68db      	ldr	r3, [r3, #12]
 8003d30:	f003 0308 	and.w	r3, r3, #8
 8003d34:	2b08      	cmp	r3, #8
 8003d36:	d11b      	bne.n	8003d70 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f06f 0208 	mvn.w	r2, #8
 8003d40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2204      	movs	r2, #4
 8003d46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	69db      	ldr	r3, [r3, #28]
 8003d4e:	f003 0303 	and.w	r3, r3, #3
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d003      	beq.n	8003d5e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f000 fa23 	bl	80041a2 <HAL_TIM_IC_CaptureCallback>
 8003d5c:	e005      	b.n	8003d6a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f000 fa15 	bl	800418e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	f000 fa26 	bl	80041b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	691b      	ldr	r3, [r3, #16]
 8003d76:	f003 0310 	and.w	r3, r3, #16
 8003d7a:	2b10      	cmp	r3, #16
 8003d7c:	d122      	bne.n	8003dc4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	f003 0310 	and.w	r3, r3, #16
 8003d88:	2b10      	cmp	r3, #16
 8003d8a:	d11b      	bne.n	8003dc4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f06f 0210 	mvn.w	r2, #16
 8003d94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2208      	movs	r2, #8
 8003d9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	69db      	ldr	r3, [r3, #28]
 8003da2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d003      	beq.n	8003db2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f000 f9f9 	bl	80041a2 <HAL_TIM_IC_CaptureCallback>
 8003db0:	e005      	b.n	8003dbe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f000 f9eb 	bl	800418e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	f000 f9fc 	bl	80041b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	691b      	ldr	r3, [r3, #16]
 8003dca:	f003 0301 	and.w	r3, r3, #1
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d10e      	bne.n	8003df0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	f003 0301 	and.w	r3, r3, #1
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d107      	bne.n	8003df0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f06f 0201 	mvn.w	r2, #1
 8003de8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f7fd fcba 	bl	8001764 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	691b      	ldr	r3, [r3, #16]
 8003df6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dfa:	2b80      	cmp	r3, #128	; 0x80
 8003dfc:	d10e      	bne.n	8003e1c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	68db      	ldr	r3, [r3, #12]
 8003e04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e08:	2b80      	cmp	r3, #128	; 0x80
 8003e0a:	d107      	bne.n	8003e1c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003e14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f000 fd78 	bl	800490c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	691b      	ldr	r3, [r3, #16]
 8003e22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e26:	2b40      	cmp	r3, #64	; 0x40
 8003e28:	d10e      	bne.n	8003e48 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e34:	2b40      	cmp	r3, #64	; 0x40
 8003e36:	d107      	bne.n	8003e48 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003e40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f000 f9c1 	bl	80041ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	691b      	ldr	r3, [r3, #16]
 8003e4e:	f003 0320 	and.w	r3, r3, #32
 8003e52:	2b20      	cmp	r3, #32
 8003e54:	d10e      	bne.n	8003e74 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	f003 0320 	and.w	r3, r3, #32
 8003e60:	2b20      	cmp	r3, #32
 8003e62:	d107      	bne.n	8003e74 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f06f 0220 	mvn.w	r2, #32
 8003e6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f000 fd42 	bl	80048f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003e74:	bf00      	nop
 8003e76:	3708      	adds	r7, #8
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}

08003e7c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b086      	sub	sp, #24
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	60f8      	str	r0, [r7, #12]
 8003e84:	60b9      	str	r1, [r7, #8]
 8003e86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d101      	bne.n	8003e9a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003e96:	2302      	movs	r3, #2
 8003e98:	e0ae      	b.n	8003ff8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2b0c      	cmp	r3, #12
 8003ea6:	f200 809f 	bhi.w	8003fe8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003eaa:	a201      	add	r2, pc, #4	; (adr r2, 8003eb0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eb0:	08003ee5 	.word	0x08003ee5
 8003eb4:	08003fe9 	.word	0x08003fe9
 8003eb8:	08003fe9 	.word	0x08003fe9
 8003ebc:	08003fe9 	.word	0x08003fe9
 8003ec0:	08003f25 	.word	0x08003f25
 8003ec4:	08003fe9 	.word	0x08003fe9
 8003ec8:	08003fe9 	.word	0x08003fe9
 8003ecc:	08003fe9 	.word	0x08003fe9
 8003ed0:	08003f67 	.word	0x08003f67
 8003ed4:	08003fe9 	.word	0x08003fe9
 8003ed8:	08003fe9 	.word	0x08003fe9
 8003edc:	08003fe9 	.word	0x08003fe9
 8003ee0:	08003fa7 	.word	0x08003fa7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	68b9      	ldr	r1, [r7, #8]
 8003eea:	4618      	mov	r0, r3
 8003eec:	f000 fa18 	bl	8004320 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	699a      	ldr	r2, [r3, #24]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f042 0208 	orr.w	r2, r2, #8
 8003efe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	699a      	ldr	r2, [r3, #24]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f022 0204 	bic.w	r2, r2, #4
 8003f0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	6999      	ldr	r1, [r3, #24]
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	691a      	ldr	r2, [r3, #16]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	430a      	orrs	r2, r1
 8003f20:	619a      	str	r2, [r3, #24]
      break;
 8003f22:	e064      	b.n	8003fee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	68b9      	ldr	r1, [r7, #8]
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f000 fa68 	bl	8004400 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	699a      	ldr	r2, [r3, #24]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	699a      	ldr	r2, [r3, #24]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	6999      	ldr	r1, [r3, #24]
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	691b      	ldr	r3, [r3, #16]
 8003f5a:	021a      	lsls	r2, r3, #8
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	430a      	orrs	r2, r1
 8003f62:	619a      	str	r2, [r3, #24]
      break;
 8003f64:	e043      	b.n	8003fee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	68b9      	ldr	r1, [r7, #8]
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f000 fabd 	bl	80044ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	69da      	ldr	r2, [r3, #28]
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f042 0208 	orr.w	r2, r2, #8
 8003f80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	69da      	ldr	r2, [r3, #28]
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f022 0204 	bic.w	r2, r2, #4
 8003f90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	69d9      	ldr	r1, [r3, #28]
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	691a      	ldr	r2, [r3, #16]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	430a      	orrs	r2, r1
 8003fa2:	61da      	str	r2, [r3, #28]
      break;
 8003fa4:	e023      	b.n	8003fee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	68b9      	ldr	r1, [r7, #8]
 8003fac:	4618      	mov	r0, r3
 8003fae:	f000 fb11 	bl	80045d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	69da      	ldr	r2, [r3, #28]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003fc0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	69da      	ldr	r2, [r3, #28]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fd0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	69d9      	ldr	r1, [r3, #28]
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	691b      	ldr	r3, [r3, #16]
 8003fdc:	021a      	lsls	r2, r3, #8
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	430a      	orrs	r2, r1
 8003fe4:	61da      	str	r2, [r3, #28]
      break;
 8003fe6:	e002      	b.n	8003fee <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	75fb      	strb	r3, [r7, #23]
      break;
 8003fec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003ff6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	3718      	adds	r7, #24
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}

08004000 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b084      	sub	sp, #16
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
 8004008:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800400a:	2300      	movs	r3, #0
 800400c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004014:	2b01      	cmp	r3, #1
 8004016:	d101      	bne.n	800401c <HAL_TIM_ConfigClockSource+0x1c>
 8004018:	2302      	movs	r3, #2
 800401a:	e0b4      	b.n	8004186 <HAL_TIM_ConfigClockSource+0x186>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2201      	movs	r2, #1
 8004020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2202      	movs	r2, #2
 8004028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800403a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004042:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	68ba      	ldr	r2, [r7, #8]
 800404a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004054:	d03e      	beq.n	80040d4 <HAL_TIM_ConfigClockSource+0xd4>
 8004056:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800405a:	f200 8087 	bhi.w	800416c <HAL_TIM_ConfigClockSource+0x16c>
 800405e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004062:	f000 8086 	beq.w	8004172 <HAL_TIM_ConfigClockSource+0x172>
 8004066:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800406a:	d87f      	bhi.n	800416c <HAL_TIM_ConfigClockSource+0x16c>
 800406c:	2b70      	cmp	r3, #112	; 0x70
 800406e:	d01a      	beq.n	80040a6 <HAL_TIM_ConfigClockSource+0xa6>
 8004070:	2b70      	cmp	r3, #112	; 0x70
 8004072:	d87b      	bhi.n	800416c <HAL_TIM_ConfigClockSource+0x16c>
 8004074:	2b60      	cmp	r3, #96	; 0x60
 8004076:	d050      	beq.n	800411a <HAL_TIM_ConfigClockSource+0x11a>
 8004078:	2b60      	cmp	r3, #96	; 0x60
 800407a:	d877      	bhi.n	800416c <HAL_TIM_ConfigClockSource+0x16c>
 800407c:	2b50      	cmp	r3, #80	; 0x50
 800407e:	d03c      	beq.n	80040fa <HAL_TIM_ConfigClockSource+0xfa>
 8004080:	2b50      	cmp	r3, #80	; 0x50
 8004082:	d873      	bhi.n	800416c <HAL_TIM_ConfigClockSource+0x16c>
 8004084:	2b40      	cmp	r3, #64	; 0x40
 8004086:	d058      	beq.n	800413a <HAL_TIM_ConfigClockSource+0x13a>
 8004088:	2b40      	cmp	r3, #64	; 0x40
 800408a:	d86f      	bhi.n	800416c <HAL_TIM_ConfigClockSource+0x16c>
 800408c:	2b30      	cmp	r3, #48	; 0x30
 800408e:	d064      	beq.n	800415a <HAL_TIM_ConfigClockSource+0x15a>
 8004090:	2b30      	cmp	r3, #48	; 0x30
 8004092:	d86b      	bhi.n	800416c <HAL_TIM_ConfigClockSource+0x16c>
 8004094:	2b20      	cmp	r3, #32
 8004096:	d060      	beq.n	800415a <HAL_TIM_ConfigClockSource+0x15a>
 8004098:	2b20      	cmp	r3, #32
 800409a:	d867      	bhi.n	800416c <HAL_TIM_ConfigClockSource+0x16c>
 800409c:	2b00      	cmp	r3, #0
 800409e:	d05c      	beq.n	800415a <HAL_TIM_ConfigClockSource+0x15a>
 80040a0:	2b10      	cmp	r3, #16
 80040a2:	d05a      	beq.n	800415a <HAL_TIM_ConfigClockSource+0x15a>
 80040a4:	e062      	b.n	800416c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6818      	ldr	r0, [r3, #0]
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	6899      	ldr	r1, [r3, #8]
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	685a      	ldr	r2, [r3, #4]
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	68db      	ldr	r3, [r3, #12]
 80040b6:	f000 fb5d 	bl	8004774 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80040c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	68ba      	ldr	r2, [r7, #8]
 80040d0:	609a      	str	r2, [r3, #8]
      break;
 80040d2:	e04f      	b.n	8004174 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6818      	ldr	r0, [r3, #0]
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	6899      	ldr	r1, [r3, #8]
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	685a      	ldr	r2, [r3, #4]
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	f000 fb46 	bl	8004774 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	689a      	ldr	r2, [r3, #8]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80040f6:	609a      	str	r2, [r3, #8]
      break;
 80040f8:	e03c      	b.n	8004174 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6818      	ldr	r0, [r3, #0]
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	6859      	ldr	r1, [r3, #4]
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	68db      	ldr	r3, [r3, #12]
 8004106:	461a      	mov	r2, r3
 8004108:	f000 faba 	bl	8004680 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	2150      	movs	r1, #80	; 0x50
 8004112:	4618      	mov	r0, r3
 8004114:	f000 fb13 	bl	800473e <TIM_ITRx_SetConfig>
      break;
 8004118:	e02c      	b.n	8004174 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6818      	ldr	r0, [r3, #0]
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	6859      	ldr	r1, [r3, #4]
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	68db      	ldr	r3, [r3, #12]
 8004126:	461a      	mov	r2, r3
 8004128:	f000 fad9 	bl	80046de <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	2160      	movs	r1, #96	; 0x60
 8004132:	4618      	mov	r0, r3
 8004134:	f000 fb03 	bl	800473e <TIM_ITRx_SetConfig>
      break;
 8004138:	e01c      	b.n	8004174 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6818      	ldr	r0, [r3, #0]
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	6859      	ldr	r1, [r3, #4]
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	68db      	ldr	r3, [r3, #12]
 8004146:	461a      	mov	r2, r3
 8004148:	f000 fa9a 	bl	8004680 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	2140      	movs	r1, #64	; 0x40
 8004152:	4618      	mov	r0, r3
 8004154:	f000 faf3 	bl	800473e <TIM_ITRx_SetConfig>
      break;
 8004158:	e00c      	b.n	8004174 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4619      	mov	r1, r3
 8004164:	4610      	mov	r0, r2
 8004166:	f000 faea 	bl	800473e <TIM_ITRx_SetConfig>
      break;
 800416a:	e003      	b.n	8004174 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	73fb      	strb	r3, [r7, #15]
      break;
 8004170:	e000      	b.n	8004174 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004172:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2201      	movs	r2, #1
 8004178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2200      	movs	r2, #0
 8004180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004184:	7bfb      	ldrb	r3, [r7, #15]
}
 8004186:	4618      	mov	r0, r3
 8004188:	3710      	adds	r7, #16
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}

0800418e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800418e:	b480      	push	{r7}
 8004190:	b083      	sub	sp, #12
 8004192:	af00      	add	r7, sp, #0
 8004194:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004196:	bf00      	nop
 8004198:	370c      	adds	r7, #12
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr

080041a2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80041a2:	b480      	push	{r7}
 80041a4:	b083      	sub	sp, #12
 80041a6:	af00      	add	r7, sp, #0
 80041a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80041aa:	bf00      	nop
 80041ac:	370c      	adds	r7, #12
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr

080041b6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80041b6:	b480      	push	{r7}
 80041b8:	b083      	sub	sp, #12
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80041be:	bf00      	nop
 80041c0:	370c      	adds	r7, #12
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr

080041ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80041ca:	b480      	push	{r7}
 80041cc:	b083      	sub	sp, #12
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80041d2:	bf00      	nop
 80041d4:	370c      	adds	r7, #12
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr
	...

080041e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b085      	sub	sp, #20
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
 80041e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	4a40      	ldr	r2, [pc, #256]	; (80042f4 <TIM_Base_SetConfig+0x114>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d013      	beq.n	8004220 <TIM_Base_SetConfig+0x40>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041fe:	d00f      	beq.n	8004220 <TIM_Base_SetConfig+0x40>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	4a3d      	ldr	r2, [pc, #244]	; (80042f8 <TIM_Base_SetConfig+0x118>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d00b      	beq.n	8004220 <TIM_Base_SetConfig+0x40>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	4a3c      	ldr	r2, [pc, #240]	; (80042fc <TIM_Base_SetConfig+0x11c>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d007      	beq.n	8004220 <TIM_Base_SetConfig+0x40>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	4a3b      	ldr	r2, [pc, #236]	; (8004300 <TIM_Base_SetConfig+0x120>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d003      	beq.n	8004220 <TIM_Base_SetConfig+0x40>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	4a3a      	ldr	r2, [pc, #232]	; (8004304 <TIM_Base_SetConfig+0x124>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d108      	bne.n	8004232 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004226:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	68fa      	ldr	r2, [r7, #12]
 800422e:	4313      	orrs	r3, r2
 8004230:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	4a2f      	ldr	r2, [pc, #188]	; (80042f4 <TIM_Base_SetConfig+0x114>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d02b      	beq.n	8004292 <TIM_Base_SetConfig+0xb2>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004240:	d027      	beq.n	8004292 <TIM_Base_SetConfig+0xb2>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	4a2c      	ldr	r2, [pc, #176]	; (80042f8 <TIM_Base_SetConfig+0x118>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d023      	beq.n	8004292 <TIM_Base_SetConfig+0xb2>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	4a2b      	ldr	r2, [pc, #172]	; (80042fc <TIM_Base_SetConfig+0x11c>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d01f      	beq.n	8004292 <TIM_Base_SetConfig+0xb2>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	4a2a      	ldr	r2, [pc, #168]	; (8004300 <TIM_Base_SetConfig+0x120>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d01b      	beq.n	8004292 <TIM_Base_SetConfig+0xb2>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	4a29      	ldr	r2, [pc, #164]	; (8004304 <TIM_Base_SetConfig+0x124>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d017      	beq.n	8004292 <TIM_Base_SetConfig+0xb2>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	4a28      	ldr	r2, [pc, #160]	; (8004308 <TIM_Base_SetConfig+0x128>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d013      	beq.n	8004292 <TIM_Base_SetConfig+0xb2>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	4a27      	ldr	r2, [pc, #156]	; (800430c <TIM_Base_SetConfig+0x12c>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d00f      	beq.n	8004292 <TIM_Base_SetConfig+0xb2>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	4a26      	ldr	r2, [pc, #152]	; (8004310 <TIM_Base_SetConfig+0x130>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d00b      	beq.n	8004292 <TIM_Base_SetConfig+0xb2>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	4a25      	ldr	r2, [pc, #148]	; (8004314 <TIM_Base_SetConfig+0x134>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d007      	beq.n	8004292 <TIM_Base_SetConfig+0xb2>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4a24      	ldr	r2, [pc, #144]	; (8004318 <TIM_Base_SetConfig+0x138>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d003      	beq.n	8004292 <TIM_Base_SetConfig+0xb2>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	4a23      	ldr	r2, [pc, #140]	; (800431c <TIM_Base_SetConfig+0x13c>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d108      	bne.n	80042a4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004298:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	68db      	ldr	r3, [r3, #12]
 800429e:	68fa      	ldr	r2, [r7, #12]
 80042a0:	4313      	orrs	r3, r2
 80042a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	695b      	ldr	r3, [r3, #20]
 80042ae:	4313      	orrs	r3, r2
 80042b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	68fa      	ldr	r2, [r7, #12]
 80042b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	689a      	ldr	r2, [r3, #8]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	4a0a      	ldr	r2, [pc, #40]	; (80042f4 <TIM_Base_SetConfig+0x114>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d003      	beq.n	80042d8 <TIM_Base_SetConfig+0xf8>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	4a0c      	ldr	r2, [pc, #48]	; (8004304 <TIM_Base_SetConfig+0x124>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d103      	bne.n	80042e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	691a      	ldr	r2, [r3, #16]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2201      	movs	r2, #1
 80042e4:	615a      	str	r2, [r3, #20]
}
 80042e6:	bf00      	nop
 80042e8:	3714      	adds	r7, #20
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr
 80042f2:	bf00      	nop
 80042f4:	40010000 	.word	0x40010000
 80042f8:	40000400 	.word	0x40000400
 80042fc:	40000800 	.word	0x40000800
 8004300:	40000c00 	.word	0x40000c00
 8004304:	40010400 	.word	0x40010400
 8004308:	40014000 	.word	0x40014000
 800430c:	40014400 	.word	0x40014400
 8004310:	40014800 	.word	0x40014800
 8004314:	40001800 	.word	0x40001800
 8004318:	40001c00 	.word	0x40001c00
 800431c:	40002000 	.word	0x40002000

08004320 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004320:	b480      	push	{r7}
 8004322:	b087      	sub	sp, #28
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6a1b      	ldr	r3, [r3, #32]
 800432e:	f023 0201 	bic.w	r2, r3, #1
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6a1b      	ldr	r3, [r3, #32]
 800433a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	699b      	ldr	r3, [r3, #24]
 8004346:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800434e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f023 0303 	bic.w	r3, r3, #3
 8004356:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	68fa      	ldr	r2, [r7, #12]
 800435e:	4313      	orrs	r3, r2
 8004360:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	f023 0302 	bic.w	r3, r3, #2
 8004368:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	697a      	ldr	r2, [r7, #20]
 8004370:	4313      	orrs	r3, r2
 8004372:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	4a20      	ldr	r2, [pc, #128]	; (80043f8 <TIM_OC1_SetConfig+0xd8>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d003      	beq.n	8004384 <TIM_OC1_SetConfig+0x64>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	4a1f      	ldr	r2, [pc, #124]	; (80043fc <TIM_OC1_SetConfig+0xdc>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d10c      	bne.n	800439e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	f023 0308 	bic.w	r3, r3, #8
 800438a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	68db      	ldr	r3, [r3, #12]
 8004390:	697a      	ldr	r2, [r7, #20]
 8004392:	4313      	orrs	r3, r2
 8004394:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	f023 0304 	bic.w	r3, r3, #4
 800439c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	4a15      	ldr	r2, [pc, #84]	; (80043f8 <TIM_OC1_SetConfig+0xd8>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d003      	beq.n	80043ae <TIM_OC1_SetConfig+0x8e>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	4a14      	ldr	r2, [pc, #80]	; (80043fc <TIM_OC1_SetConfig+0xdc>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d111      	bne.n	80043d2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80043bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	695b      	ldr	r3, [r3, #20]
 80043c2:	693a      	ldr	r2, [r7, #16]
 80043c4:	4313      	orrs	r3, r2
 80043c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	699b      	ldr	r3, [r3, #24]
 80043cc:	693a      	ldr	r2, [r7, #16]
 80043ce:	4313      	orrs	r3, r2
 80043d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	693a      	ldr	r2, [r7, #16]
 80043d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	68fa      	ldr	r2, [r7, #12]
 80043dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	685a      	ldr	r2, [r3, #4]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	697a      	ldr	r2, [r7, #20]
 80043ea:	621a      	str	r2, [r3, #32]
}
 80043ec:	bf00      	nop
 80043ee:	371c      	adds	r7, #28
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr
 80043f8:	40010000 	.word	0x40010000
 80043fc:	40010400 	.word	0x40010400

08004400 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004400:	b480      	push	{r7}
 8004402:	b087      	sub	sp, #28
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
 8004408:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6a1b      	ldr	r3, [r3, #32]
 800440e:	f023 0210 	bic.w	r2, r3, #16
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6a1b      	ldr	r3, [r3, #32]
 800441a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	699b      	ldr	r3, [r3, #24]
 8004426:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800442e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004436:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	021b      	lsls	r3, r3, #8
 800443e:	68fa      	ldr	r2, [r7, #12]
 8004440:	4313      	orrs	r3, r2
 8004442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	f023 0320 	bic.w	r3, r3, #32
 800444a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	011b      	lsls	r3, r3, #4
 8004452:	697a      	ldr	r2, [r7, #20]
 8004454:	4313      	orrs	r3, r2
 8004456:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	4a22      	ldr	r2, [pc, #136]	; (80044e4 <TIM_OC2_SetConfig+0xe4>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d003      	beq.n	8004468 <TIM_OC2_SetConfig+0x68>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	4a21      	ldr	r2, [pc, #132]	; (80044e8 <TIM_OC2_SetConfig+0xe8>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d10d      	bne.n	8004484 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800446e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	68db      	ldr	r3, [r3, #12]
 8004474:	011b      	lsls	r3, r3, #4
 8004476:	697a      	ldr	r2, [r7, #20]
 8004478:	4313      	orrs	r3, r2
 800447a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004482:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	4a17      	ldr	r2, [pc, #92]	; (80044e4 <TIM_OC2_SetConfig+0xe4>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d003      	beq.n	8004494 <TIM_OC2_SetConfig+0x94>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	4a16      	ldr	r2, [pc, #88]	; (80044e8 <TIM_OC2_SetConfig+0xe8>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d113      	bne.n	80044bc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800449a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80044a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	695b      	ldr	r3, [r3, #20]
 80044a8:	009b      	lsls	r3, r3, #2
 80044aa:	693a      	ldr	r2, [r7, #16]
 80044ac:	4313      	orrs	r3, r2
 80044ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	699b      	ldr	r3, [r3, #24]
 80044b4:	009b      	lsls	r3, r3, #2
 80044b6:	693a      	ldr	r2, [r7, #16]
 80044b8:	4313      	orrs	r3, r2
 80044ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	693a      	ldr	r2, [r7, #16]
 80044c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	68fa      	ldr	r2, [r7, #12]
 80044c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	685a      	ldr	r2, [r3, #4]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	697a      	ldr	r2, [r7, #20]
 80044d4:	621a      	str	r2, [r3, #32]
}
 80044d6:	bf00      	nop
 80044d8:	371c      	adds	r7, #28
 80044da:	46bd      	mov	sp, r7
 80044dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e0:	4770      	bx	lr
 80044e2:	bf00      	nop
 80044e4:	40010000 	.word	0x40010000
 80044e8:	40010400 	.word	0x40010400

080044ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b087      	sub	sp, #28
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6a1b      	ldr	r3, [r3, #32]
 80044fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6a1b      	ldr	r3, [r3, #32]
 8004506:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	69db      	ldr	r3, [r3, #28]
 8004512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800451a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f023 0303 	bic.w	r3, r3, #3
 8004522:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	68fa      	ldr	r2, [r7, #12]
 800452a:	4313      	orrs	r3, r2
 800452c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004534:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	021b      	lsls	r3, r3, #8
 800453c:	697a      	ldr	r2, [r7, #20]
 800453e:	4313      	orrs	r3, r2
 8004540:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	4a21      	ldr	r2, [pc, #132]	; (80045cc <TIM_OC3_SetConfig+0xe0>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d003      	beq.n	8004552 <TIM_OC3_SetConfig+0x66>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	4a20      	ldr	r2, [pc, #128]	; (80045d0 <TIM_OC3_SetConfig+0xe4>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d10d      	bne.n	800456e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004558:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	68db      	ldr	r3, [r3, #12]
 800455e:	021b      	lsls	r3, r3, #8
 8004560:	697a      	ldr	r2, [r7, #20]
 8004562:	4313      	orrs	r3, r2
 8004564:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800456c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	4a16      	ldr	r2, [pc, #88]	; (80045cc <TIM_OC3_SetConfig+0xe0>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d003      	beq.n	800457e <TIM_OC3_SetConfig+0x92>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	4a15      	ldr	r2, [pc, #84]	; (80045d0 <TIM_OC3_SetConfig+0xe4>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d113      	bne.n	80045a6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004584:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800458c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	695b      	ldr	r3, [r3, #20]
 8004592:	011b      	lsls	r3, r3, #4
 8004594:	693a      	ldr	r2, [r7, #16]
 8004596:	4313      	orrs	r3, r2
 8004598:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	699b      	ldr	r3, [r3, #24]
 800459e:	011b      	lsls	r3, r3, #4
 80045a0:	693a      	ldr	r2, [r7, #16]
 80045a2:	4313      	orrs	r3, r2
 80045a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	693a      	ldr	r2, [r7, #16]
 80045aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	68fa      	ldr	r2, [r7, #12]
 80045b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	685a      	ldr	r2, [r3, #4]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	697a      	ldr	r2, [r7, #20]
 80045be:	621a      	str	r2, [r3, #32]
}
 80045c0:	bf00      	nop
 80045c2:	371c      	adds	r7, #28
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr
 80045cc:	40010000 	.word	0x40010000
 80045d0:	40010400 	.word	0x40010400

080045d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b087      	sub	sp, #28
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6a1b      	ldr	r3, [r3, #32]
 80045e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6a1b      	ldr	r3, [r3, #32]
 80045ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	69db      	ldr	r3, [r3, #28]
 80045fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004602:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800460a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	021b      	lsls	r3, r3, #8
 8004612:	68fa      	ldr	r2, [r7, #12]
 8004614:	4313      	orrs	r3, r2
 8004616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800461e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	031b      	lsls	r3, r3, #12
 8004626:	693a      	ldr	r2, [r7, #16]
 8004628:	4313      	orrs	r3, r2
 800462a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	4a12      	ldr	r2, [pc, #72]	; (8004678 <TIM_OC4_SetConfig+0xa4>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d003      	beq.n	800463c <TIM_OC4_SetConfig+0x68>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	4a11      	ldr	r2, [pc, #68]	; (800467c <TIM_OC4_SetConfig+0xa8>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d109      	bne.n	8004650 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004642:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	695b      	ldr	r3, [r3, #20]
 8004648:	019b      	lsls	r3, r3, #6
 800464a:	697a      	ldr	r2, [r7, #20]
 800464c:	4313      	orrs	r3, r2
 800464e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	697a      	ldr	r2, [r7, #20]
 8004654:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	68fa      	ldr	r2, [r7, #12]
 800465a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	685a      	ldr	r2, [r3, #4]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	693a      	ldr	r2, [r7, #16]
 8004668:	621a      	str	r2, [r3, #32]
}
 800466a:	bf00      	nop
 800466c:	371c      	adds	r7, #28
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr
 8004676:	bf00      	nop
 8004678:	40010000 	.word	0x40010000
 800467c:	40010400 	.word	0x40010400

08004680 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004680:	b480      	push	{r7}
 8004682:	b087      	sub	sp, #28
 8004684:	af00      	add	r7, sp, #0
 8004686:	60f8      	str	r0, [r7, #12]
 8004688:	60b9      	str	r1, [r7, #8]
 800468a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	6a1b      	ldr	r3, [r3, #32]
 8004690:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	6a1b      	ldr	r3, [r3, #32]
 8004696:	f023 0201 	bic.w	r2, r3, #1
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	699b      	ldr	r3, [r3, #24]
 80046a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80046aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	011b      	lsls	r3, r3, #4
 80046b0:	693a      	ldr	r2, [r7, #16]
 80046b2:	4313      	orrs	r3, r2
 80046b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	f023 030a 	bic.w	r3, r3, #10
 80046bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80046be:	697a      	ldr	r2, [r7, #20]
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	4313      	orrs	r3, r2
 80046c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	693a      	ldr	r2, [r7, #16]
 80046ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	697a      	ldr	r2, [r7, #20]
 80046d0:	621a      	str	r2, [r3, #32]
}
 80046d2:	bf00      	nop
 80046d4:	371c      	adds	r7, #28
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr

080046de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046de:	b480      	push	{r7}
 80046e0:	b087      	sub	sp, #28
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	60f8      	str	r0, [r7, #12]
 80046e6:	60b9      	str	r1, [r7, #8]
 80046e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	6a1b      	ldr	r3, [r3, #32]
 80046ee:	f023 0210 	bic.w	r2, r3, #16
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	699b      	ldr	r3, [r3, #24]
 80046fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	6a1b      	ldr	r3, [r3, #32]
 8004700:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004708:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	031b      	lsls	r3, r3, #12
 800470e:	697a      	ldr	r2, [r7, #20]
 8004710:	4313      	orrs	r3, r2
 8004712:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800471a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	011b      	lsls	r3, r3, #4
 8004720:	693a      	ldr	r2, [r7, #16]
 8004722:	4313      	orrs	r3, r2
 8004724:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	697a      	ldr	r2, [r7, #20]
 800472a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	693a      	ldr	r2, [r7, #16]
 8004730:	621a      	str	r2, [r3, #32]
}
 8004732:	bf00      	nop
 8004734:	371c      	adds	r7, #28
 8004736:	46bd      	mov	sp, r7
 8004738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473c:	4770      	bx	lr

0800473e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800473e:	b480      	push	{r7}
 8004740:	b085      	sub	sp, #20
 8004742:	af00      	add	r7, sp, #0
 8004744:	6078      	str	r0, [r7, #4]
 8004746:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004754:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004756:	683a      	ldr	r2, [r7, #0]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	4313      	orrs	r3, r2
 800475c:	f043 0307 	orr.w	r3, r3, #7
 8004760:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	68fa      	ldr	r2, [r7, #12]
 8004766:	609a      	str	r2, [r3, #8]
}
 8004768:	bf00      	nop
 800476a:	3714      	adds	r7, #20
 800476c:	46bd      	mov	sp, r7
 800476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004772:	4770      	bx	lr

08004774 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004774:	b480      	push	{r7}
 8004776:	b087      	sub	sp, #28
 8004778:	af00      	add	r7, sp, #0
 800477a:	60f8      	str	r0, [r7, #12]
 800477c:	60b9      	str	r1, [r7, #8]
 800477e:	607a      	str	r2, [r7, #4]
 8004780:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800478e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	021a      	lsls	r2, r3, #8
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	431a      	orrs	r2, r3
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	4313      	orrs	r3, r2
 800479c:	697a      	ldr	r2, [r7, #20]
 800479e:	4313      	orrs	r3, r2
 80047a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	697a      	ldr	r2, [r7, #20]
 80047a6:	609a      	str	r2, [r3, #8]
}
 80047a8:	bf00      	nop
 80047aa:	371c      	adds	r7, #28
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr

080047b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b087      	sub	sp, #28
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	60f8      	str	r0, [r7, #12]
 80047bc:	60b9      	str	r1, [r7, #8]
 80047be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	f003 031f 	and.w	r3, r3, #31
 80047c6:	2201      	movs	r2, #1
 80047c8:	fa02 f303 	lsl.w	r3, r2, r3
 80047cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	6a1a      	ldr	r2, [r3, #32]
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	43db      	mvns	r3, r3
 80047d6:	401a      	ands	r2, r3
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	6a1a      	ldr	r2, [r3, #32]
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	f003 031f 	and.w	r3, r3, #31
 80047e6:	6879      	ldr	r1, [r7, #4]
 80047e8:	fa01 f303 	lsl.w	r3, r1, r3
 80047ec:	431a      	orrs	r2, r3
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	621a      	str	r2, [r3, #32]
}
 80047f2:	bf00      	nop
 80047f4:	371c      	adds	r7, #28
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr
	...

08004800 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004800:	b480      	push	{r7}
 8004802:	b085      	sub	sp, #20
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004810:	2b01      	cmp	r3, #1
 8004812:	d101      	bne.n	8004818 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004814:	2302      	movs	r3, #2
 8004816:	e05a      	b.n	80048ce <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2201      	movs	r2, #1
 800481c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2202      	movs	r2, #2
 8004824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800483e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	68fa      	ldr	r2, [r7, #12]
 8004846:	4313      	orrs	r3, r2
 8004848:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	68fa      	ldr	r2, [r7, #12]
 8004850:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a21      	ldr	r2, [pc, #132]	; (80048dc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d022      	beq.n	80048a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004864:	d01d      	beq.n	80048a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a1d      	ldr	r2, [pc, #116]	; (80048e0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d018      	beq.n	80048a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a1b      	ldr	r2, [pc, #108]	; (80048e4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d013      	beq.n	80048a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a1a      	ldr	r2, [pc, #104]	; (80048e8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d00e      	beq.n	80048a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a18      	ldr	r2, [pc, #96]	; (80048ec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d009      	beq.n	80048a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a17      	ldr	r2, [pc, #92]	; (80048f0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d004      	beq.n	80048a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a15      	ldr	r2, [pc, #84]	; (80048f4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d10c      	bne.n	80048bc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	68ba      	ldr	r2, [r7, #8]
 80048b0:	4313      	orrs	r3, r2
 80048b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	68ba      	ldr	r2, [r7, #8]
 80048ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2201      	movs	r2, #1
 80048c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2200      	movs	r2, #0
 80048c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80048cc:	2300      	movs	r3, #0
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3714      	adds	r7, #20
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr
 80048da:	bf00      	nop
 80048dc:	40010000 	.word	0x40010000
 80048e0:	40000400 	.word	0x40000400
 80048e4:	40000800 	.word	0x40000800
 80048e8:	40000c00 	.word	0x40000c00
 80048ec:	40010400 	.word	0x40010400
 80048f0:	40014000 	.word	0x40014000
 80048f4:	40001800 	.word	0x40001800

080048f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b083      	sub	sp, #12
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004900:	bf00      	nop
 8004902:	370c      	adds	r7, #12
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr

0800490c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800490c:	b480      	push	{r7}
 800490e:	b083      	sub	sp, #12
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004914:	bf00      	nop
 8004916:	370c      	adds	r7, #12
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr

08004920 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b082      	sub	sp, #8
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d101      	bne.n	8004932 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	e03f      	b.n	80049b2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004938:	b2db      	uxtb	r3, r3
 800493a:	2b00      	cmp	r3, #0
 800493c:	d106      	bne.n	800494c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2200      	movs	r2, #0
 8004942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f7fd f83e 	bl	80019c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2224      	movs	r2, #36	; 0x24
 8004950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	68da      	ldr	r2, [r3, #12]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004962:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f000 fc7b 	bl	8005260 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	691a      	ldr	r2, [r3, #16]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004978:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	695a      	ldr	r2, [r3, #20]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004988:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	68da      	ldr	r2, [r3, #12]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004998:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2200      	movs	r2, #0
 800499e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2220      	movs	r2, #32
 80049a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2220      	movs	r2, #32
 80049ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80049b0:	2300      	movs	r3, #0
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	3708      	adds	r7, #8
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}
	...

080049bc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b0ba      	sub	sp, #232	; 0xe8
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	695b      	ldr	r3, [r3, #20]
 80049de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80049e2:	2300      	movs	r3, #0
 80049e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80049e8:	2300      	movs	r3, #0
 80049ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80049ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049f2:	f003 030f 	and.w	r3, r3, #15
 80049f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80049fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d10f      	bne.n	8004a22 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a06:	f003 0320 	and.w	r3, r3, #32
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d009      	beq.n	8004a22 <HAL_UART_IRQHandler+0x66>
 8004a0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a12:	f003 0320 	and.w	r3, r3, #32
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d003      	beq.n	8004a22 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f000 fb65 	bl	80050ea <UART_Receive_IT>
      return;
 8004a20:	e256      	b.n	8004ed0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004a22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	f000 80de 	beq.w	8004be8 <HAL_UART_IRQHandler+0x22c>
 8004a2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a30:	f003 0301 	and.w	r3, r3, #1
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d106      	bne.n	8004a46 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004a38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a3c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	f000 80d1 	beq.w	8004be8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004a46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a4a:	f003 0301 	and.w	r3, r3, #1
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d00b      	beq.n	8004a6a <HAL_UART_IRQHandler+0xae>
 8004a52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d005      	beq.n	8004a6a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a62:	f043 0201 	orr.w	r2, r3, #1
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a6e:	f003 0304 	and.w	r3, r3, #4
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d00b      	beq.n	8004a8e <HAL_UART_IRQHandler+0xd2>
 8004a76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a7a:	f003 0301 	and.w	r3, r3, #1
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d005      	beq.n	8004a8e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a86:	f043 0202 	orr.w	r2, r3, #2
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a92:	f003 0302 	and.w	r3, r3, #2
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d00b      	beq.n	8004ab2 <HAL_UART_IRQHandler+0xf6>
 8004a9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a9e:	f003 0301 	and.w	r3, r3, #1
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d005      	beq.n	8004ab2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aaa:	f043 0204 	orr.w	r2, r3, #4
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004ab2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ab6:	f003 0308 	and.w	r3, r3, #8
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d011      	beq.n	8004ae2 <HAL_UART_IRQHandler+0x126>
 8004abe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ac2:	f003 0320 	and.w	r3, r3, #32
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d105      	bne.n	8004ad6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004aca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ace:	f003 0301 	and.w	r3, r3, #1
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d005      	beq.n	8004ae2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ada:	f043 0208 	orr.w	r2, r3, #8
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	f000 81ed 	beq.w	8004ec6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004aec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004af0:	f003 0320 	and.w	r3, r3, #32
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d008      	beq.n	8004b0a <HAL_UART_IRQHandler+0x14e>
 8004af8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004afc:	f003 0320 	and.w	r3, r3, #32
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d002      	beq.n	8004b0a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f000 faf0 	bl	80050ea <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	695b      	ldr	r3, [r3, #20]
 8004b10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b14:	2b40      	cmp	r3, #64	; 0x40
 8004b16:	bf0c      	ite	eq
 8004b18:	2301      	moveq	r3, #1
 8004b1a:	2300      	movne	r3, #0
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b26:	f003 0308 	and.w	r3, r3, #8
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d103      	bne.n	8004b36 <HAL_UART_IRQHandler+0x17a>
 8004b2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d04f      	beq.n	8004bd6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f000 f9f8 	bl	8004f2c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	695b      	ldr	r3, [r3, #20]
 8004b42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b46:	2b40      	cmp	r3, #64	; 0x40
 8004b48:	d141      	bne.n	8004bce <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	3314      	adds	r3, #20
 8004b50:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b54:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004b58:	e853 3f00 	ldrex	r3, [r3]
 8004b5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004b60:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004b64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b68:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	3314      	adds	r3, #20
 8004b72:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004b76:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004b7a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b7e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004b82:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004b86:	e841 2300 	strex	r3, r2, [r1]
 8004b8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004b8e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d1d9      	bne.n	8004b4a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d013      	beq.n	8004bc6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ba2:	4a7d      	ldr	r2, [pc, #500]	; (8004d98 <HAL_UART_IRQHandler+0x3dc>)
 8004ba4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004baa:	4618      	mov	r0, r3
 8004bac:	f7fd fe1c 	bl	80027e8 <HAL_DMA_Abort_IT>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d016      	beq.n	8004be4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bbc:	687a      	ldr	r2, [r7, #4]
 8004bbe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004bc0:	4610      	mov	r0, r2
 8004bc2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bc4:	e00e      	b.n	8004be4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f000 f99a 	bl	8004f00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bcc:	e00a      	b.n	8004be4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f000 f996 	bl	8004f00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bd4:	e006      	b.n	8004be4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f000 f992 	bl	8004f00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2200      	movs	r2, #0
 8004be0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004be2:	e170      	b.n	8004ec6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004be4:	bf00      	nop
    return;
 8004be6:	e16e      	b.n	8004ec6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	f040 814a 	bne.w	8004e86 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004bf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bf6:	f003 0310 	and.w	r3, r3, #16
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	f000 8143 	beq.w	8004e86 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004c00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c04:	f003 0310 	and.w	r3, r3, #16
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	f000 813c 	beq.w	8004e86 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c0e:	2300      	movs	r3, #0
 8004c10:	60bb      	str	r3, [r7, #8]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	60bb      	str	r3, [r7, #8]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	60bb      	str	r3, [r7, #8]
 8004c22:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	695b      	ldr	r3, [r3, #20]
 8004c2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c2e:	2b40      	cmp	r3, #64	; 0x40
 8004c30:	f040 80b4 	bne.w	8004d9c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004c40:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	f000 8140 	beq.w	8004eca <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004c4e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004c52:	429a      	cmp	r2, r3
 8004c54:	f080 8139 	bcs.w	8004eca <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004c5e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c64:	69db      	ldr	r3, [r3, #28]
 8004c66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c6a:	f000 8088 	beq.w	8004d7e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	330c      	adds	r3, #12
 8004c74:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c78:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004c7c:	e853 3f00 	ldrex	r3, [r3]
 8004c80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004c84:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004c88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c8c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	330c      	adds	r3, #12
 8004c96:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004c9a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004c9e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ca2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004ca6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004caa:	e841 2300 	strex	r3, r2, [r1]
 8004cae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004cb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d1d9      	bne.n	8004c6e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	3314      	adds	r3, #20
 8004cc0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004cc4:	e853 3f00 	ldrex	r3, [r3]
 8004cc8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004cca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ccc:	f023 0301 	bic.w	r3, r3, #1
 8004cd0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	3314      	adds	r3, #20
 8004cda:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004cde:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004ce2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ce4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004ce6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004cea:	e841 2300 	strex	r3, r2, [r1]
 8004cee:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004cf0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d1e1      	bne.n	8004cba <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	3314      	adds	r3, #20
 8004cfc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cfe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d00:	e853 3f00 	ldrex	r3, [r3]
 8004d04:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004d06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	3314      	adds	r3, #20
 8004d16:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004d1a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004d1c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d1e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004d20:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004d22:	e841 2300 	strex	r3, r2, [r1]
 8004d26:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004d28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d1e3      	bne.n	8004cf6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2220      	movs	r2, #32
 8004d32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	330c      	adds	r3, #12
 8004d42:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d46:	e853 3f00 	ldrex	r3, [r3]
 8004d4a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004d4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d4e:	f023 0310 	bic.w	r3, r3, #16
 8004d52:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	330c      	adds	r3, #12
 8004d5c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004d60:	65ba      	str	r2, [r7, #88]	; 0x58
 8004d62:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d64:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004d66:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004d68:	e841 2300 	strex	r3, r2, [r1]
 8004d6c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004d6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d1e3      	bne.n	8004d3c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f7fd fcc5 	bl	8002708 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	1ad3      	subs	r3, r2, r3
 8004d8a:	b29b      	uxth	r3, r3
 8004d8c:	4619      	mov	r1, r3
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f000 f8c0 	bl	8004f14 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004d94:	e099      	b.n	8004eca <HAL_UART_IRQHandler+0x50e>
 8004d96:	bf00      	nop
 8004d98:	08004ff3 	.word	0x08004ff3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	1ad3      	subs	r3, r2, r3
 8004da8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004db0:	b29b      	uxth	r3, r3
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	f000 808b 	beq.w	8004ece <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004db8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	f000 8086 	beq.w	8004ece <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	330c      	adds	r3, #12
 8004dc8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dcc:	e853 3f00 	ldrex	r3, [r3]
 8004dd0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004dd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dd4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004dd8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	330c      	adds	r3, #12
 8004de2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004de6:	647a      	str	r2, [r7, #68]	; 0x44
 8004de8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004dec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004dee:	e841 2300 	strex	r3, r2, [r1]
 8004df2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004df4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d1e3      	bne.n	8004dc2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	3314      	adds	r3, #20
 8004e00:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e04:	e853 3f00 	ldrex	r3, [r3]
 8004e08:	623b      	str	r3, [r7, #32]
   return(result);
 8004e0a:	6a3b      	ldr	r3, [r7, #32]
 8004e0c:	f023 0301 	bic.w	r3, r3, #1
 8004e10:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	3314      	adds	r3, #20
 8004e1a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004e1e:	633a      	str	r2, [r7, #48]	; 0x30
 8004e20:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e22:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e26:	e841 2300 	strex	r3, r2, [r1]
 8004e2a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d1e3      	bne.n	8004dfa <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2220      	movs	r2, #32
 8004e36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	330c      	adds	r3, #12
 8004e46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	e853 3f00 	ldrex	r3, [r3]
 8004e4e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	f023 0310 	bic.w	r3, r3, #16
 8004e56:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	330c      	adds	r3, #12
 8004e60:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004e64:	61fa      	str	r2, [r7, #28]
 8004e66:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e68:	69b9      	ldr	r1, [r7, #24]
 8004e6a:	69fa      	ldr	r2, [r7, #28]
 8004e6c:	e841 2300 	strex	r3, r2, [r1]
 8004e70:	617b      	str	r3, [r7, #20]
   return(result);
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d1e3      	bne.n	8004e40 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004e78:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004e7c:	4619      	mov	r1, r3
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f000 f848 	bl	8004f14 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004e84:	e023      	b.n	8004ece <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004e86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d009      	beq.n	8004ea6 <HAL_UART_IRQHandler+0x4ea>
 8004e92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d003      	beq.n	8004ea6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f000 f8bb 	bl	800501a <UART_Transmit_IT>
    return;
 8004ea4:	e014      	b.n	8004ed0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004ea6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004eaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d00e      	beq.n	8004ed0 <HAL_UART_IRQHandler+0x514>
 8004eb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004eb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d008      	beq.n	8004ed0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f000 f8fb 	bl	80050ba <UART_EndTransmit_IT>
    return;
 8004ec4:	e004      	b.n	8004ed0 <HAL_UART_IRQHandler+0x514>
    return;
 8004ec6:	bf00      	nop
 8004ec8:	e002      	b.n	8004ed0 <HAL_UART_IRQHandler+0x514>
      return;
 8004eca:	bf00      	nop
 8004ecc:	e000      	b.n	8004ed0 <HAL_UART_IRQHandler+0x514>
      return;
 8004ece:	bf00      	nop
  }
}
 8004ed0:	37e8      	adds	r7, #232	; 0xe8
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}
 8004ed6:	bf00      	nop

08004ed8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b083      	sub	sp, #12
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004ee0:	bf00      	nop
 8004ee2:	370c      	adds	r7, #12
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eea:	4770      	bx	lr

08004eec <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b083      	sub	sp, #12
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004ef4:	bf00      	nop
 8004ef6:	370c      	adds	r7, #12
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efe:	4770      	bx	lr

08004f00 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b083      	sub	sp, #12
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004f08:	bf00      	nop
 8004f0a:	370c      	adds	r7, #12
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f12:	4770      	bx	lr

08004f14 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b083      	sub	sp, #12
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	460b      	mov	r3, r1
 8004f1e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004f20:	bf00      	nop
 8004f22:	370c      	adds	r7, #12
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr

08004f2c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b095      	sub	sp, #84	; 0x54
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	330c      	adds	r3, #12
 8004f3a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f3e:	e853 3f00 	ldrex	r3, [r3]
 8004f42:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f46:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	330c      	adds	r3, #12
 8004f52:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004f54:	643a      	str	r2, [r7, #64]	; 0x40
 8004f56:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f58:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004f5a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004f5c:	e841 2300 	strex	r3, r2, [r1]
 8004f60:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d1e5      	bne.n	8004f34 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	3314      	adds	r3, #20
 8004f6e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f70:	6a3b      	ldr	r3, [r7, #32]
 8004f72:	e853 3f00 	ldrex	r3, [r3]
 8004f76:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f78:	69fb      	ldr	r3, [r7, #28]
 8004f7a:	f023 0301 	bic.w	r3, r3, #1
 8004f7e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	3314      	adds	r3, #20
 8004f86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f88:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f8a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f90:	e841 2300 	strex	r3, r2, [r1]
 8004f94:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d1e5      	bne.n	8004f68 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d119      	bne.n	8004fd8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	330c      	adds	r3, #12
 8004faa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	e853 3f00 	ldrex	r3, [r3]
 8004fb2:	60bb      	str	r3, [r7, #8]
   return(result);
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	f023 0310 	bic.w	r3, r3, #16
 8004fba:	647b      	str	r3, [r7, #68]	; 0x44
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	330c      	adds	r3, #12
 8004fc2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004fc4:	61ba      	str	r2, [r7, #24]
 8004fc6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fc8:	6979      	ldr	r1, [r7, #20]
 8004fca:	69ba      	ldr	r2, [r7, #24]
 8004fcc:	e841 2300 	strex	r3, r2, [r1]
 8004fd0:	613b      	str	r3, [r7, #16]
   return(result);
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d1e5      	bne.n	8004fa4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2220      	movs	r2, #32
 8004fdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004fe6:	bf00      	nop
 8004fe8:	3754      	adds	r7, #84	; 0x54
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr

08004ff2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004ff2:	b580      	push	{r7, lr}
 8004ff4:	b084      	sub	sp, #16
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ffe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2200      	movs	r2, #0
 8005004:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2200      	movs	r2, #0
 800500a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800500c:	68f8      	ldr	r0, [r7, #12]
 800500e:	f7ff ff77 	bl	8004f00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005012:	bf00      	nop
 8005014:	3710      	adds	r7, #16
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}

0800501a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800501a:	b480      	push	{r7}
 800501c:	b085      	sub	sp, #20
 800501e:	af00      	add	r7, sp, #0
 8005020:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005028:	b2db      	uxtb	r3, r3
 800502a:	2b21      	cmp	r3, #33	; 0x21
 800502c:	d13e      	bne.n	80050ac <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005036:	d114      	bne.n	8005062 <UART_Transmit_IT+0x48>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	691b      	ldr	r3, [r3, #16]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d110      	bne.n	8005062 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6a1b      	ldr	r3, [r3, #32]
 8005044:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	881b      	ldrh	r3, [r3, #0]
 800504a:	461a      	mov	r2, r3
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005054:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6a1b      	ldr	r3, [r3, #32]
 800505a:	1c9a      	adds	r2, r3, #2
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	621a      	str	r2, [r3, #32]
 8005060:	e008      	b.n	8005074 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6a1b      	ldr	r3, [r3, #32]
 8005066:	1c59      	adds	r1, r3, #1
 8005068:	687a      	ldr	r2, [r7, #4]
 800506a:	6211      	str	r1, [r2, #32]
 800506c:	781a      	ldrb	r2, [r3, #0]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005078:	b29b      	uxth	r3, r3
 800507a:	3b01      	subs	r3, #1
 800507c:	b29b      	uxth	r3, r3
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	4619      	mov	r1, r3
 8005082:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005084:	2b00      	cmp	r3, #0
 8005086:	d10f      	bne.n	80050a8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	68da      	ldr	r2, [r3, #12]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005096:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	68da      	ldr	r2, [r3, #12]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050a6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80050a8:	2300      	movs	r3, #0
 80050aa:	e000      	b.n	80050ae <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80050ac:	2302      	movs	r3, #2
  }
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	3714      	adds	r7, #20
 80050b2:	46bd      	mov	sp, r7
 80050b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b8:	4770      	bx	lr

080050ba <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80050ba:	b580      	push	{r7, lr}
 80050bc:	b082      	sub	sp, #8
 80050be:	af00      	add	r7, sp, #0
 80050c0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	68da      	ldr	r2, [r3, #12]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050d0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2220      	movs	r2, #32
 80050d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f7ff fefc 	bl	8004ed8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80050e0:	2300      	movs	r3, #0
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3708      	adds	r7, #8
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}

080050ea <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80050ea:	b580      	push	{r7, lr}
 80050ec:	b08c      	sub	sp, #48	; 0x30
 80050ee:	af00      	add	r7, sp, #0
 80050f0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050f8:	b2db      	uxtb	r3, r3
 80050fa:	2b22      	cmp	r3, #34	; 0x22
 80050fc:	f040 80ab 	bne.w	8005256 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005108:	d117      	bne.n	800513a <UART_Receive_IT+0x50>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	691b      	ldr	r3, [r3, #16]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d113      	bne.n	800513a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005112:	2300      	movs	r3, #0
 8005114:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800511a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	b29b      	uxth	r3, r3
 8005124:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005128:	b29a      	uxth	r2, r3
 800512a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800512c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005132:	1c9a      	adds	r2, r3, #2
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	629a      	str	r2, [r3, #40]	; 0x28
 8005138:	e026      	b.n	8005188 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800513e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005140:	2300      	movs	r3, #0
 8005142:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800514c:	d007      	beq.n	800515e <UART_Receive_IT+0x74>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d10a      	bne.n	800516c <UART_Receive_IT+0x82>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	691b      	ldr	r3, [r3, #16]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d106      	bne.n	800516c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	b2da      	uxtb	r2, r3
 8005166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005168:	701a      	strb	r2, [r3, #0]
 800516a:	e008      	b.n	800517e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	b2db      	uxtb	r3, r3
 8005174:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005178:	b2da      	uxtb	r2, r3
 800517a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800517c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005182:	1c5a      	adds	r2, r3, #1
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800518c:	b29b      	uxth	r3, r3
 800518e:	3b01      	subs	r3, #1
 8005190:	b29b      	uxth	r3, r3
 8005192:	687a      	ldr	r2, [r7, #4]
 8005194:	4619      	mov	r1, r3
 8005196:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005198:	2b00      	cmp	r3, #0
 800519a:	d15a      	bne.n	8005252 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	68da      	ldr	r2, [r3, #12]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f022 0220 	bic.w	r2, r2, #32
 80051aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	68da      	ldr	r2, [r3, #12]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80051ba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	695a      	ldr	r2, [r3, #20]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f022 0201 	bic.w	r2, r2, #1
 80051ca:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2220      	movs	r2, #32
 80051d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051d8:	2b01      	cmp	r3, #1
 80051da:	d135      	bne.n	8005248 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2200      	movs	r2, #0
 80051e0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	330c      	adds	r3, #12
 80051e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	e853 3f00 	ldrex	r3, [r3]
 80051f0:	613b      	str	r3, [r7, #16]
   return(result);
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	f023 0310 	bic.w	r3, r3, #16
 80051f8:	627b      	str	r3, [r7, #36]	; 0x24
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	330c      	adds	r3, #12
 8005200:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005202:	623a      	str	r2, [r7, #32]
 8005204:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005206:	69f9      	ldr	r1, [r7, #28]
 8005208:	6a3a      	ldr	r2, [r7, #32]
 800520a:	e841 2300 	strex	r3, r2, [r1]
 800520e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005210:	69bb      	ldr	r3, [r7, #24]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d1e5      	bne.n	80051e2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f003 0310 	and.w	r3, r3, #16
 8005220:	2b10      	cmp	r3, #16
 8005222:	d10a      	bne.n	800523a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005224:	2300      	movs	r3, #0
 8005226:	60fb      	str	r3, [r7, #12]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	60fb      	str	r3, [r7, #12]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	60fb      	str	r3, [r7, #12]
 8005238:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800523e:	4619      	mov	r1, r3
 8005240:	6878      	ldr	r0, [r7, #4]
 8005242:	f7ff fe67 	bl	8004f14 <HAL_UARTEx_RxEventCallback>
 8005246:	e002      	b.n	800524e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005248:	6878      	ldr	r0, [r7, #4]
 800524a:	f7ff fe4f 	bl	8004eec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800524e:	2300      	movs	r3, #0
 8005250:	e002      	b.n	8005258 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005252:	2300      	movs	r3, #0
 8005254:	e000      	b.n	8005258 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005256:	2302      	movs	r3, #2
  }
}
 8005258:	4618      	mov	r0, r3
 800525a:	3730      	adds	r7, #48	; 0x30
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}

08005260 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005260:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005264:	b0c0      	sub	sp, #256	; 0x100
 8005266:	af00      	add	r7, sp, #0
 8005268:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800526c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	691b      	ldr	r3, [r3, #16]
 8005274:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800527c:	68d9      	ldr	r1, [r3, #12]
 800527e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005282:	681a      	ldr	r2, [r3, #0]
 8005284:	ea40 0301 	orr.w	r3, r0, r1
 8005288:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800528a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800528e:	689a      	ldr	r2, [r3, #8]
 8005290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005294:	691b      	ldr	r3, [r3, #16]
 8005296:	431a      	orrs	r2, r3
 8005298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800529c:	695b      	ldr	r3, [r3, #20]
 800529e:	431a      	orrs	r2, r3
 80052a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052a4:	69db      	ldr	r3, [r3, #28]
 80052a6:	4313      	orrs	r3, r2
 80052a8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80052ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	68db      	ldr	r3, [r3, #12]
 80052b4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80052b8:	f021 010c 	bic.w	r1, r1, #12
 80052bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80052c6:	430b      	orrs	r3, r1
 80052c8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80052ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	695b      	ldr	r3, [r3, #20]
 80052d2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80052d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052da:	6999      	ldr	r1, [r3, #24]
 80052dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052e0:	681a      	ldr	r2, [r3, #0]
 80052e2:	ea40 0301 	orr.w	r3, r0, r1
 80052e6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80052e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052ec:	681a      	ldr	r2, [r3, #0]
 80052ee:	4b8f      	ldr	r3, [pc, #572]	; (800552c <UART_SetConfig+0x2cc>)
 80052f0:	429a      	cmp	r2, r3
 80052f2:	d005      	beq.n	8005300 <UART_SetConfig+0xa0>
 80052f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	4b8d      	ldr	r3, [pc, #564]	; (8005530 <UART_SetConfig+0x2d0>)
 80052fc:	429a      	cmp	r2, r3
 80052fe:	d104      	bne.n	800530a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005300:	f7fd fd60 	bl	8002dc4 <HAL_RCC_GetPCLK2Freq>
 8005304:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005308:	e003      	b.n	8005312 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800530a:	f7fd fd47 	bl	8002d9c <HAL_RCC_GetPCLK1Freq>
 800530e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005312:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005316:	69db      	ldr	r3, [r3, #28]
 8005318:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800531c:	f040 810c 	bne.w	8005538 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005320:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005324:	2200      	movs	r2, #0
 8005326:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800532a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800532e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005332:	4622      	mov	r2, r4
 8005334:	462b      	mov	r3, r5
 8005336:	1891      	adds	r1, r2, r2
 8005338:	65b9      	str	r1, [r7, #88]	; 0x58
 800533a:	415b      	adcs	r3, r3
 800533c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800533e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005342:	4621      	mov	r1, r4
 8005344:	eb12 0801 	adds.w	r8, r2, r1
 8005348:	4629      	mov	r1, r5
 800534a:	eb43 0901 	adc.w	r9, r3, r1
 800534e:	f04f 0200 	mov.w	r2, #0
 8005352:	f04f 0300 	mov.w	r3, #0
 8005356:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800535a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800535e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005362:	4690      	mov	r8, r2
 8005364:	4699      	mov	r9, r3
 8005366:	4623      	mov	r3, r4
 8005368:	eb18 0303 	adds.w	r3, r8, r3
 800536c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005370:	462b      	mov	r3, r5
 8005372:	eb49 0303 	adc.w	r3, r9, r3
 8005376:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800537a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	2200      	movs	r2, #0
 8005382:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005386:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800538a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800538e:	460b      	mov	r3, r1
 8005390:	18db      	adds	r3, r3, r3
 8005392:	653b      	str	r3, [r7, #80]	; 0x50
 8005394:	4613      	mov	r3, r2
 8005396:	eb42 0303 	adc.w	r3, r2, r3
 800539a:	657b      	str	r3, [r7, #84]	; 0x54
 800539c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80053a0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80053a4:	f7fa ff8c 	bl	80002c0 <__aeabi_uldivmod>
 80053a8:	4602      	mov	r2, r0
 80053aa:	460b      	mov	r3, r1
 80053ac:	4b61      	ldr	r3, [pc, #388]	; (8005534 <UART_SetConfig+0x2d4>)
 80053ae:	fba3 2302 	umull	r2, r3, r3, r2
 80053b2:	095b      	lsrs	r3, r3, #5
 80053b4:	011c      	lsls	r4, r3, #4
 80053b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053ba:	2200      	movs	r2, #0
 80053bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80053c0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80053c4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80053c8:	4642      	mov	r2, r8
 80053ca:	464b      	mov	r3, r9
 80053cc:	1891      	adds	r1, r2, r2
 80053ce:	64b9      	str	r1, [r7, #72]	; 0x48
 80053d0:	415b      	adcs	r3, r3
 80053d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053d4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80053d8:	4641      	mov	r1, r8
 80053da:	eb12 0a01 	adds.w	sl, r2, r1
 80053de:	4649      	mov	r1, r9
 80053e0:	eb43 0b01 	adc.w	fp, r3, r1
 80053e4:	f04f 0200 	mov.w	r2, #0
 80053e8:	f04f 0300 	mov.w	r3, #0
 80053ec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80053f0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80053f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80053f8:	4692      	mov	sl, r2
 80053fa:	469b      	mov	fp, r3
 80053fc:	4643      	mov	r3, r8
 80053fe:	eb1a 0303 	adds.w	r3, sl, r3
 8005402:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005406:	464b      	mov	r3, r9
 8005408:	eb4b 0303 	adc.w	r3, fp, r3
 800540c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	2200      	movs	r2, #0
 8005418:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800541c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005420:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005424:	460b      	mov	r3, r1
 8005426:	18db      	adds	r3, r3, r3
 8005428:	643b      	str	r3, [r7, #64]	; 0x40
 800542a:	4613      	mov	r3, r2
 800542c:	eb42 0303 	adc.w	r3, r2, r3
 8005430:	647b      	str	r3, [r7, #68]	; 0x44
 8005432:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005436:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800543a:	f7fa ff41 	bl	80002c0 <__aeabi_uldivmod>
 800543e:	4602      	mov	r2, r0
 8005440:	460b      	mov	r3, r1
 8005442:	4611      	mov	r1, r2
 8005444:	4b3b      	ldr	r3, [pc, #236]	; (8005534 <UART_SetConfig+0x2d4>)
 8005446:	fba3 2301 	umull	r2, r3, r3, r1
 800544a:	095b      	lsrs	r3, r3, #5
 800544c:	2264      	movs	r2, #100	; 0x64
 800544e:	fb02 f303 	mul.w	r3, r2, r3
 8005452:	1acb      	subs	r3, r1, r3
 8005454:	00db      	lsls	r3, r3, #3
 8005456:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800545a:	4b36      	ldr	r3, [pc, #216]	; (8005534 <UART_SetConfig+0x2d4>)
 800545c:	fba3 2302 	umull	r2, r3, r3, r2
 8005460:	095b      	lsrs	r3, r3, #5
 8005462:	005b      	lsls	r3, r3, #1
 8005464:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005468:	441c      	add	r4, r3
 800546a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800546e:	2200      	movs	r2, #0
 8005470:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005474:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005478:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800547c:	4642      	mov	r2, r8
 800547e:	464b      	mov	r3, r9
 8005480:	1891      	adds	r1, r2, r2
 8005482:	63b9      	str	r1, [r7, #56]	; 0x38
 8005484:	415b      	adcs	r3, r3
 8005486:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005488:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800548c:	4641      	mov	r1, r8
 800548e:	1851      	adds	r1, r2, r1
 8005490:	6339      	str	r1, [r7, #48]	; 0x30
 8005492:	4649      	mov	r1, r9
 8005494:	414b      	adcs	r3, r1
 8005496:	637b      	str	r3, [r7, #52]	; 0x34
 8005498:	f04f 0200 	mov.w	r2, #0
 800549c:	f04f 0300 	mov.w	r3, #0
 80054a0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80054a4:	4659      	mov	r1, fp
 80054a6:	00cb      	lsls	r3, r1, #3
 80054a8:	4651      	mov	r1, sl
 80054aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80054ae:	4651      	mov	r1, sl
 80054b0:	00ca      	lsls	r2, r1, #3
 80054b2:	4610      	mov	r0, r2
 80054b4:	4619      	mov	r1, r3
 80054b6:	4603      	mov	r3, r0
 80054b8:	4642      	mov	r2, r8
 80054ba:	189b      	adds	r3, r3, r2
 80054bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80054c0:	464b      	mov	r3, r9
 80054c2:	460a      	mov	r2, r1
 80054c4:	eb42 0303 	adc.w	r3, r2, r3
 80054c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80054cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	2200      	movs	r2, #0
 80054d4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80054d8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80054dc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80054e0:	460b      	mov	r3, r1
 80054e2:	18db      	adds	r3, r3, r3
 80054e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80054e6:	4613      	mov	r3, r2
 80054e8:	eb42 0303 	adc.w	r3, r2, r3
 80054ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80054f2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80054f6:	f7fa fee3 	bl	80002c0 <__aeabi_uldivmod>
 80054fa:	4602      	mov	r2, r0
 80054fc:	460b      	mov	r3, r1
 80054fe:	4b0d      	ldr	r3, [pc, #52]	; (8005534 <UART_SetConfig+0x2d4>)
 8005500:	fba3 1302 	umull	r1, r3, r3, r2
 8005504:	095b      	lsrs	r3, r3, #5
 8005506:	2164      	movs	r1, #100	; 0x64
 8005508:	fb01 f303 	mul.w	r3, r1, r3
 800550c:	1ad3      	subs	r3, r2, r3
 800550e:	00db      	lsls	r3, r3, #3
 8005510:	3332      	adds	r3, #50	; 0x32
 8005512:	4a08      	ldr	r2, [pc, #32]	; (8005534 <UART_SetConfig+0x2d4>)
 8005514:	fba2 2303 	umull	r2, r3, r2, r3
 8005518:	095b      	lsrs	r3, r3, #5
 800551a:	f003 0207 	and.w	r2, r3, #7
 800551e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4422      	add	r2, r4
 8005526:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005528:	e105      	b.n	8005736 <UART_SetConfig+0x4d6>
 800552a:	bf00      	nop
 800552c:	40011000 	.word	0x40011000
 8005530:	40011400 	.word	0x40011400
 8005534:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005538:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800553c:	2200      	movs	r2, #0
 800553e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005542:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005546:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800554a:	4642      	mov	r2, r8
 800554c:	464b      	mov	r3, r9
 800554e:	1891      	adds	r1, r2, r2
 8005550:	6239      	str	r1, [r7, #32]
 8005552:	415b      	adcs	r3, r3
 8005554:	627b      	str	r3, [r7, #36]	; 0x24
 8005556:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800555a:	4641      	mov	r1, r8
 800555c:	1854      	adds	r4, r2, r1
 800555e:	4649      	mov	r1, r9
 8005560:	eb43 0501 	adc.w	r5, r3, r1
 8005564:	f04f 0200 	mov.w	r2, #0
 8005568:	f04f 0300 	mov.w	r3, #0
 800556c:	00eb      	lsls	r3, r5, #3
 800556e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005572:	00e2      	lsls	r2, r4, #3
 8005574:	4614      	mov	r4, r2
 8005576:	461d      	mov	r5, r3
 8005578:	4643      	mov	r3, r8
 800557a:	18e3      	adds	r3, r4, r3
 800557c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005580:	464b      	mov	r3, r9
 8005582:	eb45 0303 	adc.w	r3, r5, r3
 8005586:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800558a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	2200      	movs	r2, #0
 8005592:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005596:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800559a:	f04f 0200 	mov.w	r2, #0
 800559e:	f04f 0300 	mov.w	r3, #0
 80055a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80055a6:	4629      	mov	r1, r5
 80055a8:	008b      	lsls	r3, r1, #2
 80055aa:	4621      	mov	r1, r4
 80055ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80055b0:	4621      	mov	r1, r4
 80055b2:	008a      	lsls	r2, r1, #2
 80055b4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80055b8:	f7fa fe82 	bl	80002c0 <__aeabi_uldivmod>
 80055bc:	4602      	mov	r2, r0
 80055be:	460b      	mov	r3, r1
 80055c0:	4b60      	ldr	r3, [pc, #384]	; (8005744 <UART_SetConfig+0x4e4>)
 80055c2:	fba3 2302 	umull	r2, r3, r3, r2
 80055c6:	095b      	lsrs	r3, r3, #5
 80055c8:	011c      	lsls	r4, r3, #4
 80055ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80055ce:	2200      	movs	r2, #0
 80055d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80055d4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80055d8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80055dc:	4642      	mov	r2, r8
 80055de:	464b      	mov	r3, r9
 80055e0:	1891      	adds	r1, r2, r2
 80055e2:	61b9      	str	r1, [r7, #24]
 80055e4:	415b      	adcs	r3, r3
 80055e6:	61fb      	str	r3, [r7, #28]
 80055e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80055ec:	4641      	mov	r1, r8
 80055ee:	1851      	adds	r1, r2, r1
 80055f0:	6139      	str	r1, [r7, #16]
 80055f2:	4649      	mov	r1, r9
 80055f4:	414b      	adcs	r3, r1
 80055f6:	617b      	str	r3, [r7, #20]
 80055f8:	f04f 0200 	mov.w	r2, #0
 80055fc:	f04f 0300 	mov.w	r3, #0
 8005600:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005604:	4659      	mov	r1, fp
 8005606:	00cb      	lsls	r3, r1, #3
 8005608:	4651      	mov	r1, sl
 800560a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800560e:	4651      	mov	r1, sl
 8005610:	00ca      	lsls	r2, r1, #3
 8005612:	4610      	mov	r0, r2
 8005614:	4619      	mov	r1, r3
 8005616:	4603      	mov	r3, r0
 8005618:	4642      	mov	r2, r8
 800561a:	189b      	adds	r3, r3, r2
 800561c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005620:	464b      	mov	r3, r9
 8005622:	460a      	mov	r2, r1
 8005624:	eb42 0303 	adc.w	r3, r2, r3
 8005628:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800562c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	2200      	movs	r2, #0
 8005634:	67bb      	str	r3, [r7, #120]	; 0x78
 8005636:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005638:	f04f 0200 	mov.w	r2, #0
 800563c:	f04f 0300 	mov.w	r3, #0
 8005640:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005644:	4649      	mov	r1, r9
 8005646:	008b      	lsls	r3, r1, #2
 8005648:	4641      	mov	r1, r8
 800564a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800564e:	4641      	mov	r1, r8
 8005650:	008a      	lsls	r2, r1, #2
 8005652:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005656:	f7fa fe33 	bl	80002c0 <__aeabi_uldivmod>
 800565a:	4602      	mov	r2, r0
 800565c:	460b      	mov	r3, r1
 800565e:	4b39      	ldr	r3, [pc, #228]	; (8005744 <UART_SetConfig+0x4e4>)
 8005660:	fba3 1302 	umull	r1, r3, r3, r2
 8005664:	095b      	lsrs	r3, r3, #5
 8005666:	2164      	movs	r1, #100	; 0x64
 8005668:	fb01 f303 	mul.w	r3, r1, r3
 800566c:	1ad3      	subs	r3, r2, r3
 800566e:	011b      	lsls	r3, r3, #4
 8005670:	3332      	adds	r3, #50	; 0x32
 8005672:	4a34      	ldr	r2, [pc, #208]	; (8005744 <UART_SetConfig+0x4e4>)
 8005674:	fba2 2303 	umull	r2, r3, r2, r3
 8005678:	095b      	lsrs	r3, r3, #5
 800567a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800567e:	441c      	add	r4, r3
 8005680:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005684:	2200      	movs	r2, #0
 8005686:	673b      	str	r3, [r7, #112]	; 0x70
 8005688:	677a      	str	r2, [r7, #116]	; 0x74
 800568a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800568e:	4642      	mov	r2, r8
 8005690:	464b      	mov	r3, r9
 8005692:	1891      	adds	r1, r2, r2
 8005694:	60b9      	str	r1, [r7, #8]
 8005696:	415b      	adcs	r3, r3
 8005698:	60fb      	str	r3, [r7, #12]
 800569a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800569e:	4641      	mov	r1, r8
 80056a0:	1851      	adds	r1, r2, r1
 80056a2:	6039      	str	r1, [r7, #0]
 80056a4:	4649      	mov	r1, r9
 80056a6:	414b      	adcs	r3, r1
 80056a8:	607b      	str	r3, [r7, #4]
 80056aa:	f04f 0200 	mov.w	r2, #0
 80056ae:	f04f 0300 	mov.w	r3, #0
 80056b2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80056b6:	4659      	mov	r1, fp
 80056b8:	00cb      	lsls	r3, r1, #3
 80056ba:	4651      	mov	r1, sl
 80056bc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80056c0:	4651      	mov	r1, sl
 80056c2:	00ca      	lsls	r2, r1, #3
 80056c4:	4610      	mov	r0, r2
 80056c6:	4619      	mov	r1, r3
 80056c8:	4603      	mov	r3, r0
 80056ca:	4642      	mov	r2, r8
 80056cc:	189b      	adds	r3, r3, r2
 80056ce:	66bb      	str	r3, [r7, #104]	; 0x68
 80056d0:	464b      	mov	r3, r9
 80056d2:	460a      	mov	r2, r1
 80056d4:	eb42 0303 	adc.w	r3, r2, r3
 80056d8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80056da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	2200      	movs	r2, #0
 80056e2:	663b      	str	r3, [r7, #96]	; 0x60
 80056e4:	667a      	str	r2, [r7, #100]	; 0x64
 80056e6:	f04f 0200 	mov.w	r2, #0
 80056ea:	f04f 0300 	mov.w	r3, #0
 80056ee:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80056f2:	4649      	mov	r1, r9
 80056f4:	008b      	lsls	r3, r1, #2
 80056f6:	4641      	mov	r1, r8
 80056f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80056fc:	4641      	mov	r1, r8
 80056fe:	008a      	lsls	r2, r1, #2
 8005700:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005704:	f7fa fddc 	bl	80002c0 <__aeabi_uldivmod>
 8005708:	4602      	mov	r2, r0
 800570a:	460b      	mov	r3, r1
 800570c:	4b0d      	ldr	r3, [pc, #52]	; (8005744 <UART_SetConfig+0x4e4>)
 800570e:	fba3 1302 	umull	r1, r3, r3, r2
 8005712:	095b      	lsrs	r3, r3, #5
 8005714:	2164      	movs	r1, #100	; 0x64
 8005716:	fb01 f303 	mul.w	r3, r1, r3
 800571a:	1ad3      	subs	r3, r2, r3
 800571c:	011b      	lsls	r3, r3, #4
 800571e:	3332      	adds	r3, #50	; 0x32
 8005720:	4a08      	ldr	r2, [pc, #32]	; (8005744 <UART_SetConfig+0x4e4>)
 8005722:	fba2 2303 	umull	r2, r3, r2, r3
 8005726:	095b      	lsrs	r3, r3, #5
 8005728:	f003 020f 	and.w	r2, r3, #15
 800572c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4422      	add	r2, r4
 8005734:	609a      	str	r2, [r3, #8]
}
 8005736:	bf00      	nop
 8005738:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800573c:	46bd      	mov	sp, r7
 800573e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005742:	bf00      	nop
 8005744:	51eb851f 	.word	0x51eb851f

08005748 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005748:	b480      	push	{r7}
 800574a:	b085      	sub	sp, #20
 800574c:	af00      	add	r7, sp, #0
 800574e:	4603      	mov	r3, r0
 8005750:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005752:	2300      	movs	r3, #0
 8005754:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005756:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800575a:	2b84      	cmp	r3, #132	; 0x84
 800575c:	d005      	beq.n	800576a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800575e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	4413      	add	r3, r2
 8005766:	3303      	adds	r3, #3
 8005768:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800576a:	68fb      	ldr	r3, [r7, #12]
}
 800576c:	4618      	mov	r0, r3
 800576e:	3714      	adds	r7, #20
 8005770:	46bd      	mov	sp, r7
 8005772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005776:	4770      	bx	lr

08005778 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800577c:	f000 fade 	bl	8005d3c <vTaskStartScheduler>
  
  return osOK;
 8005780:	2300      	movs	r3, #0
}
 8005782:	4618      	mov	r0, r3
 8005784:	bd80      	pop	{r7, pc}

08005786 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005786:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005788:	b089      	sub	sp, #36	; 0x24
 800578a:	af04      	add	r7, sp, #16
 800578c:	6078      	str	r0, [r7, #4]
 800578e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	695b      	ldr	r3, [r3, #20]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d020      	beq.n	80057da <osThreadCreate+0x54>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	699b      	ldr	r3, [r3, #24]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d01c      	beq.n	80057da <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	685c      	ldr	r4, [r3, #4]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681d      	ldr	r5, [r3, #0]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	691e      	ldr	r6, [r3, #16]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80057b2:	4618      	mov	r0, r3
 80057b4:	f7ff ffc8 	bl	8005748 <makeFreeRtosPriority>
 80057b8:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	695b      	ldr	r3, [r3, #20]
 80057be:	687a      	ldr	r2, [r7, #4]
 80057c0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80057c2:	9202      	str	r2, [sp, #8]
 80057c4:	9301      	str	r3, [sp, #4]
 80057c6:	9100      	str	r1, [sp, #0]
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	4632      	mov	r2, r6
 80057cc:	4629      	mov	r1, r5
 80057ce:	4620      	mov	r0, r4
 80057d0:	f000 f8ed 	bl	80059ae <xTaskCreateStatic>
 80057d4:	4603      	mov	r3, r0
 80057d6:	60fb      	str	r3, [r7, #12]
 80057d8:	e01c      	b.n	8005814 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	685c      	ldr	r4, [r3, #4]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80057e6:	b29e      	uxth	r6, r3
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80057ee:	4618      	mov	r0, r3
 80057f0:	f7ff ffaa 	bl	8005748 <makeFreeRtosPriority>
 80057f4:	4602      	mov	r2, r0
 80057f6:	f107 030c 	add.w	r3, r7, #12
 80057fa:	9301      	str	r3, [sp, #4]
 80057fc:	9200      	str	r2, [sp, #0]
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	4632      	mov	r2, r6
 8005802:	4629      	mov	r1, r5
 8005804:	4620      	mov	r0, r4
 8005806:	f000 f92f 	bl	8005a68 <xTaskCreate>
 800580a:	4603      	mov	r3, r0
 800580c:	2b01      	cmp	r3, #1
 800580e:	d001      	beq.n	8005814 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005810:	2300      	movs	r3, #0
 8005812:	e000      	b.n	8005816 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005814:	68fb      	ldr	r3, [r7, #12]
}
 8005816:	4618      	mov	r0, r3
 8005818:	3714      	adds	r7, #20
 800581a:	46bd      	mov	sp, r7
 800581c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800581e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800581e:	b580      	push	{r7, lr}
 8005820:	b084      	sub	sp, #16
 8005822:	af00      	add	r7, sp, #0
 8005824:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d001      	beq.n	8005834 <osDelay+0x16>
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	e000      	b.n	8005836 <osDelay+0x18>
 8005834:	2301      	movs	r3, #1
 8005836:	4618      	mov	r0, r3
 8005838:	f000 fa4c 	bl	8005cd4 <vTaskDelay>
  
  return osOK;
 800583c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800583e:	4618      	mov	r0, r3
 8005840:	3710      	adds	r7, #16
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}

08005846 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005846:	b480      	push	{r7}
 8005848:	b083      	sub	sp, #12
 800584a:	af00      	add	r7, sp, #0
 800584c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	f103 0208 	add.w	r2, r3, #8
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	f04f 32ff 	mov.w	r2, #4294967295
 800585e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	f103 0208 	add.w	r2, r3, #8
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	f103 0208 	add.w	r2, r3, #8
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2200      	movs	r2, #0
 8005878:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800587a:	bf00      	nop
 800587c:	370c      	adds	r7, #12
 800587e:	46bd      	mov	sp, r7
 8005880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005884:	4770      	bx	lr

08005886 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005886:	b480      	push	{r7}
 8005888:	b083      	sub	sp, #12
 800588a:	af00      	add	r7, sp, #0
 800588c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2200      	movs	r2, #0
 8005892:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005894:	bf00      	nop
 8005896:	370c      	adds	r7, #12
 8005898:	46bd      	mov	sp, r7
 800589a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589e:	4770      	bx	lr

080058a0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80058a0:	b480      	push	{r7}
 80058a2:	b085      	sub	sp, #20
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
 80058a8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	68fa      	ldr	r2, [r7, #12]
 80058b4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	689a      	ldr	r2, [r3, #8]
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	683a      	ldr	r2, [r7, #0]
 80058c4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	683a      	ldr	r2, [r7, #0]
 80058ca:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	687a      	ldr	r2, [r7, #4]
 80058d0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	1c5a      	adds	r2, r3, #1
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	601a      	str	r2, [r3, #0]
}
 80058dc:	bf00      	nop
 80058de:	3714      	adds	r7, #20
 80058e0:	46bd      	mov	sp, r7
 80058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e6:	4770      	bx	lr

080058e8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80058e8:	b480      	push	{r7}
 80058ea:	b085      	sub	sp, #20
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
 80058f0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058fe:	d103      	bne.n	8005908 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	691b      	ldr	r3, [r3, #16]
 8005904:	60fb      	str	r3, [r7, #12]
 8005906:	e00c      	b.n	8005922 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	3308      	adds	r3, #8
 800590c:	60fb      	str	r3, [r7, #12]
 800590e:	e002      	b.n	8005916 <vListInsert+0x2e>
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	60fb      	str	r3, [r7, #12]
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	68ba      	ldr	r2, [r7, #8]
 800591e:	429a      	cmp	r2, r3
 8005920:	d2f6      	bcs.n	8005910 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	685a      	ldr	r2, [r3, #4]
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	683a      	ldr	r2, [r7, #0]
 8005930:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	68fa      	ldr	r2, [r7, #12]
 8005936:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	683a      	ldr	r2, [r7, #0]
 800593c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	687a      	ldr	r2, [r7, #4]
 8005942:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	1c5a      	adds	r2, r3, #1
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	601a      	str	r2, [r3, #0]
}
 800594e:	bf00      	nop
 8005950:	3714      	adds	r7, #20
 8005952:	46bd      	mov	sp, r7
 8005954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005958:	4770      	bx	lr

0800595a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800595a:	b480      	push	{r7}
 800595c:	b085      	sub	sp, #20
 800595e:	af00      	add	r7, sp, #0
 8005960:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	691b      	ldr	r3, [r3, #16]
 8005966:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	687a      	ldr	r2, [r7, #4]
 800596e:	6892      	ldr	r2, [r2, #8]
 8005970:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	689b      	ldr	r3, [r3, #8]
 8005976:	687a      	ldr	r2, [r7, #4]
 8005978:	6852      	ldr	r2, [r2, #4]
 800597a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	687a      	ldr	r2, [r7, #4]
 8005982:	429a      	cmp	r2, r3
 8005984:	d103      	bne.n	800598e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	689a      	ldr	r2, [r3, #8]
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2200      	movs	r2, #0
 8005992:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	1e5a      	subs	r2, r3, #1
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	3714      	adds	r7, #20
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr

080059ae <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80059ae:	b580      	push	{r7, lr}
 80059b0:	b08e      	sub	sp, #56	; 0x38
 80059b2:	af04      	add	r7, sp, #16
 80059b4:	60f8      	str	r0, [r7, #12]
 80059b6:	60b9      	str	r1, [r7, #8]
 80059b8:	607a      	str	r2, [r7, #4]
 80059ba:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80059bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d10a      	bne.n	80059d8 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80059c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059c6:	f383 8811 	msr	BASEPRI, r3
 80059ca:	f3bf 8f6f 	isb	sy
 80059ce:	f3bf 8f4f 	dsb	sy
 80059d2:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80059d4:	bf00      	nop
 80059d6:	e7fe      	b.n	80059d6 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80059d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d10a      	bne.n	80059f4 <xTaskCreateStatic+0x46>
	__asm volatile
 80059de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059e2:	f383 8811 	msr	BASEPRI, r3
 80059e6:	f3bf 8f6f 	isb	sy
 80059ea:	f3bf 8f4f 	dsb	sy
 80059ee:	61fb      	str	r3, [r7, #28]
}
 80059f0:	bf00      	nop
 80059f2:	e7fe      	b.n	80059f2 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80059f4:	2354      	movs	r3, #84	; 0x54
 80059f6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	2b54      	cmp	r3, #84	; 0x54
 80059fc:	d00a      	beq.n	8005a14 <xTaskCreateStatic+0x66>
	__asm volatile
 80059fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a02:	f383 8811 	msr	BASEPRI, r3
 8005a06:	f3bf 8f6f 	isb	sy
 8005a0a:	f3bf 8f4f 	dsb	sy
 8005a0e:	61bb      	str	r3, [r7, #24]
}
 8005a10:	bf00      	nop
 8005a12:	e7fe      	b.n	8005a12 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005a14:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d01e      	beq.n	8005a5a <xTaskCreateStatic+0xac>
 8005a1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d01b      	beq.n	8005a5a <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a24:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a2a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a2e:	2202      	movs	r2, #2
 8005a30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005a34:	2300      	movs	r3, #0
 8005a36:	9303      	str	r3, [sp, #12]
 8005a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a3a:	9302      	str	r3, [sp, #8]
 8005a3c:	f107 0314 	add.w	r3, r7, #20
 8005a40:	9301      	str	r3, [sp, #4]
 8005a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a44:	9300      	str	r3, [sp, #0]
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	687a      	ldr	r2, [r7, #4]
 8005a4a:	68b9      	ldr	r1, [r7, #8]
 8005a4c:	68f8      	ldr	r0, [r7, #12]
 8005a4e:	f000 f850 	bl	8005af2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005a52:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005a54:	f000 f8d4 	bl	8005c00 <prvAddNewTaskToReadyList>
 8005a58:	e001      	b.n	8005a5e <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005a5e:	697b      	ldr	r3, [r7, #20]
	}
 8005a60:	4618      	mov	r0, r3
 8005a62:	3728      	adds	r7, #40	; 0x28
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}

08005a68 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b08c      	sub	sp, #48	; 0x30
 8005a6c:	af04      	add	r7, sp, #16
 8005a6e:	60f8      	str	r0, [r7, #12]
 8005a70:	60b9      	str	r1, [r7, #8]
 8005a72:	603b      	str	r3, [r7, #0]
 8005a74:	4613      	mov	r3, r2
 8005a76:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005a78:	88fb      	ldrh	r3, [r7, #6]
 8005a7a:	009b      	lsls	r3, r3, #2
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	f000 fec3 	bl	8006808 <pvPortMalloc>
 8005a82:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d00e      	beq.n	8005aa8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005a8a:	2054      	movs	r0, #84	; 0x54
 8005a8c:	f000 febc 	bl	8006808 <pvPortMalloc>
 8005a90:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005a92:	69fb      	ldr	r3, [r7, #28]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d003      	beq.n	8005aa0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005a98:	69fb      	ldr	r3, [r7, #28]
 8005a9a:	697a      	ldr	r2, [r7, #20]
 8005a9c:	631a      	str	r2, [r3, #48]	; 0x30
 8005a9e:	e005      	b.n	8005aac <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005aa0:	6978      	ldr	r0, [r7, #20]
 8005aa2:	f000 ff7d 	bl	80069a0 <vPortFree>
 8005aa6:	e001      	b.n	8005aac <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005aac:	69fb      	ldr	r3, [r7, #28]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d017      	beq.n	8005ae2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005ab2:	69fb      	ldr	r3, [r7, #28]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005aba:	88fa      	ldrh	r2, [r7, #6]
 8005abc:	2300      	movs	r3, #0
 8005abe:	9303      	str	r3, [sp, #12]
 8005ac0:	69fb      	ldr	r3, [r7, #28]
 8005ac2:	9302      	str	r3, [sp, #8]
 8005ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ac6:	9301      	str	r3, [sp, #4]
 8005ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aca:	9300      	str	r3, [sp, #0]
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	68b9      	ldr	r1, [r7, #8]
 8005ad0:	68f8      	ldr	r0, [r7, #12]
 8005ad2:	f000 f80e 	bl	8005af2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005ad6:	69f8      	ldr	r0, [r7, #28]
 8005ad8:	f000 f892 	bl	8005c00 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005adc:	2301      	movs	r3, #1
 8005ade:	61bb      	str	r3, [r7, #24]
 8005ae0:	e002      	b.n	8005ae8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005ae2:	f04f 33ff 	mov.w	r3, #4294967295
 8005ae6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005ae8:	69bb      	ldr	r3, [r7, #24]
	}
 8005aea:	4618      	mov	r0, r3
 8005aec:	3720      	adds	r7, #32
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}

08005af2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005af2:	b580      	push	{r7, lr}
 8005af4:	b088      	sub	sp, #32
 8005af6:	af00      	add	r7, sp, #0
 8005af8:	60f8      	str	r0, [r7, #12]
 8005afa:	60b9      	str	r1, [r7, #8]
 8005afc:	607a      	str	r2, [r7, #4]
 8005afe:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005b0a:	3b01      	subs	r3, #1
 8005b0c:	009b      	lsls	r3, r3, #2
 8005b0e:	4413      	add	r3, r2
 8005b10:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005b12:	69bb      	ldr	r3, [r7, #24]
 8005b14:	f023 0307 	bic.w	r3, r3, #7
 8005b18:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005b1a:	69bb      	ldr	r3, [r7, #24]
 8005b1c:	f003 0307 	and.w	r3, r3, #7
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d00a      	beq.n	8005b3a <prvInitialiseNewTask+0x48>
	__asm volatile
 8005b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b28:	f383 8811 	msr	BASEPRI, r3
 8005b2c:	f3bf 8f6f 	isb	sy
 8005b30:	f3bf 8f4f 	dsb	sy
 8005b34:	617b      	str	r3, [r7, #20]
}
 8005b36:	bf00      	nop
 8005b38:	e7fe      	b.n	8005b38 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d01f      	beq.n	8005b80 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005b40:	2300      	movs	r3, #0
 8005b42:	61fb      	str	r3, [r7, #28]
 8005b44:	e012      	b.n	8005b6c <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005b46:	68ba      	ldr	r2, [r7, #8]
 8005b48:	69fb      	ldr	r3, [r7, #28]
 8005b4a:	4413      	add	r3, r2
 8005b4c:	7819      	ldrb	r1, [r3, #0]
 8005b4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b50:	69fb      	ldr	r3, [r7, #28]
 8005b52:	4413      	add	r3, r2
 8005b54:	3334      	adds	r3, #52	; 0x34
 8005b56:	460a      	mov	r2, r1
 8005b58:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005b5a:	68ba      	ldr	r2, [r7, #8]
 8005b5c:	69fb      	ldr	r3, [r7, #28]
 8005b5e:	4413      	add	r3, r2
 8005b60:	781b      	ldrb	r3, [r3, #0]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d006      	beq.n	8005b74 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005b66:	69fb      	ldr	r3, [r7, #28]
 8005b68:	3301      	adds	r3, #1
 8005b6a:	61fb      	str	r3, [r7, #28]
 8005b6c:	69fb      	ldr	r3, [r7, #28]
 8005b6e:	2b0f      	cmp	r3, #15
 8005b70:	d9e9      	bls.n	8005b46 <prvInitialiseNewTask+0x54>
 8005b72:	e000      	b.n	8005b76 <prvInitialiseNewTask+0x84>
			{
				break;
 8005b74:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b78:	2200      	movs	r2, #0
 8005b7a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005b7e:	e003      	b.n	8005b88 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b82:	2200      	movs	r2, #0
 8005b84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b8a:	2b06      	cmp	r3, #6
 8005b8c:	d901      	bls.n	8005b92 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005b8e:	2306      	movs	r3, #6
 8005b90:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b96:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b9c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ba6:	3304      	adds	r3, #4
 8005ba8:	4618      	mov	r0, r3
 8005baa:	f7ff fe6c 	bl	8005886 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bb0:	3318      	adds	r3, #24
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	f7ff fe67 	bl	8005886 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bbc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bc0:	f1c3 0207 	rsb	r2, r3, #7
 8005bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bc6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bcc:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005bdc:	683a      	ldr	r2, [r7, #0]
 8005bde:	68f9      	ldr	r1, [r7, #12]
 8005be0:	69b8      	ldr	r0, [r7, #24]
 8005be2:	f000 fc05 	bl	80063f0 <pxPortInitialiseStack>
 8005be6:	4602      	mov	r2, r0
 8005be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bea:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d002      	beq.n	8005bf8 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bf4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bf6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005bf8:	bf00      	nop
 8005bfa:	3720      	adds	r7, #32
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}

08005c00 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b082      	sub	sp, #8
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005c08:	f000 fd1c 	bl	8006644 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005c0c:	4b2a      	ldr	r3, [pc, #168]	; (8005cb8 <prvAddNewTaskToReadyList+0xb8>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	3301      	adds	r3, #1
 8005c12:	4a29      	ldr	r2, [pc, #164]	; (8005cb8 <prvAddNewTaskToReadyList+0xb8>)
 8005c14:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005c16:	4b29      	ldr	r3, [pc, #164]	; (8005cbc <prvAddNewTaskToReadyList+0xbc>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d109      	bne.n	8005c32 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005c1e:	4a27      	ldr	r2, [pc, #156]	; (8005cbc <prvAddNewTaskToReadyList+0xbc>)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005c24:	4b24      	ldr	r3, [pc, #144]	; (8005cb8 <prvAddNewTaskToReadyList+0xb8>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	2b01      	cmp	r3, #1
 8005c2a:	d110      	bne.n	8005c4e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005c2c:	f000 fabc 	bl	80061a8 <prvInitialiseTaskLists>
 8005c30:	e00d      	b.n	8005c4e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005c32:	4b23      	ldr	r3, [pc, #140]	; (8005cc0 <prvAddNewTaskToReadyList+0xc0>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d109      	bne.n	8005c4e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005c3a:	4b20      	ldr	r3, [pc, #128]	; (8005cbc <prvAddNewTaskToReadyList+0xbc>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c44:	429a      	cmp	r2, r3
 8005c46:	d802      	bhi.n	8005c4e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005c48:	4a1c      	ldr	r2, [pc, #112]	; (8005cbc <prvAddNewTaskToReadyList+0xbc>)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005c4e:	4b1d      	ldr	r3, [pc, #116]	; (8005cc4 <prvAddNewTaskToReadyList+0xc4>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	3301      	adds	r3, #1
 8005c54:	4a1b      	ldr	r2, [pc, #108]	; (8005cc4 <prvAddNewTaskToReadyList+0xc4>)
 8005c56:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c5c:	2201      	movs	r2, #1
 8005c5e:	409a      	lsls	r2, r3
 8005c60:	4b19      	ldr	r3, [pc, #100]	; (8005cc8 <prvAddNewTaskToReadyList+0xc8>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4313      	orrs	r3, r2
 8005c66:	4a18      	ldr	r2, [pc, #96]	; (8005cc8 <prvAddNewTaskToReadyList+0xc8>)
 8005c68:	6013      	str	r3, [r2, #0]
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c6e:	4613      	mov	r3, r2
 8005c70:	009b      	lsls	r3, r3, #2
 8005c72:	4413      	add	r3, r2
 8005c74:	009b      	lsls	r3, r3, #2
 8005c76:	4a15      	ldr	r2, [pc, #84]	; (8005ccc <prvAddNewTaskToReadyList+0xcc>)
 8005c78:	441a      	add	r2, r3
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	3304      	adds	r3, #4
 8005c7e:	4619      	mov	r1, r3
 8005c80:	4610      	mov	r0, r2
 8005c82:	f7ff fe0d 	bl	80058a0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005c86:	f000 fd0d 	bl	80066a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005c8a:	4b0d      	ldr	r3, [pc, #52]	; (8005cc0 <prvAddNewTaskToReadyList+0xc0>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d00e      	beq.n	8005cb0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005c92:	4b0a      	ldr	r3, [pc, #40]	; (8005cbc <prvAddNewTaskToReadyList+0xbc>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c9c:	429a      	cmp	r2, r3
 8005c9e:	d207      	bcs.n	8005cb0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005ca0:	4b0b      	ldr	r3, [pc, #44]	; (8005cd0 <prvAddNewTaskToReadyList+0xd0>)
 8005ca2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ca6:	601a      	str	r2, [r3, #0]
 8005ca8:	f3bf 8f4f 	dsb	sy
 8005cac:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005cb0:	bf00      	nop
 8005cb2:	3708      	adds	r7, #8
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bd80      	pop	{r7, pc}
 8005cb8:	20000670 	.word	0x20000670
 8005cbc:	20000570 	.word	0x20000570
 8005cc0:	2000067c 	.word	0x2000067c
 8005cc4:	2000068c 	.word	0x2000068c
 8005cc8:	20000678 	.word	0x20000678
 8005ccc:	20000574 	.word	0x20000574
 8005cd0:	e000ed04 	.word	0xe000ed04

08005cd4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b084      	sub	sp, #16
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005cdc:	2300      	movs	r3, #0
 8005cde:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d017      	beq.n	8005d16 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005ce6:	4b13      	ldr	r3, [pc, #76]	; (8005d34 <vTaskDelay+0x60>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d00a      	beq.n	8005d04 <vTaskDelay+0x30>
	__asm volatile
 8005cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cf2:	f383 8811 	msr	BASEPRI, r3
 8005cf6:	f3bf 8f6f 	isb	sy
 8005cfa:	f3bf 8f4f 	dsb	sy
 8005cfe:	60bb      	str	r3, [r7, #8]
}
 8005d00:	bf00      	nop
 8005d02:	e7fe      	b.n	8005d02 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005d04:	f000 f87a 	bl	8005dfc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005d08:	2100      	movs	r1, #0
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	f000 fb0a 	bl	8006324 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005d10:	f000 f882 	bl	8005e18 <xTaskResumeAll>
 8005d14:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d107      	bne.n	8005d2c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005d1c:	4b06      	ldr	r3, [pc, #24]	; (8005d38 <vTaskDelay+0x64>)
 8005d1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d22:	601a      	str	r2, [r3, #0]
 8005d24:	f3bf 8f4f 	dsb	sy
 8005d28:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005d2c:	bf00      	nop
 8005d2e:	3710      	adds	r7, #16
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}
 8005d34:	20000698 	.word	0x20000698
 8005d38:	e000ed04 	.word	0xe000ed04

08005d3c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b08a      	sub	sp, #40	; 0x28
 8005d40:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005d42:	2300      	movs	r3, #0
 8005d44:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005d46:	2300      	movs	r3, #0
 8005d48:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005d4a:	463a      	mov	r2, r7
 8005d4c:	1d39      	adds	r1, r7, #4
 8005d4e:	f107 0308 	add.w	r3, r7, #8
 8005d52:	4618      	mov	r0, r3
 8005d54:	f7fa ff38 	bl	8000bc8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005d58:	6839      	ldr	r1, [r7, #0]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	68ba      	ldr	r2, [r7, #8]
 8005d5e:	9202      	str	r2, [sp, #8]
 8005d60:	9301      	str	r3, [sp, #4]
 8005d62:	2300      	movs	r3, #0
 8005d64:	9300      	str	r3, [sp, #0]
 8005d66:	2300      	movs	r3, #0
 8005d68:	460a      	mov	r2, r1
 8005d6a:	491e      	ldr	r1, [pc, #120]	; (8005de4 <vTaskStartScheduler+0xa8>)
 8005d6c:	481e      	ldr	r0, [pc, #120]	; (8005de8 <vTaskStartScheduler+0xac>)
 8005d6e:	f7ff fe1e 	bl	80059ae <xTaskCreateStatic>
 8005d72:	4603      	mov	r3, r0
 8005d74:	4a1d      	ldr	r2, [pc, #116]	; (8005dec <vTaskStartScheduler+0xb0>)
 8005d76:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005d78:	4b1c      	ldr	r3, [pc, #112]	; (8005dec <vTaskStartScheduler+0xb0>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d002      	beq.n	8005d86 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005d80:	2301      	movs	r3, #1
 8005d82:	617b      	str	r3, [r7, #20]
 8005d84:	e001      	b.n	8005d8a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005d86:	2300      	movs	r3, #0
 8005d88:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d116      	bne.n	8005dbe <vTaskStartScheduler+0x82>
	__asm volatile
 8005d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d94:	f383 8811 	msr	BASEPRI, r3
 8005d98:	f3bf 8f6f 	isb	sy
 8005d9c:	f3bf 8f4f 	dsb	sy
 8005da0:	613b      	str	r3, [r7, #16]
}
 8005da2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005da4:	4b12      	ldr	r3, [pc, #72]	; (8005df0 <vTaskStartScheduler+0xb4>)
 8005da6:	f04f 32ff 	mov.w	r2, #4294967295
 8005daa:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005dac:	4b11      	ldr	r3, [pc, #68]	; (8005df4 <vTaskStartScheduler+0xb8>)
 8005dae:	2201      	movs	r2, #1
 8005db0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005db2:	4b11      	ldr	r3, [pc, #68]	; (8005df8 <vTaskStartScheduler+0xbc>)
 8005db4:	2200      	movs	r2, #0
 8005db6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005db8:	f000 fba2 	bl	8006500 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005dbc:	e00e      	b.n	8005ddc <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dc4:	d10a      	bne.n	8005ddc <vTaskStartScheduler+0xa0>
	__asm volatile
 8005dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dca:	f383 8811 	msr	BASEPRI, r3
 8005dce:	f3bf 8f6f 	isb	sy
 8005dd2:	f3bf 8f4f 	dsb	sy
 8005dd6:	60fb      	str	r3, [r7, #12]
}
 8005dd8:	bf00      	nop
 8005dda:	e7fe      	b.n	8005dda <vTaskStartScheduler+0x9e>
}
 8005ddc:	bf00      	nop
 8005dde:	3718      	adds	r7, #24
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}
 8005de4:	08007710 	.word	0x08007710
 8005de8:	08006179 	.word	0x08006179
 8005dec:	20000694 	.word	0x20000694
 8005df0:	20000690 	.word	0x20000690
 8005df4:	2000067c 	.word	0x2000067c
 8005df8:	20000674 	.word	0x20000674

08005dfc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005e00:	4b04      	ldr	r3, [pc, #16]	; (8005e14 <vTaskSuspendAll+0x18>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	3301      	adds	r3, #1
 8005e06:	4a03      	ldr	r2, [pc, #12]	; (8005e14 <vTaskSuspendAll+0x18>)
 8005e08:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005e0a:	bf00      	nop
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e12:	4770      	bx	lr
 8005e14:	20000698 	.word	0x20000698

08005e18 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b084      	sub	sp, #16
 8005e1c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005e1e:	2300      	movs	r3, #0
 8005e20:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005e22:	2300      	movs	r3, #0
 8005e24:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005e26:	4b41      	ldr	r3, [pc, #260]	; (8005f2c <xTaskResumeAll+0x114>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d10a      	bne.n	8005e44 <xTaskResumeAll+0x2c>
	__asm volatile
 8005e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e32:	f383 8811 	msr	BASEPRI, r3
 8005e36:	f3bf 8f6f 	isb	sy
 8005e3a:	f3bf 8f4f 	dsb	sy
 8005e3e:	603b      	str	r3, [r7, #0]
}
 8005e40:	bf00      	nop
 8005e42:	e7fe      	b.n	8005e42 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005e44:	f000 fbfe 	bl	8006644 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005e48:	4b38      	ldr	r3, [pc, #224]	; (8005f2c <xTaskResumeAll+0x114>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	3b01      	subs	r3, #1
 8005e4e:	4a37      	ldr	r2, [pc, #220]	; (8005f2c <xTaskResumeAll+0x114>)
 8005e50:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e52:	4b36      	ldr	r3, [pc, #216]	; (8005f2c <xTaskResumeAll+0x114>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d161      	bne.n	8005f1e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005e5a:	4b35      	ldr	r3, [pc, #212]	; (8005f30 <xTaskResumeAll+0x118>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d05d      	beq.n	8005f1e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005e62:	e02e      	b.n	8005ec2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e64:	4b33      	ldr	r3, [pc, #204]	; (8005f34 <xTaskResumeAll+0x11c>)
 8005e66:	68db      	ldr	r3, [r3, #12]
 8005e68:	68db      	ldr	r3, [r3, #12]
 8005e6a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	3318      	adds	r3, #24
 8005e70:	4618      	mov	r0, r3
 8005e72:	f7ff fd72 	bl	800595a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	3304      	adds	r3, #4
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	f7ff fd6d 	bl	800595a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e84:	2201      	movs	r2, #1
 8005e86:	409a      	lsls	r2, r3
 8005e88:	4b2b      	ldr	r3, [pc, #172]	; (8005f38 <xTaskResumeAll+0x120>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	4a2a      	ldr	r2, [pc, #168]	; (8005f38 <xTaskResumeAll+0x120>)
 8005e90:	6013      	str	r3, [r2, #0]
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e96:	4613      	mov	r3, r2
 8005e98:	009b      	lsls	r3, r3, #2
 8005e9a:	4413      	add	r3, r2
 8005e9c:	009b      	lsls	r3, r3, #2
 8005e9e:	4a27      	ldr	r2, [pc, #156]	; (8005f3c <xTaskResumeAll+0x124>)
 8005ea0:	441a      	add	r2, r3
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	3304      	adds	r3, #4
 8005ea6:	4619      	mov	r1, r3
 8005ea8:	4610      	mov	r0, r2
 8005eaa:	f7ff fcf9 	bl	80058a0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005eb2:	4b23      	ldr	r3, [pc, #140]	; (8005f40 <xTaskResumeAll+0x128>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eb8:	429a      	cmp	r2, r3
 8005eba:	d302      	bcc.n	8005ec2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005ebc:	4b21      	ldr	r3, [pc, #132]	; (8005f44 <xTaskResumeAll+0x12c>)
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005ec2:	4b1c      	ldr	r3, [pc, #112]	; (8005f34 <xTaskResumeAll+0x11c>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d1cc      	bne.n	8005e64 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d001      	beq.n	8005ed4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005ed0:	f000 fa08 	bl	80062e4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005ed4:	4b1c      	ldr	r3, [pc, #112]	; (8005f48 <xTaskResumeAll+0x130>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d010      	beq.n	8005f02 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005ee0:	f000 f836 	bl	8005f50 <xTaskIncrementTick>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d002      	beq.n	8005ef0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005eea:	4b16      	ldr	r3, [pc, #88]	; (8005f44 <xTaskResumeAll+0x12c>)
 8005eec:	2201      	movs	r2, #1
 8005eee:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	3b01      	subs	r3, #1
 8005ef4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d1f1      	bne.n	8005ee0 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8005efc:	4b12      	ldr	r3, [pc, #72]	; (8005f48 <xTaskResumeAll+0x130>)
 8005efe:	2200      	movs	r2, #0
 8005f00:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005f02:	4b10      	ldr	r3, [pc, #64]	; (8005f44 <xTaskResumeAll+0x12c>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d009      	beq.n	8005f1e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005f0e:	4b0f      	ldr	r3, [pc, #60]	; (8005f4c <xTaskResumeAll+0x134>)
 8005f10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f14:	601a      	str	r2, [r3, #0]
 8005f16:	f3bf 8f4f 	dsb	sy
 8005f1a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005f1e:	f000 fbc1 	bl	80066a4 <vPortExitCritical>

	return xAlreadyYielded;
 8005f22:	68bb      	ldr	r3, [r7, #8]
}
 8005f24:	4618      	mov	r0, r3
 8005f26:	3710      	adds	r7, #16
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	bd80      	pop	{r7, pc}
 8005f2c:	20000698 	.word	0x20000698
 8005f30:	20000670 	.word	0x20000670
 8005f34:	20000630 	.word	0x20000630
 8005f38:	20000678 	.word	0x20000678
 8005f3c:	20000574 	.word	0x20000574
 8005f40:	20000570 	.word	0x20000570
 8005f44:	20000684 	.word	0x20000684
 8005f48:	20000680 	.word	0x20000680
 8005f4c:	e000ed04 	.word	0xe000ed04

08005f50 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b086      	sub	sp, #24
 8005f54:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005f56:	2300      	movs	r3, #0
 8005f58:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f5a:	4b4e      	ldr	r3, [pc, #312]	; (8006094 <xTaskIncrementTick+0x144>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	f040 808e 	bne.w	8006080 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005f64:	4b4c      	ldr	r3, [pc, #304]	; (8006098 <xTaskIncrementTick+0x148>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	3301      	adds	r3, #1
 8005f6a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005f6c:	4a4a      	ldr	r2, [pc, #296]	; (8006098 <xTaskIncrementTick+0x148>)
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d120      	bne.n	8005fba <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005f78:	4b48      	ldr	r3, [pc, #288]	; (800609c <xTaskIncrementTick+0x14c>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d00a      	beq.n	8005f98 <xTaskIncrementTick+0x48>
	__asm volatile
 8005f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f86:	f383 8811 	msr	BASEPRI, r3
 8005f8a:	f3bf 8f6f 	isb	sy
 8005f8e:	f3bf 8f4f 	dsb	sy
 8005f92:	603b      	str	r3, [r7, #0]
}
 8005f94:	bf00      	nop
 8005f96:	e7fe      	b.n	8005f96 <xTaskIncrementTick+0x46>
 8005f98:	4b40      	ldr	r3, [pc, #256]	; (800609c <xTaskIncrementTick+0x14c>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	60fb      	str	r3, [r7, #12]
 8005f9e:	4b40      	ldr	r3, [pc, #256]	; (80060a0 <xTaskIncrementTick+0x150>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a3e      	ldr	r2, [pc, #248]	; (800609c <xTaskIncrementTick+0x14c>)
 8005fa4:	6013      	str	r3, [r2, #0]
 8005fa6:	4a3e      	ldr	r2, [pc, #248]	; (80060a0 <xTaskIncrementTick+0x150>)
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	6013      	str	r3, [r2, #0]
 8005fac:	4b3d      	ldr	r3, [pc, #244]	; (80060a4 <xTaskIncrementTick+0x154>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	3301      	adds	r3, #1
 8005fb2:	4a3c      	ldr	r2, [pc, #240]	; (80060a4 <xTaskIncrementTick+0x154>)
 8005fb4:	6013      	str	r3, [r2, #0]
 8005fb6:	f000 f995 	bl	80062e4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005fba:	4b3b      	ldr	r3, [pc, #236]	; (80060a8 <xTaskIncrementTick+0x158>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	693a      	ldr	r2, [r7, #16]
 8005fc0:	429a      	cmp	r2, r3
 8005fc2:	d348      	bcc.n	8006056 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005fc4:	4b35      	ldr	r3, [pc, #212]	; (800609c <xTaskIncrementTick+0x14c>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d104      	bne.n	8005fd8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fce:	4b36      	ldr	r3, [pc, #216]	; (80060a8 <xTaskIncrementTick+0x158>)
 8005fd0:	f04f 32ff 	mov.w	r2, #4294967295
 8005fd4:	601a      	str	r2, [r3, #0]
					break;
 8005fd6:	e03e      	b.n	8006056 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fd8:	4b30      	ldr	r3, [pc, #192]	; (800609c <xTaskIncrementTick+0x14c>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	68db      	ldr	r3, [r3, #12]
 8005fde:	68db      	ldr	r3, [r3, #12]
 8005fe0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005fe8:	693a      	ldr	r2, [r7, #16]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	429a      	cmp	r2, r3
 8005fee:	d203      	bcs.n	8005ff8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005ff0:	4a2d      	ldr	r2, [pc, #180]	; (80060a8 <xTaskIncrementTick+0x158>)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005ff6:	e02e      	b.n	8006056 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	3304      	adds	r3, #4
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	f7ff fcac 	bl	800595a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006006:	2b00      	cmp	r3, #0
 8006008:	d004      	beq.n	8006014 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	3318      	adds	r3, #24
 800600e:	4618      	mov	r0, r3
 8006010:	f7ff fca3 	bl	800595a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006018:	2201      	movs	r2, #1
 800601a:	409a      	lsls	r2, r3
 800601c:	4b23      	ldr	r3, [pc, #140]	; (80060ac <xTaskIncrementTick+0x15c>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4313      	orrs	r3, r2
 8006022:	4a22      	ldr	r2, [pc, #136]	; (80060ac <xTaskIncrementTick+0x15c>)
 8006024:	6013      	str	r3, [r2, #0]
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800602a:	4613      	mov	r3, r2
 800602c:	009b      	lsls	r3, r3, #2
 800602e:	4413      	add	r3, r2
 8006030:	009b      	lsls	r3, r3, #2
 8006032:	4a1f      	ldr	r2, [pc, #124]	; (80060b0 <xTaskIncrementTick+0x160>)
 8006034:	441a      	add	r2, r3
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	3304      	adds	r3, #4
 800603a:	4619      	mov	r1, r3
 800603c:	4610      	mov	r0, r2
 800603e:	f7ff fc2f 	bl	80058a0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006046:	4b1b      	ldr	r3, [pc, #108]	; (80060b4 <xTaskIncrementTick+0x164>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800604c:	429a      	cmp	r2, r3
 800604e:	d3b9      	bcc.n	8005fc4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006050:	2301      	movs	r3, #1
 8006052:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006054:	e7b6      	b.n	8005fc4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006056:	4b17      	ldr	r3, [pc, #92]	; (80060b4 <xTaskIncrementTick+0x164>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800605c:	4914      	ldr	r1, [pc, #80]	; (80060b0 <xTaskIncrementTick+0x160>)
 800605e:	4613      	mov	r3, r2
 8006060:	009b      	lsls	r3, r3, #2
 8006062:	4413      	add	r3, r2
 8006064:	009b      	lsls	r3, r3, #2
 8006066:	440b      	add	r3, r1
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	2b01      	cmp	r3, #1
 800606c:	d901      	bls.n	8006072 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800606e:	2301      	movs	r3, #1
 8006070:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006072:	4b11      	ldr	r3, [pc, #68]	; (80060b8 <xTaskIncrementTick+0x168>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d007      	beq.n	800608a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800607a:	2301      	movs	r3, #1
 800607c:	617b      	str	r3, [r7, #20]
 800607e:	e004      	b.n	800608a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006080:	4b0e      	ldr	r3, [pc, #56]	; (80060bc <xTaskIncrementTick+0x16c>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	3301      	adds	r3, #1
 8006086:	4a0d      	ldr	r2, [pc, #52]	; (80060bc <xTaskIncrementTick+0x16c>)
 8006088:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800608a:	697b      	ldr	r3, [r7, #20]
}
 800608c:	4618      	mov	r0, r3
 800608e:	3718      	adds	r7, #24
 8006090:	46bd      	mov	sp, r7
 8006092:	bd80      	pop	{r7, pc}
 8006094:	20000698 	.word	0x20000698
 8006098:	20000674 	.word	0x20000674
 800609c:	20000628 	.word	0x20000628
 80060a0:	2000062c 	.word	0x2000062c
 80060a4:	20000688 	.word	0x20000688
 80060a8:	20000690 	.word	0x20000690
 80060ac:	20000678 	.word	0x20000678
 80060b0:	20000574 	.word	0x20000574
 80060b4:	20000570 	.word	0x20000570
 80060b8:	20000684 	.word	0x20000684
 80060bc:	20000680 	.word	0x20000680

080060c0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80060c0:	b480      	push	{r7}
 80060c2:	b087      	sub	sp, #28
 80060c4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80060c6:	4b27      	ldr	r3, [pc, #156]	; (8006164 <vTaskSwitchContext+0xa4>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d003      	beq.n	80060d6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80060ce:	4b26      	ldr	r3, [pc, #152]	; (8006168 <vTaskSwitchContext+0xa8>)
 80060d0:	2201      	movs	r2, #1
 80060d2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80060d4:	e03f      	b.n	8006156 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80060d6:	4b24      	ldr	r3, [pc, #144]	; (8006168 <vTaskSwitchContext+0xa8>)
 80060d8:	2200      	movs	r2, #0
 80060da:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060dc:	4b23      	ldr	r3, [pc, #140]	; (800616c <vTaskSwitchContext+0xac>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	fab3 f383 	clz	r3, r3
 80060e8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80060ea:	7afb      	ldrb	r3, [r7, #11]
 80060ec:	f1c3 031f 	rsb	r3, r3, #31
 80060f0:	617b      	str	r3, [r7, #20]
 80060f2:	491f      	ldr	r1, [pc, #124]	; (8006170 <vTaskSwitchContext+0xb0>)
 80060f4:	697a      	ldr	r2, [r7, #20]
 80060f6:	4613      	mov	r3, r2
 80060f8:	009b      	lsls	r3, r3, #2
 80060fa:	4413      	add	r3, r2
 80060fc:	009b      	lsls	r3, r3, #2
 80060fe:	440b      	add	r3, r1
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d10a      	bne.n	800611c <vTaskSwitchContext+0x5c>
	__asm volatile
 8006106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800610a:	f383 8811 	msr	BASEPRI, r3
 800610e:	f3bf 8f6f 	isb	sy
 8006112:	f3bf 8f4f 	dsb	sy
 8006116:	607b      	str	r3, [r7, #4]
}
 8006118:	bf00      	nop
 800611a:	e7fe      	b.n	800611a <vTaskSwitchContext+0x5a>
 800611c:	697a      	ldr	r2, [r7, #20]
 800611e:	4613      	mov	r3, r2
 8006120:	009b      	lsls	r3, r3, #2
 8006122:	4413      	add	r3, r2
 8006124:	009b      	lsls	r3, r3, #2
 8006126:	4a12      	ldr	r2, [pc, #72]	; (8006170 <vTaskSwitchContext+0xb0>)
 8006128:	4413      	add	r3, r2
 800612a:	613b      	str	r3, [r7, #16]
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	685a      	ldr	r2, [r3, #4]
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	605a      	str	r2, [r3, #4]
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	685a      	ldr	r2, [r3, #4]
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	3308      	adds	r3, #8
 800613e:	429a      	cmp	r2, r3
 8006140:	d104      	bne.n	800614c <vTaskSwitchContext+0x8c>
 8006142:	693b      	ldr	r3, [r7, #16]
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	685a      	ldr	r2, [r3, #4]
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	605a      	str	r2, [r3, #4]
 800614c:	693b      	ldr	r3, [r7, #16]
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	68db      	ldr	r3, [r3, #12]
 8006152:	4a08      	ldr	r2, [pc, #32]	; (8006174 <vTaskSwitchContext+0xb4>)
 8006154:	6013      	str	r3, [r2, #0]
}
 8006156:	bf00      	nop
 8006158:	371c      	adds	r7, #28
 800615a:	46bd      	mov	sp, r7
 800615c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006160:	4770      	bx	lr
 8006162:	bf00      	nop
 8006164:	20000698 	.word	0x20000698
 8006168:	20000684 	.word	0x20000684
 800616c:	20000678 	.word	0x20000678
 8006170:	20000574 	.word	0x20000574
 8006174:	20000570 	.word	0x20000570

08006178 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b082      	sub	sp, #8
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006180:	f000 f852 	bl	8006228 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006184:	4b06      	ldr	r3, [pc, #24]	; (80061a0 <prvIdleTask+0x28>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	2b01      	cmp	r3, #1
 800618a:	d9f9      	bls.n	8006180 <prvIdleTask+0x8>
			{
				taskYIELD();
 800618c:	4b05      	ldr	r3, [pc, #20]	; (80061a4 <prvIdleTask+0x2c>)
 800618e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006192:	601a      	str	r2, [r3, #0]
 8006194:	f3bf 8f4f 	dsb	sy
 8006198:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800619c:	e7f0      	b.n	8006180 <prvIdleTask+0x8>
 800619e:	bf00      	nop
 80061a0:	20000574 	.word	0x20000574
 80061a4:	e000ed04 	.word	0xe000ed04

080061a8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b082      	sub	sp, #8
 80061ac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80061ae:	2300      	movs	r3, #0
 80061b0:	607b      	str	r3, [r7, #4]
 80061b2:	e00c      	b.n	80061ce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80061b4:	687a      	ldr	r2, [r7, #4]
 80061b6:	4613      	mov	r3, r2
 80061b8:	009b      	lsls	r3, r3, #2
 80061ba:	4413      	add	r3, r2
 80061bc:	009b      	lsls	r3, r3, #2
 80061be:	4a12      	ldr	r2, [pc, #72]	; (8006208 <prvInitialiseTaskLists+0x60>)
 80061c0:	4413      	add	r3, r2
 80061c2:	4618      	mov	r0, r3
 80061c4:	f7ff fb3f 	bl	8005846 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	3301      	adds	r3, #1
 80061cc:	607b      	str	r3, [r7, #4]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2b06      	cmp	r3, #6
 80061d2:	d9ef      	bls.n	80061b4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80061d4:	480d      	ldr	r0, [pc, #52]	; (800620c <prvInitialiseTaskLists+0x64>)
 80061d6:	f7ff fb36 	bl	8005846 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80061da:	480d      	ldr	r0, [pc, #52]	; (8006210 <prvInitialiseTaskLists+0x68>)
 80061dc:	f7ff fb33 	bl	8005846 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80061e0:	480c      	ldr	r0, [pc, #48]	; (8006214 <prvInitialiseTaskLists+0x6c>)
 80061e2:	f7ff fb30 	bl	8005846 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80061e6:	480c      	ldr	r0, [pc, #48]	; (8006218 <prvInitialiseTaskLists+0x70>)
 80061e8:	f7ff fb2d 	bl	8005846 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80061ec:	480b      	ldr	r0, [pc, #44]	; (800621c <prvInitialiseTaskLists+0x74>)
 80061ee:	f7ff fb2a 	bl	8005846 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80061f2:	4b0b      	ldr	r3, [pc, #44]	; (8006220 <prvInitialiseTaskLists+0x78>)
 80061f4:	4a05      	ldr	r2, [pc, #20]	; (800620c <prvInitialiseTaskLists+0x64>)
 80061f6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80061f8:	4b0a      	ldr	r3, [pc, #40]	; (8006224 <prvInitialiseTaskLists+0x7c>)
 80061fa:	4a05      	ldr	r2, [pc, #20]	; (8006210 <prvInitialiseTaskLists+0x68>)
 80061fc:	601a      	str	r2, [r3, #0]
}
 80061fe:	bf00      	nop
 8006200:	3708      	adds	r7, #8
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}
 8006206:	bf00      	nop
 8006208:	20000574 	.word	0x20000574
 800620c:	20000600 	.word	0x20000600
 8006210:	20000614 	.word	0x20000614
 8006214:	20000630 	.word	0x20000630
 8006218:	20000644 	.word	0x20000644
 800621c:	2000065c 	.word	0x2000065c
 8006220:	20000628 	.word	0x20000628
 8006224:	2000062c 	.word	0x2000062c

08006228 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b082      	sub	sp, #8
 800622c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800622e:	e019      	b.n	8006264 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006230:	f000 fa08 	bl	8006644 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006234:	4b10      	ldr	r3, [pc, #64]	; (8006278 <prvCheckTasksWaitingTermination+0x50>)
 8006236:	68db      	ldr	r3, [r3, #12]
 8006238:	68db      	ldr	r3, [r3, #12]
 800623a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	3304      	adds	r3, #4
 8006240:	4618      	mov	r0, r3
 8006242:	f7ff fb8a 	bl	800595a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006246:	4b0d      	ldr	r3, [pc, #52]	; (800627c <prvCheckTasksWaitingTermination+0x54>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	3b01      	subs	r3, #1
 800624c:	4a0b      	ldr	r2, [pc, #44]	; (800627c <prvCheckTasksWaitingTermination+0x54>)
 800624e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006250:	4b0b      	ldr	r3, [pc, #44]	; (8006280 <prvCheckTasksWaitingTermination+0x58>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	3b01      	subs	r3, #1
 8006256:	4a0a      	ldr	r2, [pc, #40]	; (8006280 <prvCheckTasksWaitingTermination+0x58>)
 8006258:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800625a:	f000 fa23 	bl	80066a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f000 f810 	bl	8006284 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006264:	4b06      	ldr	r3, [pc, #24]	; (8006280 <prvCheckTasksWaitingTermination+0x58>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d1e1      	bne.n	8006230 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800626c:	bf00      	nop
 800626e:	bf00      	nop
 8006270:	3708      	adds	r7, #8
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}
 8006276:	bf00      	nop
 8006278:	20000644 	.word	0x20000644
 800627c:	20000670 	.word	0x20000670
 8006280:	20000658 	.word	0x20000658

08006284 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006284:	b580      	push	{r7, lr}
 8006286:	b084      	sub	sp, #16
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006292:	2b00      	cmp	r3, #0
 8006294:	d108      	bne.n	80062a8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800629a:	4618      	mov	r0, r3
 800629c:	f000 fb80 	bl	80069a0 <vPortFree>
				vPortFree( pxTCB );
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	f000 fb7d 	bl	80069a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80062a6:	e018      	b.n	80062da <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80062ae:	2b01      	cmp	r3, #1
 80062b0:	d103      	bne.n	80062ba <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f000 fb74 	bl	80069a0 <vPortFree>
	}
 80062b8:	e00f      	b.n	80062da <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80062c0:	2b02      	cmp	r3, #2
 80062c2:	d00a      	beq.n	80062da <prvDeleteTCB+0x56>
	__asm volatile
 80062c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062c8:	f383 8811 	msr	BASEPRI, r3
 80062cc:	f3bf 8f6f 	isb	sy
 80062d0:	f3bf 8f4f 	dsb	sy
 80062d4:	60fb      	str	r3, [r7, #12]
}
 80062d6:	bf00      	nop
 80062d8:	e7fe      	b.n	80062d8 <prvDeleteTCB+0x54>
	}
 80062da:	bf00      	nop
 80062dc:	3710      	adds	r7, #16
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}
	...

080062e4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80062e4:	b480      	push	{r7}
 80062e6:	b083      	sub	sp, #12
 80062e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80062ea:	4b0c      	ldr	r3, [pc, #48]	; (800631c <prvResetNextTaskUnblockTime+0x38>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d104      	bne.n	80062fe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80062f4:	4b0a      	ldr	r3, [pc, #40]	; (8006320 <prvResetNextTaskUnblockTime+0x3c>)
 80062f6:	f04f 32ff 	mov.w	r2, #4294967295
 80062fa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80062fc:	e008      	b.n	8006310 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062fe:	4b07      	ldr	r3, [pc, #28]	; (800631c <prvResetNextTaskUnblockTime+0x38>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	68db      	ldr	r3, [r3, #12]
 8006304:	68db      	ldr	r3, [r3, #12]
 8006306:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	685b      	ldr	r3, [r3, #4]
 800630c:	4a04      	ldr	r2, [pc, #16]	; (8006320 <prvResetNextTaskUnblockTime+0x3c>)
 800630e:	6013      	str	r3, [r2, #0]
}
 8006310:	bf00      	nop
 8006312:	370c      	adds	r7, #12
 8006314:	46bd      	mov	sp, r7
 8006316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631a:	4770      	bx	lr
 800631c:	20000628 	.word	0x20000628
 8006320:	20000690 	.word	0x20000690

08006324 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b084      	sub	sp, #16
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
 800632c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800632e:	4b29      	ldr	r3, [pc, #164]	; (80063d4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006334:	4b28      	ldr	r3, [pc, #160]	; (80063d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	3304      	adds	r3, #4
 800633a:	4618      	mov	r0, r3
 800633c:	f7ff fb0d 	bl	800595a <uxListRemove>
 8006340:	4603      	mov	r3, r0
 8006342:	2b00      	cmp	r3, #0
 8006344:	d10b      	bne.n	800635e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006346:	4b24      	ldr	r3, [pc, #144]	; (80063d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800634c:	2201      	movs	r2, #1
 800634e:	fa02 f303 	lsl.w	r3, r2, r3
 8006352:	43da      	mvns	r2, r3
 8006354:	4b21      	ldr	r3, [pc, #132]	; (80063dc <prvAddCurrentTaskToDelayedList+0xb8>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4013      	ands	r3, r2
 800635a:	4a20      	ldr	r2, [pc, #128]	; (80063dc <prvAddCurrentTaskToDelayedList+0xb8>)
 800635c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006364:	d10a      	bne.n	800637c <prvAddCurrentTaskToDelayedList+0x58>
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d007      	beq.n	800637c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800636c:	4b1a      	ldr	r3, [pc, #104]	; (80063d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	3304      	adds	r3, #4
 8006372:	4619      	mov	r1, r3
 8006374:	481a      	ldr	r0, [pc, #104]	; (80063e0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006376:	f7ff fa93 	bl	80058a0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800637a:	e026      	b.n	80063ca <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800637c:	68fa      	ldr	r2, [r7, #12]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	4413      	add	r3, r2
 8006382:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006384:	4b14      	ldr	r3, [pc, #80]	; (80063d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	68ba      	ldr	r2, [r7, #8]
 800638a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800638c:	68ba      	ldr	r2, [r7, #8]
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	429a      	cmp	r2, r3
 8006392:	d209      	bcs.n	80063a8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006394:	4b13      	ldr	r3, [pc, #76]	; (80063e4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006396:	681a      	ldr	r2, [r3, #0]
 8006398:	4b0f      	ldr	r3, [pc, #60]	; (80063d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	3304      	adds	r3, #4
 800639e:	4619      	mov	r1, r3
 80063a0:	4610      	mov	r0, r2
 80063a2:	f7ff faa1 	bl	80058e8 <vListInsert>
}
 80063a6:	e010      	b.n	80063ca <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80063a8:	4b0f      	ldr	r3, [pc, #60]	; (80063e8 <prvAddCurrentTaskToDelayedList+0xc4>)
 80063aa:	681a      	ldr	r2, [r3, #0]
 80063ac:	4b0a      	ldr	r3, [pc, #40]	; (80063d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	3304      	adds	r3, #4
 80063b2:	4619      	mov	r1, r3
 80063b4:	4610      	mov	r0, r2
 80063b6:	f7ff fa97 	bl	80058e8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80063ba:	4b0c      	ldr	r3, [pc, #48]	; (80063ec <prvAddCurrentTaskToDelayedList+0xc8>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	68ba      	ldr	r2, [r7, #8]
 80063c0:	429a      	cmp	r2, r3
 80063c2:	d202      	bcs.n	80063ca <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80063c4:	4a09      	ldr	r2, [pc, #36]	; (80063ec <prvAddCurrentTaskToDelayedList+0xc8>)
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	6013      	str	r3, [r2, #0]
}
 80063ca:	bf00      	nop
 80063cc:	3710      	adds	r7, #16
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}
 80063d2:	bf00      	nop
 80063d4:	20000674 	.word	0x20000674
 80063d8:	20000570 	.word	0x20000570
 80063dc:	20000678 	.word	0x20000678
 80063e0:	2000065c 	.word	0x2000065c
 80063e4:	2000062c 	.word	0x2000062c
 80063e8:	20000628 	.word	0x20000628
 80063ec:	20000690 	.word	0x20000690

080063f0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80063f0:	b480      	push	{r7}
 80063f2:	b085      	sub	sp, #20
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	60f8      	str	r0, [r7, #12]
 80063f8:	60b9      	str	r1, [r7, #8]
 80063fa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	3b04      	subs	r3, #4
 8006400:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006408:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	3b04      	subs	r3, #4
 800640e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	f023 0201 	bic.w	r2, r3, #1
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	3b04      	subs	r3, #4
 800641e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006420:	4a0c      	ldr	r2, [pc, #48]	; (8006454 <pxPortInitialiseStack+0x64>)
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	3b14      	subs	r3, #20
 800642a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800642c:	687a      	ldr	r2, [r7, #4]
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	3b04      	subs	r3, #4
 8006436:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	f06f 0202 	mvn.w	r2, #2
 800643e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	3b20      	subs	r3, #32
 8006444:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006446:	68fb      	ldr	r3, [r7, #12]
}
 8006448:	4618      	mov	r0, r3
 800644a:	3714      	adds	r7, #20
 800644c:	46bd      	mov	sp, r7
 800644e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006452:	4770      	bx	lr
 8006454:	08006459 	.word	0x08006459

08006458 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006458:	b480      	push	{r7}
 800645a:	b085      	sub	sp, #20
 800645c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800645e:	2300      	movs	r3, #0
 8006460:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006462:	4b12      	ldr	r3, [pc, #72]	; (80064ac <prvTaskExitError+0x54>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f1b3 3fff 	cmp.w	r3, #4294967295
 800646a:	d00a      	beq.n	8006482 <prvTaskExitError+0x2a>
	__asm volatile
 800646c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006470:	f383 8811 	msr	BASEPRI, r3
 8006474:	f3bf 8f6f 	isb	sy
 8006478:	f3bf 8f4f 	dsb	sy
 800647c:	60fb      	str	r3, [r7, #12]
}
 800647e:	bf00      	nop
 8006480:	e7fe      	b.n	8006480 <prvTaskExitError+0x28>
	__asm volatile
 8006482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006486:	f383 8811 	msr	BASEPRI, r3
 800648a:	f3bf 8f6f 	isb	sy
 800648e:	f3bf 8f4f 	dsb	sy
 8006492:	60bb      	str	r3, [r7, #8]
}
 8006494:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006496:	bf00      	nop
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d0fc      	beq.n	8006498 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800649e:	bf00      	nop
 80064a0:	bf00      	nop
 80064a2:	3714      	adds	r7, #20
 80064a4:	46bd      	mov	sp, r7
 80064a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064aa:	4770      	bx	lr
 80064ac:	2000000c 	.word	0x2000000c

080064b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80064b0:	4b07      	ldr	r3, [pc, #28]	; (80064d0 <pxCurrentTCBConst2>)
 80064b2:	6819      	ldr	r1, [r3, #0]
 80064b4:	6808      	ldr	r0, [r1, #0]
 80064b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064ba:	f380 8809 	msr	PSP, r0
 80064be:	f3bf 8f6f 	isb	sy
 80064c2:	f04f 0000 	mov.w	r0, #0
 80064c6:	f380 8811 	msr	BASEPRI, r0
 80064ca:	4770      	bx	lr
 80064cc:	f3af 8000 	nop.w

080064d0 <pxCurrentTCBConst2>:
 80064d0:	20000570 	.word	0x20000570
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80064d4:	bf00      	nop
 80064d6:	bf00      	nop

080064d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80064d8:	4808      	ldr	r0, [pc, #32]	; (80064fc <prvPortStartFirstTask+0x24>)
 80064da:	6800      	ldr	r0, [r0, #0]
 80064dc:	6800      	ldr	r0, [r0, #0]
 80064de:	f380 8808 	msr	MSP, r0
 80064e2:	f04f 0000 	mov.w	r0, #0
 80064e6:	f380 8814 	msr	CONTROL, r0
 80064ea:	b662      	cpsie	i
 80064ec:	b661      	cpsie	f
 80064ee:	f3bf 8f4f 	dsb	sy
 80064f2:	f3bf 8f6f 	isb	sy
 80064f6:	df00      	svc	0
 80064f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80064fa:	bf00      	nop
 80064fc:	e000ed08 	.word	0xe000ed08

08006500 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b086      	sub	sp, #24
 8006504:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006506:	4b46      	ldr	r3, [pc, #280]	; (8006620 <xPortStartScheduler+0x120>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4a46      	ldr	r2, [pc, #280]	; (8006624 <xPortStartScheduler+0x124>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d10a      	bne.n	8006526 <xPortStartScheduler+0x26>
	__asm volatile
 8006510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006514:	f383 8811 	msr	BASEPRI, r3
 8006518:	f3bf 8f6f 	isb	sy
 800651c:	f3bf 8f4f 	dsb	sy
 8006520:	613b      	str	r3, [r7, #16]
}
 8006522:	bf00      	nop
 8006524:	e7fe      	b.n	8006524 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006526:	4b3e      	ldr	r3, [pc, #248]	; (8006620 <xPortStartScheduler+0x120>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a3f      	ldr	r2, [pc, #252]	; (8006628 <xPortStartScheduler+0x128>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d10a      	bne.n	8006546 <xPortStartScheduler+0x46>
	__asm volatile
 8006530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006534:	f383 8811 	msr	BASEPRI, r3
 8006538:	f3bf 8f6f 	isb	sy
 800653c:	f3bf 8f4f 	dsb	sy
 8006540:	60fb      	str	r3, [r7, #12]
}
 8006542:	bf00      	nop
 8006544:	e7fe      	b.n	8006544 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006546:	4b39      	ldr	r3, [pc, #228]	; (800662c <xPortStartScheduler+0x12c>)
 8006548:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800654a:	697b      	ldr	r3, [r7, #20]
 800654c:	781b      	ldrb	r3, [r3, #0]
 800654e:	b2db      	uxtb	r3, r3
 8006550:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	22ff      	movs	r2, #255	; 0xff
 8006556:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	781b      	ldrb	r3, [r3, #0]
 800655c:	b2db      	uxtb	r3, r3
 800655e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006560:	78fb      	ldrb	r3, [r7, #3]
 8006562:	b2db      	uxtb	r3, r3
 8006564:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006568:	b2da      	uxtb	r2, r3
 800656a:	4b31      	ldr	r3, [pc, #196]	; (8006630 <xPortStartScheduler+0x130>)
 800656c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800656e:	4b31      	ldr	r3, [pc, #196]	; (8006634 <xPortStartScheduler+0x134>)
 8006570:	2207      	movs	r2, #7
 8006572:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006574:	e009      	b.n	800658a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006576:	4b2f      	ldr	r3, [pc, #188]	; (8006634 <xPortStartScheduler+0x134>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	3b01      	subs	r3, #1
 800657c:	4a2d      	ldr	r2, [pc, #180]	; (8006634 <xPortStartScheduler+0x134>)
 800657e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006580:	78fb      	ldrb	r3, [r7, #3]
 8006582:	b2db      	uxtb	r3, r3
 8006584:	005b      	lsls	r3, r3, #1
 8006586:	b2db      	uxtb	r3, r3
 8006588:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800658a:	78fb      	ldrb	r3, [r7, #3]
 800658c:	b2db      	uxtb	r3, r3
 800658e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006592:	2b80      	cmp	r3, #128	; 0x80
 8006594:	d0ef      	beq.n	8006576 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006596:	4b27      	ldr	r3, [pc, #156]	; (8006634 <xPortStartScheduler+0x134>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f1c3 0307 	rsb	r3, r3, #7
 800659e:	2b04      	cmp	r3, #4
 80065a0:	d00a      	beq.n	80065b8 <xPortStartScheduler+0xb8>
	__asm volatile
 80065a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065a6:	f383 8811 	msr	BASEPRI, r3
 80065aa:	f3bf 8f6f 	isb	sy
 80065ae:	f3bf 8f4f 	dsb	sy
 80065b2:	60bb      	str	r3, [r7, #8]
}
 80065b4:	bf00      	nop
 80065b6:	e7fe      	b.n	80065b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80065b8:	4b1e      	ldr	r3, [pc, #120]	; (8006634 <xPortStartScheduler+0x134>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	021b      	lsls	r3, r3, #8
 80065be:	4a1d      	ldr	r2, [pc, #116]	; (8006634 <xPortStartScheduler+0x134>)
 80065c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80065c2:	4b1c      	ldr	r3, [pc, #112]	; (8006634 <xPortStartScheduler+0x134>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80065ca:	4a1a      	ldr	r2, [pc, #104]	; (8006634 <xPortStartScheduler+0x134>)
 80065cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	b2da      	uxtb	r2, r3
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80065d6:	4b18      	ldr	r3, [pc, #96]	; (8006638 <xPortStartScheduler+0x138>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	4a17      	ldr	r2, [pc, #92]	; (8006638 <xPortStartScheduler+0x138>)
 80065dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80065e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80065e2:	4b15      	ldr	r3, [pc, #84]	; (8006638 <xPortStartScheduler+0x138>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4a14      	ldr	r2, [pc, #80]	; (8006638 <xPortStartScheduler+0x138>)
 80065e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80065ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80065ee:	f000 f8dd 	bl	80067ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80065f2:	4b12      	ldr	r3, [pc, #72]	; (800663c <xPortStartScheduler+0x13c>)
 80065f4:	2200      	movs	r2, #0
 80065f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80065f8:	f000 f8fc 	bl	80067f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80065fc:	4b10      	ldr	r3, [pc, #64]	; (8006640 <xPortStartScheduler+0x140>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a0f      	ldr	r2, [pc, #60]	; (8006640 <xPortStartScheduler+0x140>)
 8006602:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006606:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006608:	f7ff ff66 	bl	80064d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800660c:	f7ff fd58 	bl	80060c0 <vTaskSwitchContext>
	prvTaskExitError();
 8006610:	f7ff ff22 	bl	8006458 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006614:	2300      	movs	r3, #0
}
 8006616:	4618      	mov	r0, r3
 8006618:	3718      	adds	r7, #24
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}
 800661e:	bf00      	nop
 8006620:	e000ed00 	.word	0xe000ed00
 8006624:	410fc271 	.word	0x410fc271
 8006628:	410fc270 	.word	0x410fc270
 800662c:	e000e400 	.word	0xe000e400
 8006630:	2000069c 	.word	0x2000069c
 8006634:	200006a0 	.word	0x200006a0
 8006638:	e000ed20 	.word	0xe000ed20
 800663c:	2000000c 	.word	0x2000000c
 8006640:	e000ef34 	.word	0xe000ef34

08006644 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006644:	b480      	push	{r7}
 8006646:	b083      	sub	sp, #12
 8006648:	af00      	add	r7, sp, #0
	__asm volatile
 800664a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800664e:	f383 8811 	msr	BASEPRI, r3
 8006652:	f3bf 8f6f 	isb	sy
 8006656:	f3bf 8f4f 	dsb	sy
 800665a:	607b      	str	r3, [r7, #4]
}
 800665c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800665e:	4b0f      	ldr	r3, [pc, #60]	; (800669c <vPortEnterCritical+0x58>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	3301      	adds	r3, #1
 8006664:	4a0d      	ldr	r2, [pc, #52]	; (800669c <vPortEnterCritical+0x58>)
 8006666:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006668:	4b0c      	ldr	r3, [pc, #48]	; (800669c <vPortEnterCritical+0x58>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	2b01      	cmp	r3, #1
 800666e:	d10f      	bne.n	8006690 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006670:	4b0b      	ldr	r3, [pc, #44]	; (80066a0 <vPortEnterCritical+0x5c>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	b2db      	uxtb	r3, r3
 8006676:	2b00      	cmp	r3, #0
 8006678:	d00a      	beq.n	8006690 <vPortEnterCritical+0x4c>
	__asm volatile
 800667a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800667e:	f383 8811 	msr	BASEPRI, r3
 8006682:	f3bf 8f6f 	isb	sy
 8006686:	f3bf 8f4f 	dsb	sy
 800668a:	603b      	str	r3, [r7, #0]
}
 800668c:	bf00      	nop
 800668e:	e7fe      	b.n	800668e <vPortEnterCritical+0x4a>
	}
}
 8006690:	bf00      	nop
 8006692:	370c      	adds	r7, #12
 8006694:	46bd      	mov	sp, r7
 8006696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669a:	4770      	bx	lr
 800669c:	2000000c 	.word	0x2000000c
 80066a0:	e000ed04 	.word	0xe000ed04

080066a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80066a4:	b480      	push	{r7}
 80066a6:	b083      	sub	sp, #12
 80066a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80066aa:	4b12      	ldr	r3, [pc, #72]	; (80066f4 <vPortExitCritical+0x50>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d10a      	bne.n	80066c8 <vPortExitCritical+0x24>
	__asm volatile
 80066b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066b6:	f383 8811 	msr	BASEPRI, r3
 80066ba:	f3bf 8f6f 	isb	sy
 80066be:	f3bf 8f4f 	dsb	sy
 80066c2:	607b      	str	r3, [r7, #4]
}
 80066c4:	bf00      	nop
 80066c6:	e7fe      	b.n	80066c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80066c8:	4b0a      	ldr	r3, [pc, #40]	; (80066f4 <vPortExitCritical+0x50>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	3b01      	subs	r3, #1
 80066ce:	4a09      	ldr	r2, [pc, #36]	; (80066f4 <vPortExitCritical+0x50>)
 80066d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80066d2:	4b08      	ldr	r3, [pc, #32]	; (80066f4 <vPortExitCritical+0x50>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d105      	bne.n	80066e6 <vPortExitCritical+0x42>
 80066da:	2300      	movs	r3, #0
 80066dc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80066e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80066e6:	bf00      	nop
 80066e8:	370c      	adds	r7, #12
 80066ea:	46bd      	mov	sp, r7
 80066ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f0:	4770      	bx	lr
 80066f2:	bf00      	nop
 80066f4:	2000000c 	.word	0x2000000c
	...

08006700 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006700:	f3ef 8009 	mrs	r0, PSP
 8006704:	f3bf 8f6f 	isb	sy
 8006708:	4b15      	ldr	r3, [pc, #84]	; (8006760 <pxCurrentTCBConst>)
 800670a:	681a      	ldr	r2, [r3, #0]
 800670c:	f01e 0f10 	tst.w	lr, #16
 8006710:	bf08      	it	eq
 8006712:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006716:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800671a:	6010      	str	r0, [r2, #0]
 800671c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006720:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006724:	f380 8811 	msr	BASEPRI, r0
 8006728:	f3bf 8f4f 	dsb	sy
 800672c:	f3bf 8f6f 	isb	sy
 8006730:	f7ff fcc6 	bl	80060c0 <vTaskSwitchContext>
 8006734:	f04f 0000 	mov.w	r0, #0
 8006738:	f380 8811 	msr	BASEPRI, r0
 800673c:	bc09      	pop	{r0, r3}
 800673e:	6819      	ldr	r1, [r3, #0]
 8006740:	6808      	ldr	r0, [r1, #0]
 8006742:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006746:	f01e 0f10 	tst.w	lr, #16
 800674a:	bf08      	it	eq
 800674c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006750:	f380 8809 	msr	PSP, r0
 8006754:	f3bf 8f6f 	isb	sy
 8006758:	4770      	bx	lr
 800675a:	bf00      	nop
 800675c:	f3af 8000 	nop.w

08006760 <pxCurrentTCBConst>:
 8006760:	20000570 	.word	0x20000570
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006764:	bf00      	nop
 8006766:	bf00      	nop

08006768 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b082      	sub	sp, #8
 800676c:	af00      	add	r7, sp, #0
	__asm volatile
 800676e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006772:	f383 8811 	msr	BASEPRI, r3
 8006776:	f3bf 8f6f 	isb	sy
 800677a:	f3bf 8f4f 	dsb	sy
 800677e:	607b      	str	r3, [r7, #4]
}
 8006780:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006782:	f7ff fbe5 	bl	8005f50 <xTaskIncrementTick>
 8006786:	4603      	mov	r3, r0
 8006788:	2b00      	cmp	r3, #0
 800678a:	d003      	beq.n	8006794 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800678c:	4b06      	ldr	r3, [pc, #24]	; (80067a8 <SysTick_Handler+0x40>)
 800678e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006792:	601a      	str	r2, [r3, #0]
 8006794:	2300      	movs	r3, #0
 8006796:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	f383 8811 	msr	BASEPRI, r3
}
 800679e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80067a0:	bf00      	nop
 80067a2:	3708      	adds	r7, #8
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}
 80067a8:	e000ed04 	.word	0xe000ed04

080067ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80067ac:	b480      	push	{r7}
 80067ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80067b0:	4b0b      	ldr	r3, [pc, #44]	; (80067e0 <vPortSetupTimerInterrupt+0x34>)
 80067b2:	2200      	movs	r2, #0
 80067b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80067b6:	4b0b      	ldr	r3, [pc, #44]	; (80067e4 <vPortSetupTimerInterrupt+0x38>)
 80067b8:	2200      	movs	r2, #0
 80067ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80067bc:	4b0a      	ldr	r3, [pc, #40]	; (80067e8 <vPortSetupTimerInterrupt+0x3c>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4a0a      	ldr	r2, [pc, #40]	; (80067ec <vPortSetupTimerInterrupt+0x40>)
 80067c2:	fba2 2303 	umull	r2, r3, r2, r3
 80067c6:	099b      	lsrs	r3, r3, #6
 80067c8:	4a09      	ldr	r2, [pc, #36]	; (80067f0 <vPortSetupTimerInterrupt+0x44>)
 80067ca:	3b01      	subs	r3, #1
 80067cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80067ce:	4b04      	ldr	r3, [pc, #16]	; (80067e0 <vPortSetupTimerInterrupt+0x34>)
 80067d0:	2207      	movs	r2, #7
 80067d2:	601a      	str	r2, [r3, #0]
}
 80067d4:	bf00      	nop
 80067d6:	46bd      	mov	sp, r7
 80067d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067dc:	4770      	bx	lr
 80067de:	bf00      	nop
 80067e0:	e000e010 	.word	0xe000e010
 80067e4:	e000e018 	.word	0xe000e018
 80067e8:	20000000 	.word	0x20000000
 80067ec:	10624dd3 	.word	0x10624dd3
 80067f0:	e000e014 	.word	0xe000e014

080067f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80067f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006804 <vPortEnableVFP+0x10>
 80067f8:	6801      	ldr	r1, [r0, #0]
 80067fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80067fe:	6001      	str	r1, [r0, #0]
 8006800:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006802:	bf00      	nop
 8006804:	e000ed88 	.word	0xe000ed88

08006808 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b08a      	sub	sp, #40	; 0x28
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006810:	2300      	movs	r3, #0
 8006812:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006814:	f7ff faf2 	bl	8005dfc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006818:	4b5b      	ldr	r3, [pc, #364]	; (8006988 <pvPortMalloc+0x180>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d101      	bne.n	8006824 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006820:	f000 f920 	bl	8006a64 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006824:	4b59      	ldr	r3, [pc, #356]	; (800698c <pvPortMalloc+0x184>)
 8006826:	681a      	ldr	r2, [r3, #0]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	4013      	ands	r3, r2
 800682c:	2b00      	cmp	r3, #0
 800682e:	f040 8093 	bne.w	8006958 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d01d      	beq.n	8006874 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006838:	2208      	movs	r2, #8
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	4413      	add	r3, r2
 800683e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f003 0307 	and.w	r3, r3, #7
 8006846:	2b00      	cmp	r3, #0
 8006848:	d014      	beq.n	8006874 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f023 0307 	bic.w	r3, r3, #7
 8006850:	3308      	adds	r3, #8
 8006852:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f003 0307 	and.w	r3, r3, #7
 800685a:	2b00      	cmp	r3, #0
 800685c:	d00a      	beq.n	8006874 <pvPortMalloc+0x6c>
	__asm volatile
 800685e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006862:	f383 8811 	msr	BASEPRI, r3
 8006866:	f3bf 8f6f 	isb	sy
 800686a:	f3bf 8f4f 	dsb	sy
 800686e:	617b      	str	r3, [r7, #20]
}
 8006870:	bf00      	nop
 8006872:	e7fe      	b.n	8006872 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d06e      	beq.n	8006958 <pvPortMalloc+0x150>
 800687a:	4b45      	ldr	r3, [pc, #276]	; (8006990 <pvPortMalloc+0x188>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	687a      	ldr	r2, [r7, #4]
 8006880:	429a      	cmp	r2, r3
 8006882:	d869      	bhi.n	8006958 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006884:	4b43      	ldr	r3, [pc, #268]	; (8006994 <pvPortMalloc+0x18c>)
 8006886:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006888:	4b42      	ldr	r3, [pc, #264]	; (8006994 <pvPortMalloc+0x18c>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800688e:	e004      	b.n	800689a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006892:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800689a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	687a      	ldr	r2, [r7, #4]
 80068a0:	429a      	cmp	r2, r3
 80068a2:	d903      	bls.n	80068ac <pvPortMalloc+0xa4>
 80068a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d1f1      	bne.n	8006890 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80068ac:	4b36      	ldr	r3, [pc, #216]	; (8006988 <pvPortMalloc+0x180>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068b2:	429a      	cmp	r2, r3
 80068b4:	d050      	beq.n	8006958 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80068b6:	6a3b      	ldr	r3, [r7, #32]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	2208      	movs	r2, #8
 80068bc:	4413      	add	r3, r2
 80068be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80068c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c2:	681a      	ldr	r2, [r3, #0]
 80068c4:	6a3b      	ldr	r3, [r7, #32]
 80068c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80068c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ca:	685a      	ldr	r2, [r3, #4]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	1ad2      	subs	r2, r2, r3
 80068d0:	2308      	movs	r3, #8
 80068d2:	005b      	lsls	r3, r3, #1
 80068d4:	429a      	cmp	r2, r3
 80068d6:	d91f      	bls.n	8006918 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80068d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	4413      	add	r3, r2
 80068de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80068e0:	69bb      	ldr	r3, [r7, #24]
 80068e2:	f003 0307 	and.w	r3, r3, #7
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d00a      	beq.n	8006900 <pvPortMalloc+0xf8>
	__asm volatile
 80068ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ee:	f383 8811 	msr	BASEPRI, r3
 80068f2:	f3bf 8f6f 	isb	sy
 80068f6:	f3bf 8f4f 	dsb	sy
 80068fa:	613b      	str	r3, [r7, #16]
}
 80068fc:	bf00      	nop
 80068fe:	e7fe      	b.n	80068fe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006902:	685a      	ldr	r2, [r3, #4]
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	1ad2      	subs	r2, r2, r3
 8006908:	69bb      	ldr	r3, [r7, #24]
 800690a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800690c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800690e:	687a      	ldr	r2, [r7, #4]
 8006910:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006912:	69b8      	ldr	r0, [r7, #24]
 8006914:	f000 f908 	bl	8006b28 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006918:	4b1d      	ldr	r3, [pc, #116]	; (8006990 <pvPortMalloc+0x188>)
 800691a:	681a      	ldr	r2, [r3, #0]
 800691c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800691e:	685b      	ldr	r3, [r3, #4]
 8006920:	1ad3      	subs	r3, r2, r3
 8006922:	4a1b      	ldr	r2, [pc, #108]	; (8006990 <pvPortMalloc+0x188>)
 8006924:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006926:	4b1a      	ldr	r3, [pc, #104]	; (8006990 <pvPortMalloc+0x188>)
 8006928:	681a      	ldr	r2, [r3, #0]
 800692a:	4b1b      	ldr	r3, [pc, #108]	; (8006998 <pvPortMalloc+0x190>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	429a      	cmp	r2, r3
 8006930:	d203      	bcs.n	800693a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006932:	4b17      	ldr	r3, [pc, #92]	; (8006990 <pvPortMalloc+0x188>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4a18      	ldr	r2, [pc, #96]	; (8006998 <pvPortMalloc+0x190>)
 8006938:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800693a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800693c:	685a      	ldr	r2, [r3, #4]
 800693e:	4b13      	ldr	r3, [pc, #76]	; (800698c <pvPortMalloc+0x184>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	431a      	orrs	r2, r3
 8006944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006946:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800694a:	2200      	movs	r2, #0
 800694c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800694e:	4b13      	ldr	r3, [pc, #76]	; (800699c <pvPortMalloc+0x194>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	3301      	adds	r3, #1
 8006954:	4a11      	ldr	r2, [pc, #68]	; (800699c <pvPortMalloc+0x194>)
 8006956:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006958:	f7ff fa5e 	bl	8005e18 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800695c:	69fb      	ldr	r3, [r7, #28]
 800695e:	f003 0307 	and.w	r3, r3, #7
 8006962:	2b00      	cmp	r3, #0
 8006964:	d00a      	beq.n	800697c <pvPortMalloc+0x174>
	__asm volatile
 8006966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800696a:	f383 8811 	msr	BASEPRI, r3
 800696e:	f3bf 8f6f 	isb	sy
 8006972:	f3bf 8f4f 	dsb	sy
 8006976:	60fb      	str	r3, [r7, #12]
}
 8006978:	bf00      	nop
 800697a:	e7fe      	b.n	800697a <pvPortMalloc+0x172>
	return pvReturn;
 800697c:	69fb      	ldr	r3, [r7, #28]
}
 800697e:	4618      	mov	r0, r3
 8006980:	3728      	adds	r7, #40	; 0x28
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}
 8006986:	bf00      	nop
 8006988:	200042ac 	.word	0x200042ac
 800698c:	200042c0 	.word	0x200042c0
 8006990:	200042b0 	.word	0x200042b0
 8006994:	200042a4 	.word	0x200042a4
 8006998:	200042b4 	.word	0x200042b4
 800699c:	200042b8 	.word	0x200042b8

080069a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b086      	sub	sp, #24
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d04d      	beq.n	8006a4e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80069b2:	2308      	movs	r3, #8
 80069b4:	425b      	negs	r3, r3
 80069b6:	697a      	ldr	r2, [r7, #20]
 80069b8:	4413      	add	r3, r2
 80069ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80069c0:	693b      	ldr	r3, [r7, #16]
 80069c2:	685a      	ldr	r2, [r3, #4]
 80069c4:	4b24      	ldr	r3, [pc, #144]	; (8006a58 <vPortFree+0xb8>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4013      	ands	r3, r2
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d10a      	bne.n	80069e4 <vPortFree+0x44>
	__asm volatile
 80069ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069d2:	f383 8811 	msr	BASEPRI, r3
 80069d6:	f3bf 8f6f 	isb	sy
 80069da:	f3bf 8f4f 	dsb	sy
 80069de:	60fb      	str	r3, [r7, #12]
}
 80069e0:	bf00      	nop
 80069e2:	e7fe      	b.n	80069e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80069e4:	693b      	ldr	r3, [r7, #16]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d00a      	beq.n	8006a02 <vPortFree+0x62>
	__asm volatile
 80069ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069f0:	f383 8811 	msr	BASEPRI, r3
 80069f4:	f3bf 8f6f 	isb	sy
 80069f8:	f3bf 8f4f 	dsb	sy
 80069fc:	60bb      	str	r3, [r7, #8]
}
 80069fe:	bf00      	nop
 8006a00:	e7fe      	b.n	8006a00 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006a02:	693b      	ldr	r3, [r7, #16]
 8006a04:	685a      	ldr	r2, [r3, #4]
 8006a06:	4b14      	ldr	r3, [pc, #80]	; (8006a58 <vPortFree+0xb8>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4013      	ands	r3, r2
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d01e      	beq.n	8006a4e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d11a      	bne.n	8006a4e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	685a      	ldr	r2, [r3, #4]
 8006a1c:	4b0e      	ldr	r3, [pc, #56]	; (8006a58 <vPortFree+0xb8>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	43db      	mvns	r3, r3
 8006a22:	401a      	ands	r2, r3
 8006a24:	693b      	ldr	r3, [r7, #16]
 8006a26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006a28:	f7ff f9e8 	bl	8005dfc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006a2c:	693b      	ldr	r3, [r7, #16]
 8006a2e:	685a      	ldr	r2, [r3, #4]
 8006a30:	4b0a      	ldr	r3, [pc, #40]	; (8006a5c <vPortFree+0xbc>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4413      	add	r3, r2
 8006a36:	4a09      	ldr	r2, [pc, #36]	; (8006a5c <vPortFree+0xbc>)
 8006a38:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006a3a:	6938      	ldr	r0, [r7, #16]
 8006a3c:	f000 f874 	bl	8006b28 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006a40:	4b07      	ldr	r3, [pc, #28]	; (8006a60 <vPortFree+0xc0>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	3301      	adds	r3, #1
 8006a46:	4a06      	ldr	r2, [pc, #24]	; (8006a60 <vPortFree+0xc0>)
 8006a48:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006a4a:	f7ff f9e5 	bl	8005e18 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006a4e:	bf00      	nop
 8006a50:	3718      	adds	r7, #24
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}
 8006a56:	bf00      	nop
 8006a58:	200042c0 	.word	0x200042c0
 8006a5c:	200042b0 	.word	0x200042b0
 8006a60:	200042bc 	.word	0x200042bc

08006a64 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006a64:	b480      	push	{r7}
 8006a66:	b085      	sub	sp, #20
 8006a68:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006a6a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006a6e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006a70:	4b27      	ldr	r3, [pc, #156]	; (8006b10 <prvHeapInit+0xac>)
 8006a72:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	f003 0307 	and.w	r3, r3, #7
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d00c      	beq.n	8006a98 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	3307      	adds	r3, #7
 8006a82:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	f023 0307 	bic.w	r3, r3, #7
 8006a8a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006a8c:	68ba      	ldr	r2, [r7, #8]
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	1ad3      	subs	r3, r2, r3
 8006a92:	4a1f      	ldr	r2, [pc, #124]	; (8006b10 <prvHeapInit+0xac>)
 8006a94:	4413      	add	r3, r2
 8006a96:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006a9c:	4a1d      	ldr	r2, [pc, #116]	; (8006b14 <prvHeapInit+0xb0>)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006aa2:	4b1c      	ldr	r3, [pc, #112]	; (8006b14 <prvHeapInit+0xb0>)
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	68ba      	ldr	r2, [r7, #8]
 8006aac:	4413      	add	r3, r2
 8006aae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006ab0:	2208      	movs	r2, #8
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	1a9b      	subs	r3, r3, r2
 8006ab6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	f023 0307 	bic.w	r3, r3, #7
 8006abe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	4a15      	ldr	r2, [pc, #84]	; (8006b18 <prvHeapInit+0xb4>)
 8006ac4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006ac6:	4b14      	ldr	r3, [pc, #80]	; (8006b18 <prvHeapInit+0xb4>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	2200      	movs	r2, #0
 8006acc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006ace:	4b12      	ldr	r3, [pc, #72]	; (8006b18 <prvHeapInit+0xb4>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	68fa      	ldr	r2, [r7, #12]
 8006ade:	1ad2      	subs	r2, r2, r3
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006ae4:	4b0c      	ldr	r3, [pc, #48]	; (8006b18 <prvHeapInit+0xb4>)
 8006ae6:	681a      	ldr	r2, [r3, #0]
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	685b      	ldr	r3, [r3, #4]
 8006af0:	4a0a      	ldr	r2, [pc, #40]	; (8006b1c <prvHeapInit+0xb8>)
 8006af2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	685b      	ldr	r3, [r3, #4]
 8006af8:	4a09      	ldr	r2, [pc, #36]	; (8006b20 <prvHeapInit+0xbc>)
 8006afa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006afc:	4b09      	ldr	r3, [pc, #36]	; (8006b24 <prvHeapInit+0xc0>)
 8006afe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006b02:	601a      	str	r2, [r3, #0]
}
 8006b04:	bf00      	nop
 8006b06:	3714      	adds	r7, #20
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0e:	4770      	bx	lr
 8006b10:	200006a4 	.word	0x200006a4
 8006b14:	200042a4 	.word	0x200042a4
 8006b18:	200042ac 	.word	0x200042ac
 8006b1c:	200042b4 	.word	0x200042b4
 8006b20:	200042b0 	.word	0x200042b0
 8006b24:	200042c0 	.word	0x200042c0

08006b28 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006b28:	b480      	push	{r7}
 8006b2a:	b085      	sub	sp, #20
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006b30:	4b28      	ldr	r3, [pc, #160]	; (8006bd4 <prvInsertBlockIntoFreeList+0xac>)
 8006b32:	60fb      	str	r3, [r7, #12]
 8006b34:	e002      	b.n	8006b3c <prvInsertBlockIntoFreeList+0x14>
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	60fb      	str	r3, [r7, #12]
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	687a      	ldr	r2, [r7, #4]
 8006b42:	429a      	cmp	r2, r3
 8006b44:	d8f7      	bhi.n	8006b36 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	68ba      	ldr	r2, [r7, #8]
 8006b50:	4413      	add	r3, r2
 8006b52:	687a      	ldr	r2, [r7, #4]
 8006b54:	429a      	cmp	r2, r3
 8006b56:	d108      	bne.n	8006b6a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	685a      	ldr	r2, [r3, #4]
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	685b      	ldr	r3, [r3, #4]
 8006b60:	441a      	add	r2, r3
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	685b      	ldr	r3, [r3, #4]
 8006b72:	68ba      	ldr	r2, [r7, #8]
 8006b74:	441a      	add	r2, r3
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	429a      	cmp	r2, r3
 8006b7c:	d118      	bne.n	8006bb0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681a      	ldr	r2, [r3, #0]
 8006b82:	4b15      	ldr	r3, [pc, #84]	; (8006bd8 <prvInsertBlockIntoFreeList+0xb0>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	429a      	cmp	r2, r3
 8006b88:	d00d      	beq.n	8006ba6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	685a      	ldr	r2, [r3, #4]
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	685b      	ldr	r3, [r3, #4]
 8006b94:	441a      	add	r2, r3
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	681a      	ldr	r2, [r3, #0]
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	601a      	str	r2, [r3, #0]
 8006ba4:	e008      	b.n	8006bb8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006ba6:	4b0c      	ldr	r3, [pc, #48]	; (8006bd8 <prvInsertBlockIntoFreeList+0xb0>)
 8006ba8:	681a      	ldr	r2, [r3, #0]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	601a      	str	r2, [r3, #0]
 8006bae:	e003      	b.n	8006bb8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681a      	ldr	r2, [r3, #0]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006bb8:	68fa      	ldr	r2, [r7, #12]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	429a      	cmp	r2, r3
 8006bbe:	d002      	beq.n	8006bc6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	687a      	ldr	r2, [r7, #4]
 8006bc4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006bc6:	bf00      	nop
 8006bc8:	3714      	adds	r7, #20
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd0:	4770      	bx	lr
 8006bd2:	bf00      	nop
 8006bd4:	200042a4 	.word	0x200042a4
 8006bd8:	200042ac 	.word	0x200042ac

08006bdc <__errno>:
 8006bdc:	4b01      	ldr	r3, [pc, #4]	; (8006be4 <__errno+0x8>)
 8006bde:	6818      	ldr	r0, [r3, #0]
 8006be0:	4770      	bx	lr
 8006be2:	bf00      	nop
 8006be4:	20000010 	.word	0x20000010

08006be8 <__libc_init_array>:
 8006be8:	b570      	push	{r4, r5, r6, lr}
 8006bea:	4d0d      	ldr	r5, [pc, #52]	; (8006c20 <__libc_init_array+0x38>)
 8006bec:	4c0d      	ldr	r4, [pc, #52]	; (8006c24 <__libc_init_array+0x3c>)
 8006bee:	1b64      	subs	r4, r4, r5
 8006bf0:	10a4      	asrs	r4, r4, #2
 8006bf2:	2600      	movs	r6, #0
 8006bf4:	42a6      	cmp	r6, r4
 8006bf6:	d109      	bne.n	8006c0c <__libc_init_array+0x24>
 8006bf8:	4d0b      	ldr	r5, [pc, #44]	; (8006c28 <__libc_init_array+0x40>)
 8006bfa:	4c0c      	ldr	r4, [pc, #48]	; (8006c2c <__libc_init_array+0x44>)
 8006bfc:	f000 fc9c 	bl	8007538 <_init>
 8006c00:	1b64      	subs	r4, r4, r5
 8006c02:	10a4      	asrs	r4, r4, #2
 8006c04:	2600      	movs	r6, #0
 8006c06:	42a6      	cmp	r6, r4
 8006c08:	d105      	bne.n	8006c16 <__libc_init_array+0x2e>
 8006c0a:	bd70      	pop	{r4, r5, r6, pc}
 8006c0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c10:	4798      	blx	r3
 8006c12:	3601      	adds	r6, #1
 8006c14:	e7ee      	b.n	8006bf4 <__libc_init_array+0xc>
 8006c16:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c1a:	4798      	blx	r3
 8006c1c:	3601      	adds	r6, #1
 8006c1e:	e7f2      	b.n	8006c06 <__libc_init_array+0x1e>
 8006c20:	0800776c 	.word	0x0800776c
 8006c24:	0800776c 	.word	0x0800776c
 8006c28:	0800776c 	.word	0x0800776c
 8006c2c:	08007770 	.word	0x08007770

08006c30 <memcpy>:
 8006c30:	440a      	add	r2, r1
 8006c32:	4291      	cmp	r1, r2
 8006c34:	f100 33ff 	add.w	r3, r0, #4294967295
 8006c38:	d100      	bne.n	8006c3c <memcpy+0xc>
 8006c3a:	4770      	bx	lr
 8006c3c:	b510      	push	{r4, lr}
 8006c3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c42:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c46:	4291      	cmp	r1, r2
 8006c48:	d1f9      	bne.n	8006c3e <memcpy+0xe>
 8006c4a:	bd10      	pop	{r4, pc}

08006c4c <memset>:
 8006c4c:	4402      	add	r2, r0
 8006c4e:	4603      	mov	r3, r0
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d100      	bne.n	8006c56 <memset+0xa>
 8006c54:	4770      	bx	lr
 8006c56:	f803 1b01 	strb.w	r1, [r3], #1
 8006c5a:	e7f9      	b.n	8006c50 <memset+0x4>

08006c5c <siprintf>:
 8006c5c:	b40e      	push	{r1, r2, r3}
 8006c5e:	b500      	push	{lr}
 8006c60:	b09c      	sub	sp, #112	; 0x70
 8006c62:	ab1d      	add	r3, sp, #116	; 0x74
 8006c64:	9002      	str	r0, [sp, #8]
 8006c66:	9006      	str	r0, [sp, #24]
 8006c68:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006c6c:	4809      	ldr	r0, [pc, #36]	; (8006c94 <siprintf+0x38>)
 8006c6e:	9107      	str	r1, [sp, #28]
 8006c70:	9104      	str	r1, [sp, #16]
 8006c72:	4909      	ldr	r1, [pc, #36]	; (8006c98 <siprintf+0x3c>)
 8006c74:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c78:	9105      	str	r1, [sp, #20]
 8006c7a:	6800      	ldr	r0, [r0, #0]
 8006c7c:	9301      	str	r3, [sp, #4]
 8006c7e:	a902      	add	r1, sp, #8
 8006c80:	f000 f876 	bl	8006d70 <_svfiprintf_r>
 8006c84:	9b02      	ldr	r3, [sp, #8]
 8006c86:	2200      	movs	r2, #0
 8006c88:	701a      	strb	r2, [r3, #0]
 8006c8a:	b01c      	add	sp, #112	; 0x70
 8006c8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006c90:	b003      	add	sp, #12
 8006c92:	4770      	bx	lr
 8006c94:	20000010 	.word	0x20000010
 8006c98:	ffff0208 	.word	0xffff0208

08006c9c <strcat>:
 8006c9c:	b510      	push	{r4, lr}
 8006c9e:	4602      	mov	r2, r0
 8006ca0:	7814      	ldrb	r4, [r2, #0]
 8006ca2:	4613      	mov	r3, r2
 8006ca4:	3201      	adds	r2, #1
 8006ca6:	2c00      	cmp	r4, #0
 8006ca8:	d1fa      	bne.n	8006ca0 <strcat+0x4>
 8006caa:	3b01      	subs	r3, #1
 8006cac:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006cb0:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006cb4:	2a00      	cmp	r2, #0
 8006cb6:	d1f9      	bne.n	8006cac <strcat+0x10>
 8006cb8:	bd10      	pop	{r4, pc}

08006cba <__ssputs_r>:
 8006cba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cbe:	688e      	ldr	r6, [r1, #8]
 8006cc0:	429e      	cmp	r6, r3
 8006cc2:	4682      	mov	sl, r0
 8006cc4:	460c      	mov	r4, r1
 8006cc6:	4690      	mov	r8, r2
 8006cc8:	461f      	mov	r7, r3
 8006cca:	d838      	bhi.n	8006d3e <__ssputs_r+0x84>
 8006ccc:	898a      	ldrh	r2, [r1, #12]
 8006cce:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006cd2:	d032      	beq.n	8006d3a <__ssputs_r+0x80>
 8006cd4:	6825      	ldr	r5, [r4, #0]
 8006cd6:	6909      	ldr	r1, [r1, #16]
 8006cd8:	eba5 0901 	sub.w	r9, r5, r1
 8006cdc:	6965      	ldr	r5, [r4, #20]
 8006cde:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006ce2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006ce6:	3301      	adds	r3, #1
 8006ce8:	444b      	add	r3, r9
 8006cea:	106d      	asrs	r5, r5, #1
 8006cec:	429d      	cmp	r5, r3
 8006cee:	bf38      	it	cc
 8006cf0:	461d      	movcc	r5, r3
 8006cf2:	0553      	lsls	r3, r2, #21
 8006cf4:	d531      	bpl.n	8006d5a <__ssputs_r+0xa0>
 8006cf6:	4629      	mov	r1, r5
 8006cf8:	f000 fb54 	bl	80073a4 <_malloc_r>
 8006cfc:	4606      	mov	r6, r0
 8006cfe:	b950      	cbnz	r0, 8006d16 <__ssputs_r+0x5c>
 8006d00:	230c      	movs	r3, #12
 8006d02:	f8ca 3000 	str.w	r3, [sl]
 8006d06:	89a3      	ldrh	r3, [r4, #12]
 8006d08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d0c:	81a3      	strh	r3, [r4, #12]
 8006d0e:	f04f 30ff 	mov.w	r0, #4294967295
 8006d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d16:	6921      	ldr	r1, [r4, #16]
 8006d18:	464a      	mov	r2, r9
 8006d1a:	f7ff ff89 	bl	8006c30 <memcpy>
 8006d1e:	89a3      	ldrh	r3, [r4, #12]
 8006d20:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006d24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d28:	81a3      	strh	r3, [r4, #12]
 8006d2a:	6126      	str	r6, [r4, #16]
 8006d2c:	6165      	str	r5, [r4, #20]
 8006d2e:	444e      	add	r6, r9
 8006d30:	eba5 0509 	sub.w	r5, r5, r9
 8006d34:	6026      	str	r6, [r4, #0]
 8006d36:	60a5      	str	r5, [r4, #8]
 8006d38:	463e      	mov	r6, r7
 8006d3a:	42be      	cmp	r6, r7
 8006d3c:	d900      	bls.n	8006d40 <__ssputs_r+0x86>
 8006d3e:	463e      	mov	r6, r7
 8006d40:	6820      	ldr	r0, [r4, #0]
 8006d42:	4632      	mov	r2, r6
 8006d44:	4641      	mov	r1, r8
 8006d46:	f000 faa7 	bl	8007298 <memmove>
 8006d4a:	68a3      	ldr	r3, [r4, #8]
 8006d4c:	1b9b      	subs	r3, r3, r6
 8006d4e:	60a3      	str	r3, [r4, #8]
 8006d50:	6823      	ldr	r3, [r4, #0]
 8006d52:	4433      	add	r3, r6
 8006d54:	6023      	str	r3, [r4, #0]
 8006d56:	2000      	movs	r0, #0
 8006d58:	e7db      	b.n	8006d12 <__ssputs_r+0x58>
 8006d5a:	462a      	mov	r2, r5
 8006d5c:	f000 fb96 	bl	800748c <_realloc_r>
 8006d60:	4606      	mov	r6, r0
 8006d62:	2800      	cmp	r0, #0
 8006d64:	d1e1      	bne.n	8006d2a <__ssputs_r+0x70>
 8006d66:	6921      	ldr	r1, [r4, #16]
 8006d68:	4650      	mov	r0, sl
 8006d6a:	f000 faaf 	bl	80072cc <_free_r>
 8006d6e:	e7c7      	b.n	8006d00 <__ssputs_r+0x46>

08006d70 <_svfiprintf_r>:
 8006d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d74:	4698      	mov	r8, r3
 8006d76:	898b      	ldrh	r3, [r1, #12]
 8006d78:	061b      	lsls	r3, r3, #24
 8006d7a:	b09d      	sub	sp, #116	; 0x74
 8006d7c:	4607      	mov	r7, r0
 8006d7e:	460d      	mov	r5, r1
 8006d80:	4614      	mov	r4, r2
 8006d82:	d50e      	bpl.n	8006da2 <_svfiprintf_r+0x32>
 8006d84:	690b      	ldr	r3, [r1, #16]
 8006d86:	b963      	cbnz	r3, 8006da2 <_svfiprintf_r+0x32>
 8006d88:	2140      	movs	r1, #64	; 0x40
 8006d8a:	f000 fb0b 	bl	80073a4 <_malloc_r>
 8006d8e:	6028      	str	r0, [r5, #0]
 8006d90:	6128      	str	r0, [r5, #16]
 8006d92:	b920      	cbnz	r0, 8006d9e <_svfiprintf_r+0x2e>
 8006d94:	230c      	movs	r3, #12
 8006d96:	603b      	str	r3, [r7, #0]
 8006d98:	f04f 30ff 	mov.w	r0, #4294967295
 8006d9c:	e0d1      	b.n	8006f42 <_svfiprintf_r+0x1d2>
 8006d9e:	2340      	movs	r3, #64	; 0x40
 8006da0:	616b      	str	r3, [r5, #20]
 8006da2:	2300      	movs	r3, #0
 8006da4:	9309      	str	r3, [sp, #36]	; 0x24
 8006da6:	2320      	movs	r3, #32
 8006da8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006dac:	f8cd 800c 	str.w	r8, [sp, #12]
 8006db0:	2330      	movs	r3, #48	; 0x30
 8006db2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006f5c <_svfiprintf_r+0x1ec>
 8006db6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006dba:	f04f 0901 	mov.w	r9, #1
 8006dbe:	4623      	mov	r3, r4
 8006dc0:	469a      	mov	sl, r3
 8006dc2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006dc6:	b10a      	cbz	r2, 8006dcc <_svfiprintf_r+0x5c>
 8006dc8:	2a25      	cmp	r2, #37	; 0x25
 8006dca:	d1f9      	bne.n	8006dc0 <_svfiprintf_r+0x50>
 8006dcc:	ebba 0b04 	subs.w	fp, sl, r4
 8006dd0:	d00b      	beq.n	8006dea <_svfiprintf_r+0x7a>
 8006dd2:	465b      	mov	r3, fp
 8006dd4:	4622      	mov	r2, r4
 8006dd6:	4629      	mov	r1, r5
 8006dd8:	4638      	mov	r0, r7
 8006dda:	f7ff ff6e 	bl	8006cba <__ssputs_r>
 8006dde:	3001      	adds	r0, #1
 8006de0:	f000 80aa 	beq.w	8006f38 <_svfiprintf_r+0x1c8>
 8006de4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006de6:	445a      	add	r2, fp
 8006de8:	9209      	str	r2, [sp, #36]	; 0x24
 8006dea:	f89a 3000 	ldrb.w	r3, [sl]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	f000 80a2 	beq.w	8006f38 <_svfiprintf_r+0x1c8>
 8006df4:	2300      	movs	r3, #0
 8006df6:	f04f 32ff 	mov.w	r2, #4294967295
 8006dfa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006dfe:	f10a 0a01 	add.w	sl, sl, #1
 8006e02:	9304      	str	r3, [sp, #16]
 8006e04:	9307      	str	r3, [sp, #28]
 8006e06:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006e0a:	931a      	str	r3, [sp, #104]	; 0x68
 8006e0c:	4654      	mov	r4, sl
 8006e0e:	2205      	movs	r2, #5
 8006e10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e14:	4851      	ldr	r0, [pc, #324]	; (8006f5c <_svfiprintf_r+0x1ec>)
 8006e16:	f7f9 fa03 	bl	8000220 <memchr>
 8006e1a:	9a04      	ldr	r2, [sp, #16]
 8006e1c:	b9d8      	cbnz	r0, 8006e56 <_svfiprintf_r+0xe6>
 8006e1e:	06d0      	lsls	r0, r2, #27
 8006e20:	bf44      	itt	mi
 8006e22:	2320      	movmi	r3, #32
 8006e24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006e28:	0711      	lsls	r1, r2, #28
 8006e2a:	bf44      	itt	mi
 8006e2c:	232b      	movmi	r3, #43	; 0x2b
 8006e2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006e32:	f89a 3000 	ldrb.w	r3, [sl]
 8006e36:	2b2a      	cmp	r3, #42	; 0x2a
 8006e38:	d015      	beq.n	8006e66 <_svfiprintf_r+0xf6>
 8006e3a:	9a07      	ldr	r2, [sp, #28]
 8006e3c:	4654      	mov	r4, sl
 8006e3e:	2000      	movs	r0, #0
 8006e40:	f04f 0c0a 	mov.w	ip, #10
 8006e44:	4621      	mov	r1, r4
 8006e46:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006e4a:	3b30      	subs	r3, #48	; 0x30
 8006e4c:	2b09      	cmp	r3, #9
 8006e4e:	d94e      	bls.n	8006eee <_svfiprintf_r+0x17e>
 8006e50:	b1b0      	cbz	r0, 8006e80 <_svfiprintf_r+0x110>
 8006e52:	9207      	str	r2, [sp, #28]
 8006e54:	e014      	b.n	8006e80 <_svfiprintf_r+0x110>
 8006e56:	eba0 0308 	sub.w	r3, r0, r8
 8006e5a:	fa09 f303 	lsl.w	r3, r9, r3
 8006e5e:	4313      	orrs	r3, r2
 8006e60:	9304      	str	r3, [sp, #16]
 8006e62:	46a2      	mov	sl, r4
 8006e64:	e7d2      	b.n	8006e0c <_svfiprintf_r+0x9c>
 8006e66:	9b03      	ldr	r3, [sp, #12]
 8006e68:	1d19      	adds	r1, r3, #4
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	9103      	str	r1, [sp, #12]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	bfbb      	ittet	lt
 8006e72:	425b      	neglt	r3, r3
 8006e74:	f042 0202 	orrlt.w	r2, r2, #2
 8006e78:	9307      	strge	r3, [sp, #28]
 8006e7a:	9307      	strlt	r3, [sp, #28]
 8006e7c:	bfb8      	it	lt
 8006e7e:	9204      	strlt	r2, [sp, #16]
 8006e80:	7823      	ldrb	r3, [r4, #0]
 8006e82:	2b2e      	cmp	r3, #46	; 0x2e
 8006e84:	d10c      	bne.n	8006ea0 <_svfiprintf_r+0x130>
 8006e86:	7863      	ldrb	r3, [r4, #1]
 8006e88:	2b2a      	cmp	r3, #42	; 0x2a
 8006e8a:	d135      	bne.n	8006ef8 <_svfiprintf_r+0x188>
 8006e8c:	9b03      	ldr	r3, [sp, #12]
 8006e8e:	1d1a      	adds	r2, r3, #4
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	9203      	str	r2, [sp, #12]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	bfb8      	it	lt
 8006e98:	f04f 33ff 	movlt.w	r3, #4294967295
 8006e9c:	3402      	adds	r4, #2
 8006e9e:	9305      	str	r3, [sp, #20]
 8006ea0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006f6c <_svfiprintf_r+0x1fc>
 8006ea4:	7821      	ldrb	r1, [r4, #0]
 8006ea6:	2203      	movs	r2, #3
 8006ea8:	4650      	mov	r0, sl
 8006eaa:	f7f9 f9b9 	bl	8000220 <memchr>
 8006eae:	b140      	cbz	r0, 8006ec2 <_svfiprintf_r+0x152>
 8006eb0:	2340      	movs	r3, #64	; 0x40
 8006eb2:	eba0 000a 	sub.w	r0, r0, sl
 8006eb6:	fa03 f000 	lsl.w	r0, r3, r0
 8006eba:	9b04      	ldr	r3, [sp, #16]
 8006ebc:	4303      	orrs	r3, r0
 8006ebe:	3401      	adds	r4, #1
 8006ec0:	9304      	str	r3, [sp, #16]
 8006ec2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ec6:	4826      	ldr	r0, [pc, #152]	; (8006f60 <_svfiprintf_r+0x1f0>)
 8006ec8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006ecc:	2206      	movs	r2, #6
 8006ece:	f7f9 f9a7 	bl	8000220 <memchr>
 8006ed2:	2800      	cmp	r0, #0
 8006ed4:	d038      	beq.n	8006f48 <_svfiprintf_r+0x1d8>
 8006ed6:	4b23      	ldr	r3, [pc, #140]	; (8006f64 <_svfiprintf_r+0x1f4>)
 8006ed8:	bb1b      	cbnz	r3, 8006f22 <_svfiprintf_r+0x1b2>
 8006eda:	9b03      	ldr	r3, [sp, #12]
 8006edc:	3307      	adds	r3, #7
 8006ede:	f023 0307 	bic.w	r3, r3, #7
 8006ee2:	3308      	adds	r3, #8
 8006ee4:	9303      	str	r3, [sp, #12]
 8006ee6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ee8:	4433      	add	r3, r6
 8006eea:	9309      	str	r3, [sp, #36]	; 0x24
 8006eec:	e767      	b.n	8006dbe <_svfiprintf_r+0x4e>
 8006eee:	fb0c 3202 	mla	r2, ip, r2, r3
 8006ef2:	460c      	mov	r4, r1
 8006ef4:	2001      	movs	r0, #1
 8006ef6:	e7a5      	b.n	8006e44 <_svfiprintf_r+0xd4>
 8006ef8:	2300      	movs	r3, #0
 8006efa:	3401      	adds	r4, #1
 8006efc:	9305      	str	r3, [sp, #20]
 8006efe:	4619      	mov	r1, r3
 8006f00:	f04f 0c0a 	mov.w	ip, #10
 8006f04:	4620      	mov	r0, r4
 8006f06:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006f0a:	3a30      	subs	r2, #48	; 0x30
 8006f0c:	2a09      	cmp	r2, #9
 8006f0e:	d903      	bls.n	8006f18 <_svfiprintf_r+0x1a8>
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d0c5      	beq.n	8006ea0 <_svfiprintf_r+0x130>
 8006f14:	9105      	str	r1, [sp, #20]
 8006f16:	e7c3      	b.n	8006ea0 <_svfiprintf_r+0x130>
 8006f18:	fb0c 2101 	mla	r1, ip, r1, r2
 8006f1c:	4604      	mov	r4, r0
 8006f1e:	2301      	movs	r3, #1
 8006f20:	e7f0      	b.n	8006f04 <_svfiprintf_r+0x194>
 8006f22:	ab03      	add	r3, sp, #12
 8006f24:	9300      	str	r3, [sp, #0]
 8006f26:	462a      	mov	r2, r5
 8006f28:	4b0f      	ldr	r3, [pc, #60]	; (8006f68 <_svfiprintf_r+0x1f8>)
 8006f2a:	a904      	add	r1, sp, #16
 8006f2c:	4638      	mov	r0, r7
 8006f2e:	f3af 8000 	nop.w
 8006f32:	1c42      	adds	r2, r0, #1
 8006f34:	4606      	mov	r6, r0
 8006f36:	d1d6      	bne.n	8006ee6 <_svfiprintf_r+0x176>
 8006f38:	89ab      	ldrh	r3, [r5, #12]
 8006f3a:	065b      	lsls	r3, r3, #25
 8006f3c:	f53f af2c 	bmi.w	8006d98 <_svfiprintf_r+0x28>
 8006f40:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006f42:	b01d      	add	sp, #116	; 0x74
 8006f44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f48:	ab03      	add	r3, sp, #12
 8006f4a:	9300      	str	r3, [sp, #0]
 8006f4c:	462a      	mov	r2, r5
 8006f4e:	4b06      	ldr	r3, [pc, #24]	; (8006f68 <_svfiprintf_r+0x1f8>)
 8006f50:	a904      	add	r1, sp, #16
 8006f52:	4638      	mov	r0, r7
 8006f54:	f000 f87a 	bl	800704c <_printf_i>
 8006f58:	e7eb      	b.n	8006f32 <_svfiprintf_r+0x1c2>
 8006f5a:	bf00      	nop
 8006f5c:	08007730 	.word	0x08007730
 8006f60:	0800773a 	.word	0x0800773a
 8006f64:	00000000 	.word	0x00000000
 8006f68:	08006cbb 	.word	0x08006cbb
 8006f6c:	08007736 	.word	0x08007736

08006f70 <_printf_common>:
 8006f70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f74:	4616      	mov	r6, r2
 8006f76:	4699      	mov	r9, r3
 8006f78:	688a      	ldr	r2, [r1, #8]
 8006f7a:	690b      	ldr	r3, [r1, #16]
 8006f7c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006f80:	4293      	cmp	r3, r2
 8006f82:	bfb8      	it	lt
 8006f84:	4613      	movlt	r3, r2
 8006f86:	6033      	str	r3, [r6, #0]
 8006f88:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006f8c:	4607      	mov	r7, r0
 8006f8e:	460c      	mov	r4, r1
 8006f90:	b10a      	cbz	r2, 8006f96 <_printf_common+0x26>
 8006f92:	3301      	adds	r3, #1
 8006f94:	6033      	str	r3, [r6, #0]
 8006f96:	6823      	ldr	r3, [r4, #0]
 8006f98:	0699      	lsls	r1, r3, #26
 8006f9a:	bf42      	ittt	mi
 8006f9c:	6833      	ldrmi	r3, [r6, #0]
 8006f9e:	3302      	addmi	r3, #2
 8006fa0:	6033      	strmi	r3, [r6, #0]
 8006fa2:	6825      	ldr	r5, [r4, #0]
 8006fa4:	f015 0506 	ands.w	r5, r5, #6
 8006fa8:	d106      	bne.n	8006fb8 <_printf_common+0x48>
 8006faa:	f104 0a19 	add.w	sl, r4, #25
 8006fae:	68e3      	ldr	r3, [r4, #12]
 8006fb0:	6832      	ldr	r2, [r6, #0]
 8006fb2:	1a9b      	subs	r3, r3, r2
 8006fb4:	42ab      	cmp	r3, r5
 8006fb6:	dc26      	bgt.n	8007006 <_printf_common+0x96>
 8006fb8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006fbc:	1e13      	subs	r3, r2, #0
 8006fbe:	6822      	ldr	r2, [r4, #0]
 8006fc0:	bf18      	it	ne
 8006fc2:	2301      	movne	r3, #1
 8006fc4:	0692      	lsls	r2, r2, #26
 8006fc6:	d42b      	bmi.n	8007020 <_printf_common+0xb0>
 8006fc8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006fcc:	4649      	mov	r1, r9
 8006fce:	4638      	mov	r0, r7
 8006fd0:	47c0      	blx	r8
 8006fd2:	3001      	adds	r0, #1
 8006fd4:	d01e      	beq.n	8007014 <_printf_common+0xa4>
 8006fd6:	6823      	ldr	r3, [r4, #0]
 8006fd8:	68e5      	ldr	r5, [r4, #12]
 8006fda:	6832      	ldr	r2, [r6, #0]
 8006fdc:	f003 0306 	and.w	r3, r3, #6
 8006fe0:	2b04      	cmp	r3, #4
 8006fe2:	bf08      	it	eq
 8006fe4:	1aad      	subeq	r5, r5, r2
 8006fe6:	68a3      	ldr	r3, [r4, #8]
 8006fe8:	6922      	ldr	r2, [r4, #16]
 8006fea:	bf0c      	ite	eq
 8006fec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ff0:	2500      	movne	r5, #0
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	bfc4      	itt	gt
 8006ff6:	1a9b      	subgt	r3, r3, r2
 8006ff8:	18ed      	addgt	r5, r5, r3
 8006ffa:	2600      	movs	r6, #0
 8006ffc:	341a      	adds	r4, #26
 8006ffe:	42b5      	cmp	r5, r6
 8007000:	d11a      	bne.n	8007038 <_printf_common+0xc8>
 8007002:	2000      	movs	r0, #0
 8007004:	e008      	b.n	8007018 <_printf_common+0xa8>
 8007006:	2301      	movs	r3, #1
 8007008:	4652      	mov	r2, sl
 800700a:	4649      	mov	r1, r9
 800700c:	4638      	mov	r0, r7
 800700e:	47c0      	blx	r8
 8007010:	3001      	adds	r0, #1
 8007012:	d103      	bne.n	800701c <_printf_common+0xac>
 8007014:	f04f 30ff 	mov.w	r0, #4294967295
 8007018:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800701c:	3501      	adds	r5, #1
 800701e:	e7c6      	b.n	8006fae <_printf_common+0x3e>
 8007020:	18e1      	adds	r1, r4, r3
 8007022:	1c5a      	adds	r2, r3, #1
 8007024:	2030      	movs	r0, #48	; 0x30
 8007026:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800702a:	4422      	add	r2, r4
 800702c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007030:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007034:	3302      	adds	r3, #2
 8007036:	e7c7      	b.n	8006fc8 <_printf_common+0x58>
 8007038:	2301      	movs	r3, #1
 800703a:	4622      	mov	r2, r4
 800703c:	4649      	mov	r1, r9
 800703e:	4638      	mov	r0, r7
 8007040:	47c0      	blx	r8
 8007042:	3001      	adds	r0, #1
 8007044:	d0e6      	beq.n	8007014 <_printf_common+0xa4>
 8007046:	3601      	adds	r6, #1
 8007048:	e7d9      	b.n	8006ffe <_printf_common+0x8e>
	...

0800704c <_printf_i>:
 800704c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007050:	7e0f      	ldrb	r7, [r1, #24]
 8007052:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007054:	2f78      	cmp	r7, #120	; 0x78
 8007056:	4691      	mov	r9, r2
 8007058:	4680      	mov	r8, r0
 800705a:	460c      	mov	r4, r1
 800705c:	469a      	mov	sl, r3
 800705e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007062:	d807      	bhi.n	8007074 <_printf_i+0x28>
 8007064:	2f62      	cmp	r7, #98	; 0x62
 8007066:	d80a      	bhi.n	800707e <_printf_i+0x32>
 8007068:	2f00      	cmp	r7, #0
 800706a:	f000 80d8 	beq.w	800721e <_printf_i+0x1d2>
 800706e:	2f58      	cmp	r7, #88	; 0x58
 8007070:	f000 80a3 	beq.w	80071ba <_printf_i+0x16e>
 8007074:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007078:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800707c:	e03a      	b.n	80070f4 <_printf_i+0xa8>
 800707e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007082:	2b15      	cmp	r3, #21
 8007084:	d8f6      	bhi.n	8007074 <_printf_i+0x28>
 8007086:	a101      	add	r1, pc, #4	; (adr r1, 800708c <_printf_i+0x40>)
 8007088:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800708c:	080070e5 	.word	0x080070e5
 8007090:	080070f9 	.word	0x080070f9
 8007094:	08007075 	.word	0x08007075
 8007098:	08007075 	.word	0x08007075
 800709c:	08007075 	.word	0x08007075
 80070a0:	08007075 	.word	0x08007075
 80070a4:	080070f9 	.word	0x080070f9
 80070a8:	08007075 	.word	0x08007075
 80070ac:	08007075 	.word	0x08007075
 80070b0:	08007075 	.word	0x08007075
 80070b4:	08007075 	.word	0x08007075
 80070b8:	08007205 	.word	0x08007205
 80070bc:	08007129 	.word	0x08007129
 80070c0:	080071e7 	.word	0x080071e7
 80070c4:	08007075 	.word	0x08007075
 80070c8:	08007075 	.word	0x08007075
 80070cc:	08007227 	.word	0x08007227
 80070d0:	08007075 	.word	0x08007075
 80070d4:	08007129 	.word	0x08007129
 80070d8:	08007075 	.word	0x08007075
 80070dc:	08007075 	.word	0x08007075
 80070e0:	080071ef 	.word	0x080071ef
 80070e4:	682b      	ldr	r3, [r5, #0]
 80070e6:	1d1a      	adds	r2, r3, #4
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	602a      	str	r2, [r5, #0]
 80070ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80070f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80070f4:	2301      	movs	r3, #1
 80070f6:	e0a3      	b.n	8007240 <_printf_i+0x1f4>
 80070f8:	6820      	ldr	r0, [r4, #0]
 80070fa:	6829      	ldr	r1, [r5, #0]
 80070fc:	0606      	lsls	r6, r0, #24
 80070fe:	f101 0304 	add.w	r3, r1, #4
 8007102:	d50a      	bpl.n	800711a <_printf_i+0xce>
 8007104:	680e      	ldr	r6, [r1, #0]
 8007106:	602b      	str	r3, [r5, #0]
 8007108:	2e00      	cmp	r6, #0
 800710a:	da03      	bge.n	8007114 <_printf_i+0xc8>
 800710c:	232d      	movs	r3, #45	; 0x2d
 800710e:	4276      	negs	r6, r6
 8007110:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007114:	485e      	ldr	r0, [pc, #376]	; (8007290 <_printf_i+0x244>)
 8007116:	230a      	movs	r3, #10
 8007118:	e019      	b.n	800714e <_printf_i+0x102>
 800711a:	680e      	ldr	r6, [r1, #0]
 800711c:	602b      	str	r3, [r5, #0]
 800711e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007122:	bf18      	it	ne
 8007124:	b236      	sxthne	r6, r6
 8007126:	e7ef      	b.n	8007108 <_printf_i+0xbc>
 8007128:	682b      	ldr	r3, [r5, #0]
 800712a:	6820      	ldr	r0, [r4, #0]
 800712c:	1d19      	adds	r1, r3, #4
 800712e:	6029      	str	r1, [r5, #0]
 8007130:	0601      	lsls	r1, r0, #24
 8007132:	d501      	bpl.n	8007138 <_printf_i+0xec>
 8007134:	681e      	ldr	r6, [r3, #0]
 8007136:	e002      	b.n	800713e <_printf_i+0xf2>
 8007138:	0646      	lsls	r6, r0, #25
 800713a:	d5fb      	bpl.n	8007134 <_printf_i+0xe8>
 800713c:	881e      	ldrh	r6, [r3, #0]
 800713e:	4854      	ldr	r0, [pc, #336]	; (8007290 <_printf_i+0x244>)
 8007140:	2f6f      	cmp	r7, #111	; 0x6f
 8007142:	bf0c      	ite	eq
 8007144:	2308      	moveq	r3, #8
 8007146:	230a      	movne	r3, #10
 8007148:	2100      	movs	r1, #0
 800714a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800714e:	6865      	ldr	r5, [r4, #4]
 8007150:	60a5      	str	r5, [r4, #8]
 8007152:	2d00      	cmp	r5, #0
 8007154:	bfa2      	ittt	ge
 8007156:	6821      	ldrge	r1, [r4, #0]
 8007158:	f021 0104 	bicge.w	r1, r1, #4
 800715c:	6021      	strge	r1, [r4, #0]
 800715e:	b90e      	cbnz	r6, 8007164 <_printf_i+0x118>
 8007160:	2d00      	cmp	r5, #0
 8007162:	d04d      	beq.n	8007200 <_printf_i+0x1b4>
 8007164:	4615      	mov	r5, r2
 8007166:	fbb6 f1f3 	udiv	r1, r6, r3
 800716a:	fb03 6711 	mls	r7, r3, r1, r6
 800716e:	5dc7      	ldrb	r7, [r0, r7]
 8007170:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007174:	4637      	mov	r7, r6
 8007176:	42bb      	cmp	r3, r7
 8007178:	460e      	mov	r6, r1
 800717a:	d9f4      	bls.n	8007166 <_printf_i+0x11a>
 800717c:	2b08      	cmp	r3, #8
 800717e:	d10b      	bne.n	8007198 <_printf_i+0x14c>
 8007180:	6823      	ldr	r3, [r4, #0]
 8007182:	07de      	lsls	r6, r3, #31
 8007184:	d508      	bpl.n	8007198 <_printf_i+0x14c>
 8007186:	6923      	ldr	r3, [r4, #16]
 8007188:	6861      	ldr	r1, [r4, #4]
 800718a:	4299      	cmp	r1, r3
 800718c:	bfde      	ittt	le
 800718e:	2330      	movle	r3, #48	; 0x30
 8007190:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007194:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007198:	1b52      	subs	r2, r2, r5
 800719a:	6122      	str	r2, [r4, #16]
 800719c:	f8cd a000 	str.w	sl, [sp]
 80071a0:	464b      	mov	r3, r9
 80071a2:	aa03      	add	r2, sp, #12
 80071a4:	4621      	mov	r1, r4
 80071a6:	4640      	mov	r0, r8
 80071a8:	f7ff fee2 	bl	8006f70 <_printf_common>
 80071ac:	3001      	adds	r0, #1
 80071ae:	d14c      	bne.n	800724a <_printf_i+0x1fe>
 80071b0:	f04f 30ff 	mov.w	r0, #4294967295
 80071b4:	b004      	add	sp, #16
 80071b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071ba:	4835      	ldr	r0, [pc, #212]	; (8007290 <_printf_i+0x244>)
 80071bc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80071c0:	6829      	ldr	r1, [r5, #0]
 80071c2:	6823      	ldr	r3, [r4, #0]
 80071c4:	f851 6b04 	ldr.w	r6, [r1], #4
 80071c8:	6029      	str	r1, [r5, #0]
 80071ca:	061d      	lsls	r5, r3, #24
 80071cc:	d514      	bpl.n	80071f8 <_printf_i+0x1ac>
 80071ce:	07df      	lsls	r7, r3, #31
 80071d0:	bf44      	itt	mi
 80071d2:	f043 0320 	orrmi.w	r3, r3, #32
 80071d6:	6023      	strmi	r3, [r4, #0]
 80071d8:	b91e      	cbnz	r6, 80071e2 <_printf_i+0x196>
 80071da:	6823      	ldr	r3, [r4, #0]
 80071dc:	f023 0320 	bic.w	r3, r3, #32
 80071e0:	6023      	str	r3, [r4, #0]
 80071e2:	2310      	movs	r3, #16
 80071e4:	e7b0      	b.n	8007148 <_printf_i+0xfc>
 80071e6:	6823      	ldr	r3, [r4, #0]
 80071e8:	f043 0320 	orr.w	r3, r3, #32
 80071ec:	6023      	str	r3, [r4, #0]
 80071ee:	2378      	movs	r3, #120	; 0x78
 80071f0:	4828      	ldr	r0, [pc, #160]	; (8007294 <_printf_i+0x248>)
 80071f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80071f6:	e7e3      	b.n	80071c0 <_printf_i+0x174>
 80071f8:	0659      	lsls	r1, r3, #25
 80071fa:	bf48      	it	mi
 80071fc:	b2b6      	uxthmi	r6, r6
 80071fe:	e7e6      	b.n	80071ce <_printf_i+0x182>
 8007200:	4615      	mov	r5, r2
 8007202:	e7bb      	b.n	800717c <_printf_i+0x130>
 8007204:	682b      	ldr	r3, [r5, #0]
 8007206:	6826      	ldr	r6, [r4, #0]
 8007208:	6961      	ldr	r1, [r4, #20]
 800720a:	1d18      	adds	r0, r3, #4
 800720c:	6028      	str	r0, [r5, #0]
 800720e:	0635      	lsls	r5, r6, #24
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	d501      	bpl.n	8007218 <_printf_i+0x1cc>
 8007214:	6019      	str	r1, [r3, #0]
 8007216:	e002      	b.n	800721e <_printf_i+0x1d2>
 8007218:	0670      	lsls	r0, r6, #25
 800721a:	d5fb      	bpl.n	8007214 <_printf_i+0x1c8>
 800721c:	8019      	strh	r1, [r3, #0]
 800721e:	2300      	movs	r3, #0
 8007220:	6123      	str	r3, [r4, #16]
 8007222:	4615      	mov	r5, r2
 8007224:	e7ba      	b.n	800719c <_printf_i+0x150>
 8007226:	682b      	ldr	r3, [r5, #0]
 8007228:	1d1a      	adds	r2, r3, #4
 800722a:	602a      	str	r2, [r5, #0]
 800722c:	681d      	ldr	r5, [r3, #0]
 800722e:	6862      	ldr	r2, [r4, #4]
 8007230:	2100      	movs	r1, #0
 8007232:	4628      	mov	r0, r5
 8007234:	f7f8 fff4 	bl	8000220 <memchr>
 8007238:	b108      	cbz	r0, 800723e <_printf_i+0x1f2>
 800723a:	1b40      	subs	r0, r0, r5
 800723c:	6060      	str	r0, [r4, #4]
 800723e:	6863      	ldr	r3, [r4, #4]
 8007240:	6123      	str	r3, [r4, #16]
 8007242:	2300      	movs	r3, #0
 8007244:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007248:	e7a8      	b.n	800719c <_printf_i+0x150>
 800724a:	6923      	ldr	r3, [r4, #16]
 800724c:	462a      	mov	r2, r5
 800724e:	4649      	mov	r1, r9
 8007250:	4640      	mov	r0, r8
 8007252:	47d0      	blx	sl
 8007254:	3001      	adds	r0, #1
 8007256:	d0ab      	beq.n	80071b0 <_printf_i+0x164>
 8007258:	6823      	ldr	r3, [r4, #0]
 800725a:	079b      	lsls	r3, r3, #30
 800725c:	d413      	bmi.n	8007286 <_printf_i+0x23a>
 800725e:	68e0      	ldr	r0, [r4, #12]
 8007260:	9b03      	ldr	r3, [sp, #12]
 8007262:	4298      	cmp	r0, r3
 8007264:	bfb8      	it	lt
 8007266:	4618      	movlt	r0, r3
 8007268:	e7a4      	b.n	80071b4 <_printf_i+0x168>
 800726a:	2301      	movs	r3, #1
 800726c:	4632      	mov	r2, r6
 800726e:	4649      	mov	r1, r9
 8007270:	4640      	mov	r0, r8
 8007272:	47d0      	blx	sl
 8007274:	3001      	adds	r0, #1
 8007276:	d09b      	beq.n	80071b0 <_printf_i+0x164>
 8007278:	3501      	adds	r5, #1
 800727a:	68e3      	ldr	r3, [r4, #12]
 800727c:	9903      	ldr	r1, [sp, #12]
 800727e:	1a5b      	subs	r3, r3, r1
 8007280:	42ab      	cmp	r3, r5
 8007282:	dcf2      	bgt.n	800726a <_printf_i+0x21e>
 8007284:	e7eb      	b.n	800725e <_printf_i+0x212>
 8007286:	2500      	movs	r5, #0
 8007288:	f104 0619 	add.w	r6, r4, #25
 800728c:	e7f5      	b.n	800727a <_printf_i+0x22e>
 800728e:	bf00      	nop
 8007290:	08007741 	.word	0x08007741
 8007294:	08007752 	.word	0x08007752

08007298 <memmove>:
 8007298:	4288      	cmp	r0, r1
 800729a:	b510      	push	{r4, lr}
 800729c:	eb01 0402 	add.w	r4, r1, r2
 80072a0:	d902      	bls.n	80072a8 <memmove+0x10>
 80072a2:	4284      	cmp	r4, r0
 80072a4:	4623      	mov	r3, r4
 80072a6:	d807      	bhi.n	80072b8 <memmove+0x20>
 80072a8:	1e43      	subs	r3, r0, #1
 80072aa:	42a1      	cmp	r1, r4
 80072ac:	d008      	beq.n	80072c0 <memmove+0x28>
 80072ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80072b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80072b6:	e7f8      	b.n	80072aa <memmove+0x12>
 80072b8:	4402      	add	r2, r0
 80072ba:	4601      	mov	r1, r0
 80072bc:	428a      	cmp	r2, r1
 80072be:	d100      	bne.n	80072c2 <memmove+0x2a>
 80072c0:	bd10      	pop	{r4, pc}
 80072c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80072c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80072ca:	e7f7      	b.n	80072bc <memmove+0x24>

080072cc <_free_r>:
 80072cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80072ce:	2900      	cmp	r1, #0
 80072d0:	d044      	beq.n	800735c <_free_r+0x90>
 80072d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80072d6:	9001      	str	r0, [sp, #4]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	f1a1 0404 	sub.w	r4, r1, #4
 80072de:	bfb8      	it	lt
 80072e0:	18e4      	addlt	r4, r4, r3
 80072e2:	f000 f913 	bl	800750c <__malloc_lock>
 80072e6:	4a1e      	ldr	r2, [pc, #120]	; (8007360 <_free_r+0x94>)
 80072e8:	9801      	ldr	r0, [sp, #4]
 80072ea:	6813      	ldr	r3, [r2, #0]
 80072ec:	b933      	cbnz	r3, 80072fc <_free_r+0x30>
 80072ee:	6063      	str	r3, [r4, #4]
 80072f0:	6014      	str	r4, [r2, #0]
 80072f2:	b003      	add	sp, #12
 80072f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80072f8:	f000 b90e 	b.w	8007518 <__malloc_unlock>
 80072fc:	42a3      	cmp	r3, r4
 80072fe:	d908      	bls.n	8007312 <_free_r+0x46>
 8007300:	6825      	ldr	r5, [r4, #0]
 8007302:	1961      	adds	r1, r4, r5
 8007304:	428b      	cmp	r3, r1
 8007306:	bf01      	itttt	eq
 8007308:	6819      	ldreq	r1, [r3, #0]
 800730a:	685b      	ldreq	r3, [r3, #4]
 800730c:	1949      	addeq	r1, r1, r5
 800730e:	6021      	streq	r1, [r4, #0]
 8007310:	e7ed      	b.n	80072ee <_free_r+0x22>
 8007312:	461a      	mov	r2, r3
 8007314:	685b      	ldr	r3, [r3, #4]
 8007316:	b10b      	cbz	r3, 800731c <_free_r+0x50>
 8007318:	42a3      	cmp	r3, r4
 800731a:	d9fa      	bls.n	8007312 <_free_r+0x46>
 800731c:	6811      	ldr	r1, [r2, #0]
 800731e:	1855      	adds	r5, r2, r1
 8007320:	42a5      	cmp	r5, r4
 8007322:	d10b      	bne.n	800733c <_free_r+0x70>
 8007324:	6824      	ldr	r4, [r4, #0]
 8007326:	4421      	add	r1, r4
 8007328:	1854      	adds	r4, r2, r1
 800732a:	42a3      	cmp	r3, r4
 800732c:	6011      	str	r1, [r2, #0]
 800732e:	d1e0      	bne.n	80072f2 <_free_r+0x26>
 8007330:	681c      	ldr	r4, [r3, #0]
 8007332:	685b      	ldr	r3, [r3, #4]
 8007334:	6053      	str	r3, [r2, #4]
 8007336:	4421      	add	r1, r4
 8007338:	6011      	str	r1, [r2, #0]
 800733a:	e7da      	b.n	80072f2 <_free_r+0x26>
 800733c:	d902      	bls.n	8007344 <_free_r+0x78>
 800733e:	230c      	movs	r3, #12
 8007340:	6003      	str	r3, [r0, #0]
 8007342:	e7d6      	b.n	80072f2 <_free_r+0x26>
 8007344:	6825      	ldr	r5, [r4, #0]
 8007346:	1961      	adds	r1, r4, r5
 8007348:	428b      	cmp	r3, r1
 800734a:	bf04      	itt	eq
 800734c:	6819      	ldreq	r1, [r3, #0]
 800734e:	685b      	ldreq	r3, [r3, #4]
 8007350:	6063      	str	r3, [r4, #4]
 8007352:	bf04      	itt	eq
 8007354:	1949      	addeq	r1, r1, r5
 8007356:	6021      	streq	r1, [r4, #0]
 8007358:	6054      	str	r4, [r2, #4]
 800735a:	e7ca      	b.n	80072f2 <_free_r+0x26>
 800735c:	b003      	add	sp, #12
 800735e:	bd30      	pop	{r4, r5, pc}
 8007360:	200042c4 	.word	0x200042c4

08007364 <sbrk_aligned>:
 8007364:	b570      	push	{r4, r5, r6, lr}
 8007366:	4e0e      	ldr	r6, [pc, #56]	; (80073a0 <sbrk_aligned+0x3c>)
 8007368:	460c      	mov	r4, r1
 800736a:	6831      	ldr	r1, [r6, #0]
 800736c:	4605      	mov	r5, r0
 800736e:	b911      	cbnz	r1, 8007376 <sbrk_aligned+0x12>
 8007370:	f000 f8bc 	bl	80074ec <_sbrk_r>
 8007374:	6030      	str	r0, [r6, #0]
 8007376:	4621      	mov	r1, r4
 8007378:	4628      	mov	r0, r5
 800737a:	f000 f8b7 	bl	80074ec <_sbrk_r>
 800737e:	1c43      	adds	r3, r0, #1
 8007380:	d00a      	beq.n	8007398 <sbrk_aligned+0x34>
 8007382:	1cc4      	adds	r4, r0, #3
 8007384:	f024 0403 	bic.w	r4, r4, #3
 8007388:	42a0      	cmp	r0, r4
 800738a:	d007      	beq.n	800739c <sbrk_aligned+0x38>
 800738c:	1a21      	subs	r1, r4, r0
 800738e:	4628      	mov	r0, r5
 8007390:	f000 f8ac 	bl	80074ec <_sbrk_r>
 8007394:	3001      	adds	r0, #1
 8007396:	d101      	bne.n	800739c <sbrk_aligned+0x38>
 8007398:	f04f 34ff 	mov.w	r4, #4294967295
 800739c:	4620      	mov	r0, r4
 800739e:	bd70      	pop	{r4, r5, r6, pc}
 80073a0:	200042c8 	.word	0x200042c8

080073a4 <_malloc_r>:
 80073a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073a8:	1ccd      	adds	r5, r1, #3
 80073aa:	f025 0503 	bic.w	r5, r5, #3
 80073ae:	3508      	adds	r5, #8
 80073b0:	2d0c      	cmp	r5, #12
 80073b2:	bf38      	it	cc
 80073b4:	250c      	movcc	r5, #12
 80073b6:	2d00      	cmp	r5, #0
 80073b8:	4607      	mov	r7, r0
 80073ba:	db01      	blt.n	80073c0 <_malloc_r+0x1c>
 80073bc:	42a9      	cmp	r1, r5
 80073be:	d905      	bls.n	80073cc <_malloc_r+0x28>
 80073c0:	230c      	movs	r3, #12
 80073c2:	603b      	str	r3, [r7, #0]
 80073c4:	2600      	movs	r6, #0
 80073c6:	4630      	mov	r0, r6
 80073c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073cc:	4e2e      	ldr	r6, [pc, #184]	; (8007488 <_malloc_r+0xe4>)
 80073ce:	f000 f89d 	bl	800750c <__malloc_lock>
 80073d2:	6833      	ldr	r3, [r6, #0]
 80073d4:	461c      	mov	r4, r3
 80073d6:	bb34      	cbnz	r4, 8007426 <_malloc_r+0x82>
 80073d8:	4629      	mov	r1, r5
 80073da:	4638      	mov	r0, r7
 80073dc:	f7ff ffc2 	bl	8007364 <sbrk_aligned>
 80073e0:	1c43      	adds	r3, r0, #1
 80073e2:	4604      	mov	r4, r0
 80073e4:	d14d      	bne.n	8007482 <_malloc_r+0xde>
 80073e6:	6834      	ldr	r4, [r6, #0]
 80073e8:	4626      	mov	r6, r4
 80073ea:	2e00      	cmp	r6, #0
 80073ec:	d140      	bne.n	8007470 <_malloc_r+0xcc>
 80073ee:	6823      	ldr	r3, [r4, #0]
 80073f0:	4631      	mov	r1, r6
 80073f2:	4638      	mov	r0, r7
 80073f4:	eb04 0803 	add.w	r8, r4, r3
 80073f8:	f000 f878 	bl	80074ec <_sbrk_r>
 80073fc:	4580      	cmp	r8, r0
 80073fe:	d13a      	bne.n	8007476 <_malloc_r+0xd2>
 8007400:	6821      	ldr	r1, [r4, #0]
 8007402:	3503      	adds	r5, #3
 8007404:	1a6d      	subs	r5, r5, r1
 8007406:	f025 0503 	bic.w	r5, r5, #3
 800740a:	3508      	adds	r5, #8
 800740c:	2d0c      	cmp	r5, #12
 800740e:	bf38      	it	cc
 8007410:	250c      	movcc	r5, #12
 8007412:	4629      	mov	r1, r5
 8007414:	4638      	mov	r0, r7
 8007416:	f7ff ffa5 	bl	8007364 <sbrk_aligned>
 800741a:	3001      	adds	r0, #1
 800741c:	d02b      	beq.n	8007476 <_malloc_r+0xd2>
 800741e:	6823      	ldr	r3, [r4, #0]
 8007420:	442b      	add	r3, r5
 8007422:	6023      	str	r3, [r4, #0]
 8007424:	e00e      	b.n	8007444 <_malloc_r+0xa0>
 8007426:	6822      	ldr	r2, [r4, #0]
 8007428:	1b52      	subs	r2, r2, r5
 800742a:	d41e      	bmi.n	800746a <_malloc_r+0xc6>
 800742c:	2a0b      	cmp	r2, #11
 800742e:	d916      	bls.n	800745e <_malloc_r+0xba>
 8007430:	1961      	adds	r1, r4, r5
 8007432:	42a3      	cmp	r3, r4
 8007434:	6025      	str	r5, [r4, #0]
 8007436:	bf18      	it	ne
 8007438:	6059      	strne	r1, [r3, #4]
 800743a:	6863      	ldr	r3, [r4, #4]
 800743c:	bf08      	it	eq
 800743e:	6031      	streq	r1, [r6, #0]
 8007440:	5162      	str	r2, [r4, r5]
 8007442:	604b      	str	r3, [r1, #4]
 8007444:	4638      	mov	r0, r7
 8007446:	f104 060b 	add.w	r6, r4, #11
 800744a:	f000 f865 	bl	8007518 <__malloc_unlock>
 800744e:	f026 0607 	bic.w	r6, r6, #7
 8007452:	1d23      	adds	r3, r4, #4
 8007454:	1af2      	subs	r2, r6, r3
 8007456:	d0b6      	beq.n	80073c6 <_malloc_r+0x22>
 8007458:	1b9b      	subs	r3, r3, r6
 800745a:	50a3      	str	r3, [r4, r2]
 800745c:	e7b3      	b.n	80073c6 <_malloc_r+0x22>
 800745e:	6862      	ldr	r2, [r4, #4]
 8007460:	42a3      	cmp	r3, r4
 8007462:	bf0c      	ite	eq
 8007464:	6032      	streq	r2, [r6, #0]
 8007466:	605a      	strne	r2, [r3, #4]
 8007468:	e7ec      	b.n	8007444 <_malloc_r+0xa0>
 800746a:	4623      	mov	r3, r4
 800746c:	6864      	ldr	r4, [r4, #4]
 800746e:	e7b2      	b.n	80073d6 <_malloc_r+0x32>
 8007470:	4634      	mov	r4, r6
 8007472:	6876      	ldr	r6, [r6, #4]
 8007474:	e7b9      	b.n	80073ea <_malloc_r+0x46>
 8007476:	230c      	movs	r3, #12
 8007478:	603b      	str	r3, [r7, #0]
 800747a:	4638      	mov	r0, r7
 800747c:	f000 f84c 	bl	8007518 <__malloc_unlock>
 8007480:	e7a1      	b.n	80073c6 <_malloc_r+0x22>
 8007482:	6025      	str	r5, [r4, #0]
 8007484:	e7de      	b.n	8007444 <_malloc_r+0xa0>
 8007486:	bf00      	nop
 8007488:	200042c4 	.word	0x200042c4

0800748c <_realloc_r>:
 800748c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007490:	4680      	mov	r8, r0
 8007492:	4614      	mov	r4, r2
 8007494:	460e      	mov	r6, r1
 8007496:	b921      	cbnz	r1, 80074a2 <_realloc_r+0x16>
 8007498:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800749c:	4611      	mov	r1, r2
 800749e:	f7ff bf81 	b.w	80073a4 <_malloc_r>
 80074a2:	b92a      	cbnz	r2, 80074b0 <_realloc_r+0x24>
 80074a4:	f7ff ff12 	bl	80072cc <_free_r>
 80074a8:	4625      	mov	r5, r4
 80074aa:	4628      	mov	r0, r5
 80074ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074b0:	f000 f838 	bl	8007524 <_malloc_usable_size_r>
 80074b4:	4284      	cmp	r4, r0
 80074b6:	4607      	mov	r7, r0
 80074b8:	d802      	bhi.n	80074c0 <_realloc_r+0x34>
 80074ba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80074be:	d812      	bhi.n	80074e6 <_realloc_r+0x5a>
 80074c0:	4621      	mov	r1, r4
 80074c2:	4640      	mov	r0, r8
 80074c4:	f7ff ff6e 	bl	80073a4 <_malloc_r>
 80074c8:	4605      	mov	r5, r0
 80074ca:	2800      	cmp	r0, #0
 80074cc:	d0ed      	beq.n	80074aa <_realloc_r+0x1e>
 80074ce:	42bc      	cmp	r4, r7
 80074d0:	4622      	mov	r2, r4
 80074d2:	4631      	mov	r1, r6
 80074d4:	bf28      	it	cs
 80074d6:	463a      	movcs	r2, r7
 80074d8:	f7ff fbaa 	bl	8006c30 <memcpy>
 80074dc:	4631      	mov	r1, r6
 80074de:	4640      	mov	r0, r8
 80074e0:	f7ff fef4 	bl	80072cc <_free_r>
 80074e4:	e7e1      	b.n	80074aa <_realloc_r+0x1e>
 80074e6:	4635      	mov	r5, r6
 80074e8:	e7df      	b.n	80074aa <_realloc_r+0x1e>
	...

080074ec <_sbrk_r>:
 80074ec:	b538      	push	{r3, r4, r5, lr}
 80074ee:	4d06      	ldr	r5, [pc, #24]	; (8007508 <_sbrk_r+0x1c>)
 80074f0:	2300      	movs	r3, #0
 80074f2:	4604      	mov	r4, r0
 80074f4:	4608      	mov	r0, r1
 80074f6:	602b      	str	r3, [r5, #0]
 80074f8:	f7fa fb3c 	bl	8001b74 <_sbrk>
 80074fc:	1c43      	adds	r3, r0, #1
 80074fe:	d102      	bne.n	8007506 <_sbrk_r+0x1a>
 8007500:	682b      	ldr	r3, [r5, #0]
 8007502:	b103      	cbz	r3, 8007506 <_sbrk_r+0x1a>
 8007504:	6023      	str	r3, [r4, #0]
 8007506:	bd38      	pop	{r3, r4, r5, pc}
 8007508:	200042cc 	.word	0x200042cc

0800750c <__malloc_lock>:
 800750c:	4801      	ldr	r0, [pc, #4]	; (8007514 <__malloc_lock+0x8>)
 800750e:	f000 b811 	b.w	8007534 <__retarget_lock_acquire_recursive>
 8007512:	bf00      	nop
 8007514:	200042d0 	.word	0x200042d0

08007518 <__malloc_unlock>:
 8007518:	4801      	ldr	r0, [pc, #4]	; (8007520 <__malloc_unlock+0x8>)
 800751a:	f000 b80c 	b.w	8007536 <__retarget_lock_release_recursive>
 800751e:	bf00      	nop
 8007520:	200042d0 	.word	0x200042d0

08007524 <_malloc_usable_size_r>:
 8007524:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007528:	1f18      	subs	r0, r3, #4
 800752a:	2b00      	cmp	r3, #0
 800752c:	bfbc      	itt	lt
 800752e:	580b      	ldrlt	r3, [r1, r0]
 8007530:	18c0      	addlt	r0, r0, r3
 8007532:	4770      	bx	lr

08007534 <__retarget_lock_acquire_recursive>:
 8007534:	4770      	bx	lr

08007536 <__retarget_lock_release_recursive>:
 8007536:	4770      	bx	lr

08007538 <_init>:
 8007538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800753a:	bf00      	nop
 800753c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800753e:	bc08      	pop	{r3}
 8007540:	469e      	mov	lr, r3
 8007542:	4770      	bx	lr

08007544 <_fini>:
 8007544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007546:	bf00      	nop
 8007548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800754a:	bc08      	pop	{r3}
 800754c:	469e      	mov	lr, r3
 800754e:	4770      	bx	lr
